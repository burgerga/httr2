[{"path":"https://httr2.r-lib.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 httr2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://httr2.r-lib.org/articles/httr2.html","id":"create-a-request","dir":"Articles","previous_headings":"","what":"Create a request","title":"httr2","text":"httr2, start creating request. ’re familiar httr, big change: httr submit request, immediately receiving response. explicit request object makes easier build complex request piece piece works well pipe. Every request starts URL: , instead external website, use test server ’s built-httr2 . ensures vignette work regardless run . can see exactly request send server dry run: first line request contains three important pieces information: HTTP method, verb tells server want . ’s GET, common verb, indicating want get resource. verbs include POST, create new resource, PUT, replace existing resource, DELETE, delete resource. path, URL stripped details server already knows, .e. protocol (http https), host (localhost), port (R url_parse(example_url())$port). version HTTP protocol. unimportant purposes ’s handled lower level. following lines specify HTTP headers, series name-value pairs separated :. headers request automatically added httr2, can override add req_headers(): Header names case-insensitive, servers ignore headers don’t understand. headers finish blank line followed body. requests (like GET requests) don’t body, let’s add one see happens. req_body_*() functions provide variety ways add data body. ’ll use req_body_json() add data encoded JSON: ’s changed? method changed GET POST. POST standard method sending data website, automatically used whenever add body. Use req_method() different method. two new headers: Content-Type Content-Length. tell server interpret body — ’s encoded JSON 15 bytes long. body, consisting JSON. Different servers want data encoded differently httr2 provides selection common formats. example, req_body_form() uses encoding used submit form web browser: req_body_multipart() uses multipart encoding particularly important need send larger amounts data complete files: need send data encoded different form, can use req_body_raw() add data body set Content-Type header.","code":"req <- request(example_url()) req #> <httr2_request> #> GET http://127.0.0.1:36927/ #> Body: empty req %>% req_dry_run() #> GET / HTTP/1.1 #> Host: 127.0.0.1:36927 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd req %>%   req_headers(     Name = \"Hadley\",      `Shoe-Size` = \"11\",      Accept = \"application/json\"   ) %>%    req_dry_run() #> GET / HTTP/1.1 #> Host: 127.0.0.1:36927 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept-Encoding: deflate, gzip, br, zstd #> Name: Hadley #> Shoe-Size: 11 #> Accept: application/json req %>%   req_body_json(list(x = 1, y = \"a\")) %>%    req_dry_run() #> POST / HTTP/1.1 #> Host: 127.0.0.1:36927 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Type: application/json #> Content-Length: 15 #>  #> {\"x\":1,\"y\":\"a\"} req %>%   req_body_form(x = \"1\", y = \"a\") %>%    req_dry_run() #> POST / HTTP/1.1 #> Host: 127.0.0.1:36927 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Type: application/x-www-form-urlencoded #> Content-Length: 7 #>  #> x=1&y=a req %>%   req_body_multipart(x = \"1\", y = \"a\") %>%    req_dry_run() #> POST / HTTP/1.1 #> Host: 127.0.0.1:36927 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Length: 228 #> Content-Type: multipart/form-data; boundary=------------------------37675467b0cf7f82 #>  #> --------------------------37675467b0cf7f82 #> Content-Disposition: form-data; name=\"x\" #>  #> 1 #> --------------------------37675467b0cf7f82 #> Content-Disposition: form-data; name=\"y\" #>  #> a #> --------------------------37675467b0cf7f82--"},{"path":"https://httr2.r-lib.org/articles/httr2.html","id":"perform-a-request-and-fetch-the-response","dir":"Articles","previous_headings":"","what":"Perform a request and fetch the response","title":"httr2","text":"actually perform request fetch response back server, call req_perform(): can see simulation httr2 actually received resp_raw(): HTTP response similar structure HTTP request. first line gives version HTTP used, status code ’s optionally followed short description. headers, followed blank line, followed body. majority responses body, unlike requests. can extract data response using resp_() functions: resp_status() returns status code resp_status_desc() returns description: can extract headers resp_headers() specific header resp_header(): Headers case insensitive: can extract body various forms using resp_body_*() family functions. Since response returns JSON can use resp_body_json(): Responses status codes 4xx 5xx HTTP errors. httr2 automatically turns R errors: another important difference httr, required explicitly call httr::stop_for_status() turn HTTP errors R errors. can revert httr behaviour req_error(req, is_error = ~ FALSE).","code":"req <- request(example_url()) %>% req_url_path(\"/json\") resp <- req %>% req_perform() resp #> <httr2_response> #> GET http://127.0.0.1:36927/json #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (407 bytes) resp %>% resp_raw() #> HTTP/1.1 200 OK #> Connection: close #> Date: Fri, 01 Sep 2023 08:15:23 GMT #> Content-Type: application/json #> Content-Length: 407 #> ETag: \"de760e6d\" #>  #> { #>   \"firstName\": \"John\", #>   \"lastName\": \"Smith\", #>   \"isAlive\": true, #>   \"age\": 27, #>   \"address\": { #>     \"streetAddress\": \"21 2nd Street\", #>     \"city\": \"New York\", #>     \"state\": \"NY\", #>     \"postalCode\": \"10021-3100\" #>   }, #>   \"phoneNumbers\": [ #>     { #>       \"type\": \"home\", #>       \"number\": \"212 555-1234\" #>     }, #>     { #>       \"type\": \"office\", #>       \"number\": \"646 555-4567\" #>     } #>   ], #>   \"children\": [], #>   \"spouse\": null #> } resp %>% resp_status() #> [1] 200 resp %>% resp_status_desc() #> [1] \"OK\" resp %>% resp_headers() #> <httr2_headers> #> Connection: close #> Date: Fri, 01 Sep 2023 08:15:23 GMT #> Content-Type: application/json #> Content-Length: 407 #> ETag: \"de760e6d\" resp %>% resp_header(\"Content-Length\") #> [1] \"407\" resp %>% resp_header(\"ConTEnT-LeNgTH\") #> [1] \"407\" resp %>% resp_body_json() %>% str() #> List of 8 #>  $ firstName   : chr \"John\" #>  $ lastName    : chr \"Smith\" #>  $ isAlive     : logi TRUE #>  $ age         : int 27 #>  $ address     :List of 4 #>   ..$ streetAddress: chr \"21 2nd Street\" #>   ..$ city         : chr \"New York\" #>   ..$ state        : chr \"NY\" #>   ..$ postalCode   : chr \"10021-3100\" #>  $ phoneNumbers:List of 2 #>   ..$ :List of 2 #>   .. ..$ type  : chr \"home\" #>   .. ..$ number: chr \"212 555-1234\" #>   ..$ :List of 2 #>   .. ..$ type  : chr \"office\" #>   .. ..$ number: chr \"646 555-4567\" #>  $ children    : list() #>  $ spouse      : NULL request(example_url()) %>%    req_url_path(\"/status/404\") %>%    req_perform() #> Error in `req_perform()`: #> ! HTTP 404 Not Found.  request(example_url()) %>%    req_url_path(\"/status/500\") %>%    req_perform() #> Error in `req_perform()`: #> ! HTTP 500 Internal Server Error."},{"path":"https://httr2.r-lib.org/articles/httr2.html","id":"control-the-request-process","dir":"Articles","previous_headings":"","what":"Control the request process","title":"httr2","text":"number req_ functions don’t directly affect HTTP request instead control overall process submitting request handling response. include: req_cache() sets cache repeated requests return results, can avoid trip server. req_throttle() automatically add small delay request can avoid hammering server many requests. req_retry() sets retry strategy request either fails get transient HTTP error, ’ll automatically retry short delay. details see documentation, well examples usage real APIs vignette(\"wrapping-apis\").","code":""},{"path":"https://httr2.r-lib.org/articles/oauth.html","id":"clients","dir":"Articles","previous_headings":"","what":"Clients","title":"OAuth","text":"first step working OAuth API create client. involves registering developer account API’s website creating new OAuth app. process varies API API, end ’ll get client id cases client secret. (’ll definitely need testing package, ’ll probably also baked package convenience users. Bundling app user friendly, always possible, particularly rate limits enforced per-app rather per-user basis. always provide way user provide app.) API provides way authenticate app without client secret, leave package. cases, ’ll need include secret package. can use obfuscate() hide secret; bulletproof2, cases ’ll easier create new client try steal . Additionally, ’s unusual OAuth client able anything right, even someone steal secret ’s much harm can . obfuscate secret, call obfuscate(): use client id website along obfuscated secret create client. following code shows GitHub OAuth app created specifically vignette: need figure token_url documentation. wish give good advice find 😞. Note print client secret automatically redacted:","code":"obfuscate(\"secret\") #> obfuscated(\"J0U_r3DE9H6obgjYcI6gIMhPBx7ZmA\") client <- oauth_client(   id = \"28acfec0674bb3da9f38\",   secret = obfuscated(\"J9iiGmyelHltyxqrHXW41ZZPZamyUNxSX1_uKnvPeinhhxET_7FfUs2X0LLKotXY2bpgOMoHRCo\"),   token_url = \"https://github.com/login/oauth/access_token\",   name = \"hadley-oauth-test\" ) client #> <httr2_oauth_client> #> name: hadley-oauth-test #> id: 28acfec0674bb3da9f38 #> secret: <REDACTED> #> token_url: https://github.com/login/oauth/access_token #> auth: oauth_client_req_auth_body"},{"path":"https://httr2.r-lib.org/articles/oauth.html","id":"flows","dir":"Articles","previous_headings":"","what":"Flows","title":"OAuth","text":"client need use flow order get token. OAuth provides number different “flows”, common “authorisation code” flow, implemented req_oauth_auth_code(). can try running code: flow can’t used inside vignette ’s designed specifically interactive use: open webpage GitHub requires interactively confirm ’s OK app use GitHub account. flows provide different ways getting token: req_oauth_client_credentials() used allow client perform actions behalf (instead behalf user). typically need want support service accounts, used non-interactive environments. req_oauth_device() uses “device” flow designed devices like TVs don’t easy way enter data. also works well console. req_oauth_bearer_jwt() uses JWT signed private key. req_oauth_password() exchanges user name password access token. req_oauth_refresh() works directly refresh token already . ’s useful testing. ’s one historically important OAuth flow httr2 doesn’t support: implicit grant flow. now mostly deprecated never particularly good fit native applications relies technique returning access token works inside web browser. wrapping API, ’ll need carefully read documentation figure flows available. Typically ’ll want use auth code flow, ’s available ’ll need carefully consider others. additional wrinkle many APIs don’t implement flow exactly way spec. initial attempt doesn’t work, ’re going need sleuthing. going painful, unfortunately ’s way around . recommend using with_verbosity() can see exactly httr2 sending server. ’ll need carefully compare API documentation play “spot difference”.","code":"token <- oauth_flow_auth_code(client, auth_url = \"https://github.com/login/oauth/authorize\")"},{"path":"https://httr2.r-lib.org/articles/oauth.html","id":"tokens","dir":"Articles","previous_headings":"","what":"Tokens","title":"OAuth","text":"point flow get token. can use req_auth_bearer_token() authorise request access token stored inside token object: However, cases won’t want , instead allow httr2 manage whole process, switching oauth_flow_{name} req_oauth_{name}: important APIs provide short-lived access token needs regularly refreshed using longer-lived refresh token. httr2 automatically refresh token ’s expired (.e. expiry date past) request errors 401 ’s invalid_token error WWW-authenticate header.","code":"request(\"https://api.github.com/user\") %>%    req_auth_bearer_token(token$access_token) %>%    req_perform() %>%    resp_body_json() %>%   .$name #> [1] \"Hadley Wickham\" request(\"https://api.github.com/user\") %>%    req_oauth_auth_code(client, auth_url = \"https://github.com/login/oauth/authorize\") %>%    req_perform() %>%    resp_body_json()"},{"path":"https://httr2.r-lib.org/articles/oauth.html","id":"caching","dir":"Articles","previous_headings":"","what":"Caching","title":"OAuth","text":"default, req_oauth_auth_code() friends cache token memory, multiple requests session use token. cases, may want save token ’s automatically used across sessions. easy (just set cache_disk = TRUE req_oauth_auth_code()) need carefully consider consequences saving user’s credentials disk. httr2 best can save credentials securely. stored local cache directory (oauth_cache_path()) accessible current user, encrypted hard package httr2 read. However, ’s way prevent R code using httr2 access , choose cache tokens, inform user give ability opt-. can see clients cached tokens looking cache directory used httr2: httr2 automatically deletes cached tokens older 30 days whenever ’s loaded. means ’ll need re-auth least month, prevents tokens hanging around disk long ’ve forgotten created .","code":"dir(oauth_cache_path(), recursive = TRUE) #> character(0)"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"faker-api","dir":"Articles","previous_headings":"","what":"Faker API","title":"Wrapping APIs","text":"’ll start simple API, faker API, provides collection techniques generating fake data. start writing sort functions might put package, ’ll perform request just see basics work:","code":"# We start by creating a request that uses the base API url req <- request(\"https://fakerapi.it/api/v1\") resp <- req %>%    # Then we add on the images path   req_url_path_append(\"images\") %>%    # Add query parameters _width and _quantity   req_url_query(`_width` = 380, `_quantity` = 1) %>%    req_perform()  # The result comes back as JSON resp %>% resp_body_json() %>% str() #> List of 4 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 3 #>   .. ..$ title      : chr \"Eos quo a error.\" #>   .. ..$ description: chr \"Blanditiis accusamus distinctio et et et. Ipsam eum porro et tenetur. Dignissimos asperiores aliquid nostrum porro et.\" #>   .. ..$ url        : chr \"http://placeimg.com/380/480/any\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"errors","dir":"Articles","previous_headings":"Faker API","what":"Errors","title":"Wrapping APIs","text":"’s always worth little early experimentation see get useful information errors. httr2 defaults get way , retrieve unsuccessful HTTP response, automatically get error prevents inspecting body: However, can access last response (successful ) last_response(): doesn’t look like ’s anything useful . Sometimes useful info returned headers, let’s check: doesn’t look like ’re getting useful information, can leave req_error() default . ’ll another go later API provide details.","code":"req %>%    req_url_path_append(\"invalid\") %>%    req_perform() #> Error in `req_perform()`: #> ! HTTP 404 Not Found. resp <- last_response() resp %>% resp_body_json() #> $status #> [1] \"Not found\" #>  #> $code #> [1] 404 #>  #> $total #> [1] 0 resp %>% resp_headers() #> <httr2_headers> #> Server: nginx #> Content-Type: application/json #> Transfer-Encoding: chunked #> Connection: keep-alive #> Vary: Accept-Encoding #> X-Powered-By: PHP/7.3.16 #> Cache-Control: no-cache, private #> Date: Fri, 01 Sep 2023 08:15:11 GMT #> Access-Control-Allow-Origin: * #> Access-Control-Allow-Methods: GET #> Access-Control-Allow-Credentials: true #> Access-Control-Max-Age: 86400 #> Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With #> Content-Encoding: gzip"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"user-agent","dir":"Articles","previous_headings":"Faker API","what":"User agent","title":"Wrapping APIs","text":"’re wrapping code package, ’s considered polite set user agent, , package accidentally something horribly wrong, developers website can figure reach . can req_user_agent() function:","code":"req %>%   req_user_agent(\"my_package_name (http://my.package.web.site)\") %>%    req_dry_run() #> GET /api/v1 HTTP/1.1 #> Host: fakerapi.it #> User-Agent: my_package_name (http://my.package.web.site) #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"core-request-function","dir":"Articles","previous_headings":"Faker API","what":"Core request function","title":"Wrapping APIs","text":"’ve made successful requests, ’s worth seeing can figure general pattern can wrap function become core package. faker, spent little time documentation noting commonalities: Every URL form https://fakerapi./api/v1/{resource}, data passed resource query parameters. parameters start _. Every resource three common query parameters: _locale, _quantity, _seed. endpoints return JSON data. led construct following function: ’ve made important choices : ’ve decided supply default values quantity locale parameters. makes function easier demo vignette. ’ve used default NULL seed argument. req_url_query() automatically drop NULL arguments means default value sent API, read function definition can still see seed accepted. automatically prefix query parameters _ argument names starting _ hard type R. function generates request, performs , extracts body response. works well simple cases, complex APIs might want return request object can modified performed. also used one cool trick: req_url_query() uses dynamic dots, can use !!! convert (e.g.) req_url_query(req, !!!list(`_quantity` = 1, `_locale` = \"en_US\")) req_url_query(req, `_quantity` = 1, `_locale` = \"en_US\").","code":"faker <- function(resource, ..., quantity = 1, locale = \"en_US\", seed = NULL) {   params <- list(     ...,     quantity = quantity,     locale = locale,     seed = seed   )   names(params) <- paste0(\"_\", names(params))      request(\"https://fakerapi.it/api/v1\") %>%      req_url_path_append(resource) %>%      req_url_query(!!!params) %>%      req_user_agent(\"my_package_name (http://my.package.web.site)\") %>%      req_perform() %>%      resp_body_json() }  str(faker(\"images\", width = 300)) #> List of 4 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 3 #>   .. ..$ title      : chr \"Qui qui et quidem cumque et.\" #>   .. ..$ description: chr \"Est possimus est dolores minus. Excepturi maiores dolore ullam accusantium ut eius. Est commodi deleniti fugiat\"| __truncated__ #>   .. ..$ url        : chr \"http://placeimg.com/300/480/any\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"wrapping-individual-endpoints","dir":"Articles","previous_headings":"Faker API","what":"Wrapping individual endpoints","title":"Wrapping APIs","text":"faker() quite general — ’s good tool package developer can read faker documentation translate function call. ’s friendly package user might know anything web APIs. typically next step process wrap individual endpoints functions. example, let’s take persons endpoint three additional parameters: gender (male female), birthday_start, birthday_end. simple wrapper start something like : make user friendly checking input types, returning result tibble. quick dirty conversion using purrr; depending needs use base R code tidyr::hoist(). next steps export document function; ’ll leave .","code":"faker_person <- function(gender = NULL, birthday_start = NULL, birthday_end = NULL, quantity = 1, locale = \"en_US\", seed = NULL) {   faker(     \"persons\",     gender = gender,     birthday_start = birthday_start,     birthday_end = birthday_end,     quantity = quantity,     locale = locale,     seed = seed   )   } str(faker_person(\"male\")) #> List of 4 #>  $ status: chr \"OK\" #>  $ code  : int 200 #>  $ total : int 1 #>  $ data  :List of 1 #>   ..$ :List of 10 #>   .. ..$ id       : int 1 #>   .. ..$ firstname: chr \"Ernesto\" #>   .. ..$ lastname : chr \"Lebsack\" #>   .. ..$ email    : chr \"garnet66@gmail.com\" #>   .. ..$ phone    : chr \"+2780358044454\" #>   .. ..$ birthday : chr \"1961-11-12\" #>   .. ..$ gender   : chr \"male\" #>   .. ..$ address  :List of 10 #>   .. .. ..$ id            : int 0 #>   .. .. ..$ street        : chr \"694 Estelle Mill Suite 047\" #>   .. .. ..$ streetName    : chr \"Leila Ford\" #>   .. .. ..$ buildingNumber: chr \"493\" #>   .. .. ..$ city          : chr \"New Zena\" #>   .. .. ..$ zipcode       : chr \"13480-2691\" #>   .. .. ..$ country       : chr \"Comoros\" #>   .. .. ..$ county_code   : chr \"CK\" #>   .. .. ..$ latitude      : num 75.1 #>   .. .. ..$ longitude     : num -34.1 #>   .. ..$ website  : chr \"http://johnson.com\" #>   .. ..$ image    : chr \"http://placeimg.com/640/480/people\" library(purrr)  faker_person <- function(gender = NULL, birthday_start = NULL, birthday_end = NULL, quantity = 1, locale = \"en_US\", seed = NULL) {   if (!is.null(gender)) {     gender <- match.arg(gender, c(\"male\", \"female\"))   }   if (!is.null(birthday_start)) {     if (!inherits(birthday_start, \"Date\")) {       stop(\"`birthday_start` must be a date\")     }     birthday_start <- format(birthday_start, \"%Y-%m-%d\")   }   if (!is.null(birthday_end)) {     if (!inherits(birthday_end, \"Date\")) {       stop(\"`birthday_end` must be a date\")     }     birthday_end <- format(birthday_end, \"%Y-%m-%d\")   }      json <- faker(     \"persons\",     gender = gender,     birthday_start = birthday_start,     birthday_end = birthday_end,     quantity = quantity,     locale = locale,     seed = seed   )        tibble::tibble(     firstname = map_chr(json$data, \"firstname\"),     lastname = map_chr(json$data, \"lastname\"),     email = map_chr(json$data, \"email\"),     gender = map_chr(json$data, \"gender\")   ) } faker_person(\"male\", quantity = 5) #> # A tibble: 5 × 4 #>   firstname lastname  email                    gender #>   <chr>     <chr>     <chr>                    <chr>  #> 1 Gerald    VonRueden nolan.fritsch@gmail.com  male   #> 2 Janick    Senger    elwin.nolan@kautzer.com  male   #> 3 Orion     Lang      adan.becker@brakus.org   male   #> 4 Arturo    Nolan     toy.ledner@marquardt.org male   #> 5 Alberto   Hahn      roberts.chet@hotmail.com male"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"secret-management","dir":"Articles","previous_headings":"","what":"Secret management","title":"Wrapping APIs","text":"need take quick break APIs talk secrets. Secrets important, every API (except simple APIs like faker) going require identify way, typically API key token. even plan require users supply information, ’ll still need record credentials order test package. system described likely overkill one secret needs shared couple places: can just put .Renviron access Sys.getenv(). probably accumulate secrets time, ’ll need figure share people computers, think spending little time understand system set package pay long term.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"basics","dir":"Articles","previous_headings":"Secret management","what":"Basics","title":"Wrapping APIs","text":"httr2 provides secret_encrypt() secret_decrypt() scramble secrets can include public source code without worrying others can read . three basic steps process: create encryption key secret_make_key() used scramble descramble secrets using symmetric cryptography: (Note secret_make_key() uses cryptographically secure random number generator provided OpenSSL; affected R’s RNG settings, ’s way make reproducible.) scramble secrets secret_encrypt() store resulting text directly source code package: needed, descramble secret using secret_decrypt():","code":"key <- secret_make_key() key #> [1] \"xuTj3WucGR7vcL1UQjRRLA\" secret_scrambled <- secret_encrypt(\"secret I need to work with an API\", key) secret_scrambled #> [1] \"S7QhuEWBH1-YUzoAQPzx7nrgkRgiu487RP8d4oJ0sbPrqzQMf-PnP00rYjvskK7ZYw\" secret_decrypt(secret_scrambled, key) #> [1] \"secret I need to work with an API\""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"package-keys-and-secrets","dir":"Articles","previous_headings":"Secret management","what":"Package keys and secrets","title":"Wrapping APIs","text":"can create number encryption keys, highly recommend create one key per package, ’ll call package key. section, ’ll show store key (automated tests) can use , one else can. httr2 built around notion key live environment variable. first step make package key available local development machine adding line user-level .Renviron (can easily open usethis::edit_r_environ()): Now (restart R), ’ll able take advantage special secret_encrypt() secret_decrypt() feature: key argument can name environment variable, instead encryption key . fact, natural usage. ’ll also need make key available GitHub Actions (check pkgdown) automated tests can use . requires two steps: Add key repository secrets. Share key workflows need adding line appropriate workflow: can see httr2 GitHub workflow. continuous integration platforms offer similar ways make key available secure environment variable.","code":"YOURPACKAGE_KEY=key_you_generated_with_secret_make_key secret_scrambled <- secret_encrypt(\"secret I need to work with an API\", \"YOURPACKAGE_KEY\") secret_scrambled #> [1] \"FUJGkHa9rbJNbmhtEiUCPvhr_tT0wl5LT0DaOnPecnTKqZNKP98KMtrcUSUScIPGqg\" secret_decrypt(secret_scrambled, \"YOURPACKAGE_KEY\") #> [1] \"secret I need to work with an API\" env:       YOURPACKAGE_KEY: ${{ secrets.YOURPACKAGE_KEY }}"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"when-the-package-key-isnt-available","dir":"Articles","previous_headings":"Secret management","what":"When the package key isn’t available","title":"Wrapping APIs","text":"important cases code won’t access package key: CRAN, personal machines external contributors, automated checks PRs. want share package CRAN make easy others contribute, need make sure examples, vignettes, tests work without error: vignettes, can run knitr::opts_chunk(eval = secret_has_key(\"YOURPACKAGE_KEY\")) chunks evaluated key available. examples, can surround code blocks require key (httr2::secret_has_key(\"YOURPACKAGE_KEY\")) {} don’t need anything tests secret_decrypt() run testthat, automatically skip() test key isn’t available.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"nytimes-books-api","dir":"Articles","previous_headings":"","what":"NYTimes Books API","title":"Wrapping APIs","text":"Next ’ll take look NYTimes Books API. requires simple authentication API key ’s included every request. ’re wrapping API key ’re going face two struggles: test package without sharing key whole world? allow users supply key, without pass every function? now can understand following code works get NYTimes Book API key: ’ll start tackling first problem otherwise ’s way show API works vignette 😃. ’ll come back second end section, ’s easiest tackle function place.","code":"my_key <- secret_decrypt(\"4Nx84VPa83dMt3X6bv0fNBlLbv3U4D1kHM76YisKEfpCarBm1UHJHARwJHCFXQSV\", \"HTTR2_KEY\")"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"security-considerations","dir":"Articles","previous_headings":"NYTimes Books API","what":"Security considerations","title":"Wrapping APIs","text":"Note including API key query parameter relatively insecure; API uses method auth, ’s typically key relatively easy create gives relatively privileges. takes couple minutes generate NYTimes API key, ’s little incentive someone try steal . main problem conveying credentials via url ’s easily exposed, httr2 makes efforts redact confidential information stored query parameters. means ’s relatively easy leak key use req_perform(verbosity = 1), req_dry_run(), even just print request object. indeed, ’ll see examples — bad practice real package, think ’s ok key doesn’t allow anything valuable makes teaching APIs much easier.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"basic-request","dir":"Articles","previous_headings":"NYTimes Books API","what":"Basic request","title":"Wrapping APIs","text":"Now let’s perform test request look response: Like modern APIs, one returns results JSON: start wrapping function, let’s consider happens errors.","code":"resp <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = my_key, isbn = 9780307476463) %>%    req_perform() resp resp %>%    resp_body_json() %>%    str()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"error-handling","dir":"Articles","previous_headings":"NYTimes Books API","what":"Error handling","title":"Wrapping APIs","text":"happens ’s error? example, deliberately supply invalid key: see ’s extra useful information can look last_response(): looks like ’s useful additional info faultstring: add information future errors can use body argument req_error(). function takes response returns character vector additional information include error. re-fetch request, see additional information displayed R error:","code":"resp <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_perform() resp <- last_response() resp resp %>% resp_body_json() resp %>% resp_body_json() %>% .$fault %>% .$faultstring nytimes_error_body <- function(resp) {   resp %>% resp_body_json() %>% .$fault %>% .$faultstring }  resp <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_error(body = nytimes_error_body) %>%    req_perform()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"rate-limits","dir":"Articles","previous_headings":"NYTimes Books API","what":"Rate limits","title":"Wrapping APIs","text":"Another common source errors rate-limiting — used many servers prevent one unruly client consuming many resources. frequently asked questions page describes rate limits NYT APIs: Yes, two rate limits per API: 4,000 requests per day 10 requests per minute. sleep 6 seconds calls avoid hitting per minute rate limit. need higher rate limit, please contact us code@nytimes.com. Many APIs return additional information long wait rate limit exceeded (often using Retry-header). deliberately violated rate limit quickly making 11 requests; unfortunately response standard 429 (many requests), include information long wait either response body headers. means can’t use req_retry(), automatically waits amount time server requests. Instead, ’ll use req_throttle() ensure don’t make 10 requests every 60 seconds: default, req_throttle() shares limit across requests made host (.e. api.nytimes.com). Since docs suggest rate limit applies per API, might want use realm argument bit specific:","code":"req <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_throttle(10 / 60) req <- request(\"https://api.nytimes.com/svc/books/v3\") %>%    req_url_path_append(\"/reviews.json\") %>%    req_url_query(`api-key` = \"invalid\", isbn = 9780307476463) %>%    req_throttle(10 / 60, realm = \"https://api.nytimes.com/svc/books\")"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"wrapping-it-up","dir":"Articles","previous_headings":"NYTimes Books API","what":"Wrapping it up","title":"Wrapping APIs","text":"Putting together pieces yields function something like : finish real package, ’d want : Add explicit arguments check correct type. Export document function. Convert nested list user-friendly data structure (probably data frame one row per review). ’d also want provide convenient way user supply API key.","code":"nytimes_books <- function(api_key, path, ...) {   request(\"https://api.nytimes.com/svc/books/v3\") %>%      req_url_path_append(\"/reviews.json\") %>%      req_url_query(..., `api-key` = api_key) %>%      req_error(body = nytimes_error_body) %>%      req_throttle(10 / 60, realm = \"https://api.nytimes.com/svc/books\") %>%      req_perform() %>%      resp_body_json() }  drunk <- nytimes_books(my_key, \"/reviews.json\", isbn = \"0316453382\") drunk$results[[1]]$summary"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"user-supplied-key","dir":"Articles","previous_headings":"NYTimes Books API","what":"User-supplied key","title":"Wrapping APIs","text":"good place start environment variable, environment variables easy set without typing anything console (can get accidentally shared via .Rhistory) easily set automated processes. ’d write function retrieve API key, returning helpful message ’s found: modify nytimes_books() use get_api_key() default value api_key. Since argument now optional, can move end argument list, since ’ll needed exceptional circumstances. can make approach little user friendly providing helper sets environment variable: Using askpass (similar) good practice since don’t want encourage user type secret key console, mentioned . ’s good idea extend get_api_key() automatically use encrypted key make easier write tests:","code":"get_api_key <- function() {   key <- Sys.getenv(\"NYTIMES_KEY\")   if (identical(key, \"\")) {     stop(\"No API key found, please supply with `api_key` argument or with NYTIMES_KEY env var\")   }   key } nytimes_books <- function(path, ..., api_key = get_api_key()) {   ... } set_api_key <- function(key = NULL) {   if (is.null(key)) {     key <- askpass::askpass(\"Please enter your API key\")   }   Sys.setenv(\"NYTIMES_KEY\" = key) } get_api_key <- function() {   key <- Sys.getenv(\"NYTIMES_KEY\")   if (!identical(key, \"\")) {     return(key)   }      if (is_testing()) {     return(testing_key())   } else {     stop(\"No API key found, please supply with `api_key` argument or with NYTIMES_KEY env var\")    } }  is_testing <- function() {   identical(Sys.getenv(\"TESTTHAT\"), \"true\") }  testing_key <- function() {   secret_decrypt(\"4Nx84VPa83dMt3X6bv0fNBlLbv3U4D1kHM76YisKEfpCarBm1UHJHARwJHCFXQSV\", \"HTTR2_KEY\") }"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"github-gists-api","dir":"Articles","previous_headings":"","what":"Github Gists API","title":"Wrapping APIs","text":"Next ’ll take look API can make changes behalf user, just retrieve data: GitHub’s gist API. uses different HTTP methods perform different actions, like creating, updating, deleting gists. can get , let’s handle authentication, rate-limiting, errors.","code":""},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"authentication","dir":"Articles","previous_headings":"Github Gists API","what":"Authentication","title":"Wrapping APIs","text":"easiest way authenticate GitHub API use personal access token. token alternative username password. one username + password per site; can one token per use case. lets use case minimal set permissions, can easily revoke one token without affecting use case. created personal access token specifically vignette can access gists, , last example, stored encrypted version vignette: want run vignette , ’ll need create new token GitHub settings; just make sure includes “gist” scope. ’s also good idea give every token descriptive name, reminds motivating use case, update re-generate expired. authenticate request token, need put Authorization header “token” prefix: authorization header usually contains secret information, httr2 automatically redacts it1:","code":"token <- secret_decrypt(\"Guz59woxKoIO_JVtp2IzU3mFIU3ULtaUEa8xvvpYUBdVthR8jhxzc3bMZFhA9HL-ZK6YZudOI6g\", \"HTTR2_KEY\") req <- request(\"https://api.github.com/gists\") %>%    req_headers(Authorization = paste(\"token\", token))  req %>% req_perform() req req %>% req_dry_run()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"errors-1","dir":"Articles","previous_headings":"Github Gists API","what":"Errors","title":"Wrapping APIs","text":"’ve got authentication working, ’s always good idea work errors next, since help debug failed requests. experience APIs rarely good job documenting errors, ’ll often little experimentation. add pain, large APIs different endpoints often return different amounts information different forms. ’ll typically need tackle error handling iteratively, improving code time encounter new problem. GitHub document errors, ’m sufficiently distrustful still want construct deliberately malformed query see happens: documented get 422 “Unprocessable Entity” error. response rather different documentation suggests string message list errors: ’ll proceed anyway, writing function extracts data formats presentation user: Now can pass function body argument req_error() automatically included error request fails: Notice element character vector produced gh_error_body() becomes bullet resulting error.","code":"resp <- request(\"https://api.github.com/gists\") %>%    req_url_query(since = \"abcdef\") %>%    req_headers(Authorization = paste(\"token\", token)) %>%    req_perform() resp <- last_response() resp resp %>% resp_body_json() gist_error_body <- function(resp) {   body <- resp_body_json(resp)      message <- body$message   if (!is.null(body$documentation_url)) {     message <- c(message, paste0(\"See docs at <\", body$documentation_url, \">\"))   }   message } gist_error_body(resp) request(\"https://api.github.com/gists\") %>%    req_url_query(since = \"yesterday\") %>%    req_headers(Authorization = paste(\"token\", token)) %>%    req_error(body = gist_error_body) %>%    req_perform()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"rate-limiting","dir":"Articles","previous_headings":"Github Gists API","what":"Rate-limiting","title":"Wrapping APIs","text":"’re thinking errors, ’s useful look happens requests rate limited. Luckily, GitHub consistently uses response headers provide information remaining rate limits. can teach httr2 can automatically wait reset rate limit hit. need define two functions. first tells us whether response transient error, .e. ’s worth waiting trying . GitHub, rate limit exceeded, response 403 status X-RateLimit-Remaining: 0 header: need function tells long wait. GitHub tells us rate limit resets (number seconds since 1970-01-01) X-RateLimit-Reset header. convert number seconds wait first convert number (since HTTP headers always strings), subtract current time (number seconds since 1970-01-01): pass functions req_retry() httr2 information needs handle rate-limiting automatically: also need supply either max_tries max_seconds order activate req_retry().","code":"resp <- req %>% req_perform()  resp %>% resp_headers(\"ratelimit\") gist_is_transient <- function(resp) {   resp_status(resp) == 403 &&      resp_header(resp, \"X-RateLimit-Remaining\") == \"0\" } gist_is_transient(resp) gist_after <- function(resp) {   time <- as.numeric(resp_header(resp, \"X-RateLimit-Reset\"))   time - unclass(Sys.time()) } gist_after(resp) request(\"http://api.github.com\") %>%   req_retry(     is_transient = gist_is_transient,     after = gist_after,     max_seconds = 60   )"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"wrapping-it-all-up","dir":"Articles","previous_headings":"Github Gists API","what":"Wrapping it all up","title":"Wrapping APIs","text":"Let’s wrap everything ’ve learned far single function creates request: ’ll use basis solve next challenge: uploading gist.","code":"req_gist <- function(token) {   request(\"https://api.github.com/gists\") %>%      req_headers(Authorization = paste(\"token\", token)) %>%      req_error(body = gist_error_body) %>%      req_retry(       is_transient = gist_is_transient,       after = gist_after     ) }  # Check it works: req_gist(token) %>%    req_perform()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"sending-data","dir":"Articles","previous_headings":"Github Gists API","what":"Sending data","title":"Wrapping APIs","text":"create gist need change method POST add body contains data encoded JSON. httr2 provides one function things: req_body_json(): Depending API ’re wrapping, might need send data different way. req_body_form() req_body_multipart() make easier encode data two common forms. API requires something different can use req_body_raw(). Typically, API return useful data resource ’ve just created. ’ll extract gist ID can use next examples, culminating deleting gist don’t end bunch duplicated gists 😃.","code":"req <- req_gist(token) %>%    req_body_json(list(     description = \"This is my cool gist!\",     files = list(test.R = list(content = \"print('Hi!')\")),     public = FALSE   )) req %>% req_dry_run() resp <- req %>% req_perform() id <- resp %>% resp_body_json() %>% .$id id"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"changing-a-gist","dir":"Articles","previous_headings":"Github Gists API","what":"Changing a gist","title":"Wrapping APIs","text":"Actually, description wasn’t true want change . , need send JSON encoded data, time need use PATCH verb. adding data request, use req_method() override default method:","code":"req <- req_gist(token) %>%    req_url_path_append(id) %>%    req_body_json(list(description = \"This is a simple gist\")) %>%    req_method(\"PATCH\") req %>% req_dry_run()"},{"path":"https://httr2.r-lib.org/articles/wrapping-apis.html","id":"deleting-a-gist","dir":"Articles","previous_headings":"Github Gists API","what":"Deleting a gist","title":"Wrapping APIs","text":"Deleting gist similar, except don’t send data, just need adjust default method GET DELETE.","code":"req <- req_gist(token) %>%    req_url_path_append(id) %>%    req_method(\"DELETE\") req %>% req_dry_run() req %>% req_perform()"},{"path":"https://httr2.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder. Maximilian Girlich. Contributor.","code":""},{"path":"https://httr2.r-lib.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2023). httr2: Perform HTTP Requests Process Responses. https://httr2.r-lib.org, https://github.com/r-lib/httr2.","code":"@Manual{,   title = {httr2: Perform HTTP Requests and Process the Responses},   author = {Hadley Wickham},   year = {2023},   note = {https://httr2.r-lib.org, https://github.com/r-lib/httr2}, }"},{"path":"https://httr2.r-lib.org/index.html","id":"httr2","dir":"","previous_headings":"","what":"Perform HTTP Requests and Process the Responses","title":"Perform HTTP Requests and Process the Responses","text":"httr2 ground-rewrite httr provides pipeable API explicit request object solves problems felt packages wrap APIs (e.g. built-rate-limiting, retries, OAuth, secure secrets, ).","code":""},{"path":"https://httr2.r-lib.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Perform HTTP Requests and Process the Responses","text":"can install httr CRAN :","code":"install.packages(\"httr2\")"},{"path":"https://httr2.r-lib.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Perform HTTP Requests and Process the Responses","text":"use httr2, start creating request: can tailor request req_ family functions: see exactly httr2 send server req_dry_run(): Use req_perform() perform request, retrieving response: resp_ functions help extract various useful components response:","code":"library(httr2)  req <- request(\"https://r-project.org\") req #> <httr2_request> #> GET https://r-project.org #> Body: empty # Add custom headers req %>% req_headers(\"Accept\" = \"application/json\") #> <httr2_request> #> GET https://r-project.org #> Headers: #> • Accept: 'application/json' #> Body: empty  # Add a body, turning it into a POST req %>% req_body_json(list(x = 1, y = 2)) #> <httr2_request> #> POST https://r-project.org #> Body: json encoded data  # Automatically retry if the request fails req %>% req_retry(max_tries = 5) #> <httr2_request> #> GET https://r-project.org #> Body: empty #> Policies: #> • retry_max_tries: 5  # Change the HTTP method req %>% req_method(\"PATCH\") #> <httr2_request> #> PATCH https://r-project.org #> Body: empty req %>% req_dry_run() #> GET / HTTP/1.1 #> Host: r-project.org #> User-Agent: httr2/0.2.2.9000 r-curl/5.0.0 libcurl/7.87.0 #> Accept: */* #> Accept-Encoding: deflate, gzip resp <- req_perform(req) resp #> <httr2_response> #> GET https://www.r-project.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (6204 bytes) resp %>% resp_content_type() #> [1] \"text/html\" resp %>% resp_status_desc() #> [1] \"OK\" resp %>% resp_body_html() #> {html_document} #> <html lang=\"en\"> #> [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ... #> [2] <body>\\n    <div class=\"container page\">\\n      <div class=\"row\">\\n       ..."},{"path":"https://httr2.r-lib.org/index.html","id":"major-differences-to-httr","dir":"","previous_headings":"","what":"Major differences to httr","title":"Perform HTTP Requests and Process the Responses","text":"can now create modify request without performing . means ’s now single function perform request fetch result: req_perform(). (want handle response streams , use req_stream() instead). req_perform() replaces httr::GET(), httr::POST(), httr::DELETE(), . HTTP errors automatically converted R errors. Use req_error() override defaults (turn 4xx 5xx responses errors) add additional details error message. can automatically retry request fails encounters transient HTTP error (e.g. 429 rate limit request). req_retry() defines maximum number retries, errors transient, long wait tries. OAuth support totally overhauled directly support many flows make much easier customise built-flows create . can manage secrets (often needed testing) secret_encrypt() friends. can obfuscate mildly confidential data obfuscate(), preventing scraped published code. can automatically cache cacheable results req_cache(). Relatively API responses cacheable, typically makes big difference.","code":""},{"path":"https://httr2.r-lib.org/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Perform HTTP Requests and Process the Responses","text":"httr2 wouldn’t possible without curl, openssl, jsonlite, jose, maintained Jeroen Ooms. big thanks also go Jenny Bryan Craig Citro given much useful feedback design internals user facing API.","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate curl syntax to httr2 — curl_translate","title":"Translate curl syntax to httr2 — curl_translate","text":"curl command line tool commonly used demonstrate HTTP APIs can easily generated browser developer tools. curl_translate() saves pain manually translating calls implementing partial, frequently used, subset curl options. Use curl_help() see supported options, curl_translate() translate curl invocation copy pasted elsewhere. Inspired curlconverter written Bob Rudis.","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate curl syntax to httr2 — curl_translate","text":"","code":"curl_translate(cmd, simplify_headers = TRUE)  curl_help()"},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate curl syntax to httr2 — curl_translate","text":"cmd Call curl. omitted clipr package installed, retrieved clipboard. simplify_headers Remove typically unimportant headers included copying curl command browser. includes: sec-fetch-* sec-ch-ua* referer, pragma, connection","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate curl syntax to httr2 — curl_translate","text":"string containing translated httr2 code. input copied clipboard, translation copied back clipboard.","code":""},{"path":"https://httr2.r-lib.org/reference/curl_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate curl syntax to httr2 — curl_translate","text":"","code":"curl_translate(\"curl http://example.com\") #> request(\"http://example.com\") %>%  #>   req_perform() curl_translate(\"curl http://example.com -X DELETE\") #> request(\"http://example.com\") %>%  #>   req_method(\"DELETE\") %>%  #>   req_perform() curl_translate(\"curl http://example.com --header A:1 --header B:2\") #> request(\"http://example.com\") %>%  #>   req_headers( #>     A = \"1\", #>     B = \"2\", #>   ) %>%  #>   req_perform() curl_translate(\"curl http://example.com --verbose\") #> request(\"http://example.com\") %>%  #>   req_perform(verbosity = 1)"},{"path":"https://httr2.r-lib.org/reference/example_url.html","id":null,"dir":"Reference","previous_headings":"","what":"URL to a local server that's useful for tests and examples — example_url","title":"URL to a local server that's useful for tests and examples — example_url","text":"Requires webfakes package installed.","code":""},{"path":"https://httr2.r-lib.org/reference/example_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL to a local server that's useful for tests and examples — example_url","text":"","code":"example_url()"},{"path":"https://httr2.r-lib.org/reference/httr2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","title":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","text":"Tools creating modifying HTTP requests, performing processing results. 'httr2' modern re-imagining 'httr' uses pipe-based interface solves problems API wrapping packages face.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/httr2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"httr2: Perform HTTP Requests and Process the Responses — httr2-package","text":"Maintainer: Hadley Wickham hadley@rstudio.com contributors: RStudio [copyright holder, funder] Maximilian Girlich [contributor]","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and encode a JWT — jwt_claim","title":"Create and encode a JWT — jwt_claim","text":"jwt_claim() wrapper around jose::jwt_claim() creates JWT claim set extra default values. jwt_encode_sig() jwt_encode_hmac() thin wrappers around jose::jwt_encode_sig() jose::jwt_encode_hmac() exist primarily make specification functions little simpler.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and encode a JWT — jwt_claim","text":"","code":"jwt_claim(   iss = NULL,   sub = NULL,   aud = NULL,   exp = unix_time() + 5L * 60L,   nbf = unix_time(),   iat = unix_time(),   jti = NULL,   ... )  jwt_encode_sig(claim, key, size = 256, header = list())  jwt_encode_hmac(claim, secret, size = size, header = list())"},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and encode a JWT — jwt_claim","text":"iss Issuer claim. Identifies principal issued JWT. sub Subject claim. Identifies principal subject JWT (.e. entity claims apply ). aud Audience claim. Identifies recipients JWT intended. principle intended process JWT must identified unique value. exp Expiration claim. Identifies expiration time JWT MUST accepted processing. Defaults 5 minutes. nbf claim. Identifies time JWT MUST accepted processing. Defaults current time. iat Issued claim. Identifies time JWT issued.  Defaults current time. jti JWT ID claim. Provides unique identifier JWT. omitted, uses random 32-byte sequence encoded base64url. ... additional claims include claim set. claim Claim set produced jwt_claim(). key RSA EC private key either specified path file, connection, string (PEM/SSH format), raw vector (DER format). size Size, bits, sha2 signature, .e. 256, 384 512. HMAC/RSA, applicable ECDSA keys. header named list giving additional fields include JWT header. secret String raw vector secret passphrase.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and encode a JWT — jwt_claim","text":"S3 list class jwt_claim.","code":""},{"path":"https://httr2.r-lib.org/reference/jwt_claim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and encode a JWT — jwt_claim","text":"","code":"claim <- jwt_claim() str(claim) #> List of 4 #>  $ exp: num 1.69e+09 #>  $ nbf: num 1.69e+09 #>  $ iat: num 1.69e+09 #>  $ jti: chr \"kJ9XwWbS91JAjEW4SSZT2zDUbnZxHzJ2QzpeD9AL4gg\" #>  - attr(*, \"class\")= chr [1:2] \"jwt_claim\" \"list\""},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve most recent request/response — last_response","title":"Retrieve most recent request/response — last_response","text":"functions retrieve recent request made httr2 response received, facilitate debugging problems occur. request succeed (requests made) last_response() NULL.","code":""},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve most recent request/response — last_response","text":"","code":"last_response()  last_request()"},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve most recent request/response — last_response","text":"HTTP response/request.","code":""},{"path":"https://httr2.r-lib.org/reference/last_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve most recent request/response — last_response","text":"","code":"invisible(request(\"http://httr2.r-lib.org\") %>% req_perform()) last_request() #> <httr2_request> #> GET http://httr2.r-lib.org #> Body: empty last_response() #> <httr2_response> #> GET https://httr2.r-lib.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (19818 bytes)"},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform multiple requests in parallel — multi_req_perform","title":"Perform multiple requests in parallel — multi_req_perform","text":"variation req_perform() performs multiple requests parallel. Unlike req_perform() always succeeds; never throw error. Instead return error objects, responsibility handle. Exercise caution using function; easy pummel server many simultaneous requests. use hosts designed serve many files .","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform multiple requests in parallel — multi_req_perform","text":"","code":"multi_req_perform(reqs, paths = NULL, pool = NULL, cancel_on_error = FALSE)"},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform multiple requests in parallel — multi_req_perform","text":"reqs list requests. paths optional list paths, want download request bodies disks. supplied, must length reqs. pool Optionally, curl pool made curl::new_pool(). Supply want override defaults total concurrent connections (100) concurrent connections per host (6). cancel_on_error pending requests cancelled hit error. Set TRUE stop requests soon hit error. Responses never performed class httr2_cancelled result.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform multiple requests in parallel — multi_req_perform","text":"list length reqs element either response error.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Perform multiple requests in parallel — multi_req_perform","text":"retrieve new OAuth token expires part way requests. perform throttling req_throttle(). attempt retries described req_retry(). Consults cache set req_cache() /requests. general, req_perform() might make multiple requests due retries OAuth failures, multi_req_perform() make make 1.","code":""},{"path":"https://httr2.r-lib.org/reference/multi_req_perform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform multiple requests in parallel — multi_req_perform","text":"","code":"# Requesting these 4 pages one at a time would take 2 seconds: request_base <- request(example_url()) reqs <- list(   request_base %>% req_url_path(\"/delay/0.5\"),   request_base %>% req_url_path(\"/delay/0.5\"),   request_base %>% req_url_path(\"/delay/0.5\"),   request_base %>% req_url_path(\"/delay/0.5\") ) # But it's much faster if you request in parallel system.time(resps <- multi_req_perform(reqs)) #>    user  system elapsed  #>   0.638   0.436   1.075   reqs <- list(   request_base %>% req_url_path(\"/status/200\"),   request_base %>% req_url_path(\"/status/400\"),   request(\"FAILURE\") ) # multi_req_perform() will always succeed resps <- multi_req_perform(reqs) # you'll need to inspect the results to figure out which requests fails fail <- vapply(resps, inherits, \"error\", FUN.VALUE = logical(1)) resps[fail] #> [[1]] #> <error/httr2_http_400> #> Error: #> ! HTTP 400 Bad Request. #> --- #> Backtrace: #>      ▆ #>   1. ├─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2. │ └─pkgdown::build_site(...) #>   3. │   └─pkgdown:::build_site_local(...) #>   4. │     └─pkgdown::build_reference(...) #>   5. │       └─purrr::map(...) #>   6. │         └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7. │           ├─purrr:::with_indexed_errors(...) #>   8. │           │ └─base::withCallingHandlers(...) #>   9. │           ├─purrr:::call_with_cleanup(...) #>  10. │           └─pkgdown (local) .f(.x[[i]], ...) #>  11. │             ├─base::withCallingHandlers(...) #>  12. │             └─pkgdown:::data_reference_topic(...) #>  13. │               └─pkgdown:::run_examples(...) #>  14. │                 └─pkgdown:::highlight_examples(code, topic, env = env) #>  15. │                   └─downlit::evaluate_and_highlight(...) #>  16. │                     └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17. │                       └─evaluate:::evaluate_call(...) #>  18. │                         ├─evaluate (local) timing_fn(...) #>  19. │                         ├─evaluate (local) handle(...) #>  20. │                         │ └─base::try(f, silent = TRUE) #>  21. │                         │   └─base::tryCatch(...) #>  22. │                         │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23. │                         │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24. │                         │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25. │                         ├─base::withCallingHandlers(...) #>  26. │                         ├─base::withVisible(...) #>  27. │                         └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28. │                           └─base::eval(expr, envir, enclos) #>  29. │                             └─base::eval(expr, envir, enclos) #>  30. │                               └─httr2::multi_req_perform(reqs) #>  31. │                                 └─httr2:::pool_run(pool, perfs, cancel_on_error = cancel_on_error) #>  32. │                                   ├─base::tryCatch(poll_until_done(pool), interrupt = cancel) #>  33. │                                   │ └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  34. │                                   │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  35. │                                   │     └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  36. │                                   └─httr2 (local) poll_until_done(pool) #>  37. │                                     └─curl::multi_run(0.1, pool = pool, poll = TRUE) #>  38. └─httr2 (local) `<fn>`(`<named list>`) #>  #> [[2]] #> <error/httr2_failure> #> Error: #> ! Could not resolve host: FAILURE #>"},{"path":"https://httr2.r-lib.org/reference/oauth_cache_path.html","id":null,"dir":"Reference","previous_headings":"","what":"httr2 OAuth cache location — oauth_cache_path","title":"httr2 OAuth cache location — oauth_cache_path","text":"opted-, httr2 caches OAuth tokens directory. default, uses OS-standard cache directory, , needed, can override location setting HTTR2_OAUTH_CACHE env var.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_cache_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"httr2 OAuth cache location — oauth_cache_path","text":"","code":"oauth_cache_path()"},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth client — oauth_client","title":"Create an OAuth client — oauth_client","text":"OAuth app combination client, set endpoints (.e. urls various requests sent), authentication mechanism. client consists least client_id, also often client_secret. get values create client API's website.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth client — oauth_client","text":"","code":"oauth_client(   id,   token_url,   secret = NULL,   key = NULL,   auth = c(\"body\", \"header\", \"jwt_sig\"),   auth_params = list(),   name = hash(id) )"},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAuth client — oauth_client","text":"id Client identifier. token_url Url retrieve access token. secret Client secret. apps, technically confidential principle avoid storing source code. However, many APIs require order provide user friendly authentication experience, risks including usually low. make things little safer, recommend using obfuscate() recorded client secret public code. key Client key. alternative using secret, can instead supply confidential private key. never included package. auth Authentication mechanism used client prove API. Can one three built-methods (\"body\", \"header\", \"jwt\"), function called arguments req, client, contents auth_params. common mechanism wild \"body\" client_id (optionally) client_secret added body. \"header\" sends client_id client_secret HTTP Authorization header. \"jwt_sig\" generate JWT, include client_assertion field body. See oauth_client_req_auth() details. auth_params Additional parameters passed function specified auth. name Optional name client. Used generating cache directory. NULL, generated hash client_id. defining package use package, recommend use package name.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth client — oauth_client","text":"OAuth client: S3 list class httr2_oauth_client.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OAuth client — oauth_client","text":"","code":"oauth_client(\"myclient\", \"http://example.com/token_url\", secret = \"DONTLOOK\") #> <httr2_oauth_client> #> name: 920903ca1274bc747bb367c6b5abe4a4 #> id: myclient #> secret: <REDACTED> #> token_url: http://example.com/token_url #> auth: oauth_client_req_auth_body"},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth client authentication — oauth_client_req_auth","title":"OAuth client authentication — oauth_client_req_auth","text":"oauth_client_req_auth() authenticates request using authentication strategy defined auth auth_param arguments oauth_client(). used authenticate client part OAuth flow, authenticate request behalf user. three built-strategies: oauth_client_req_body() adds client id (optionally) secret request body, described rfc6749, Section 2.3.1. oauth_client_req_header() adds client id secret using HTTP basic authentication Authorization header, described rfc6749, Section 2.3.1. oauth_client_jwt_rs256() adds client assertion body using JWT signed jwt_sign_rs256() using private key, described rfc7523, Section 2.2. generally call functions directly instead specify auth argument oauth_client(). req client parameters automatically filled ; parameters come auth_params argument.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth client authentication — oauth_client_req_auth","text":"","code":"oauth_client_req_auth(req, client)  oauth_client_req_auth_header(req, client)  oauth_client_req_auth_body(req, client)  oauth_client_req_auth_jwt_sig(req, client, claim, size = 256, header = list())"},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth client authentication — oauth_client_req_auth","text":"req request. client oauth_client. claim Claim set produced jwt_claim(). size Size, bits, sha2 signature, .e. 256, 384 512. HMAC/RSA, applicable ECDSA keys. header named list giving additional fields include JWT header.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth client authentication — oauth_client_req_auth","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_client_req_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth client authentication — oauth_client_req_auth","text":"","code":"# Show what the various forms of client authentication look like req <- request(\"https://example.com/whoami\")  client1 <- oauth_client(   id = \"12345\",   secret = \"56789\",   token_url = \"https://example.com/oauth/access_token\",   name = \"oauth-example\",   auth = \"body\" # the default ) # calls oauth_client_req_auth_body() req_dry_run(oauth_client_req_auth(req, client1)) #> POST /whoami HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Type: application/x-www-form-urlencoded #> Content-Length: 35 #>  #> client_id=12345&client_secret=56789  client2 <- oauth_client(   id = \"12345\",   secret = \"56789\",   token_url = \"https://example.com/oauth/access_token\",   name = \"oauth-example\",   auth = \"header\" ) # calls oauth_client_req_auth_header() req_dry_run(oauth_client_req_auth(req, client2)) #> GET /whoami HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Authorization: <REDACTED> #>   client3 <- oauth_client(   id = \"12345\",   key = openssl::rsa_keygen(),   token_url = \"https://example.com/oauth/access_token\",   name = \"oauth-example\",   auth = \"jwt_sig\",   auth_params = list(claim = jwt_claim()) ) # calls oauth_client_req_auth_header_jwt_sig() req_dry_run(oauth_client_req_auth(req, client3)) #> POST /whoami HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Type: application/x-www-form-urlencoded #> Content-Length: 623 #>  #> client_assertion=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJleHAiOjE2OTM1NTYzNzcsIm5iZiI6MTY5MzU1NjA3NywiaWF0IjoxNjkzNTU2MDc3LCJqdGkiOiJkMWRMVGhqRDUzUDRscnQ2RE1EdnBIbExTOW9oWHh3SlctZml0M3Y5UFhvIn0.wrhpYbJoIsQOA4QICWdHDU3jvz_7kvXDd3en1VOnWRPeNJBqEVut90FD8_0NmNE7ZcmKBo19QCxg2FyvG3NWvSbNxoAJpniEWEjNu772RMGptxM1XpPO_urkZTdpi0Uwq0J5JMXTNNYqeBLDyurvOqUIXGRT26nDThEmiKdB0mhhI5ZXCfydCU0py9RHEJQhHQw2CeWFXjtSBw5fhVWFA_gFJ0geD998BoW9_woJ_0b9x4WtLbzTdCy8mCZy60CyUpY1VrococKYRZJUiYGmqVaMbcuwlESL32ysr3WyKxg0mgLtTntF-8dg3JBbsr5mlU1cKPvUHnjiywCjhepPpg&client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: authorization code — oauth_flow_auth_code","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"functions implement OAuth authorization code flow, defined rfc6749, Section 4.1. commonly used OAuth flow user opens page browser, approves access, returns R. oauth_flow_auth_code() high-level wrapper work APIs adhere relatively closely spec. possible, redirects browser back temporary local webserver capture authorization code. possible (e.g. running hosted platform like RStudio Server) set type = \"web\" instead prompts user enter code manually instead. remaining low-level functions can used assemble custom flow APIs spec: oauth_flow_auth_code_url() generates url opened browser. oauth_flow_auth_code_listen() starts temporary local webserver listens response resource server. oauth_flow_auth_code_parse() parses query parameters returned server redirect, verifying state correct, returning authorisation code. oauth_flow_auth_code_pkce() generates code verifier, method, challenge components needed PKCE, defined rfc7636.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"","code":"oauth_flow_auth_code(   client,   auth_url,   scope = NULL,   pkce = TRUE,   auth_params = list(),   token_params = list(),   host_name = deprecated(),   host_ip = \"127.0.0.1\",   type = c(\"desktop\", \"web\"),   port = httpuv::randomPort(),   redirect_uri = \"http://localhost\" )  oauth_flow_auth_code_url(   client,   auth_url,   redirect_uri = NULL,   scope = NULL,   state = NULL,   auth_params = list() )  oauth_flow_auth_code_listen(host_ip = \"127.0.0.1\", port = 1410)  oauth_flow_auth_code_parse(query, state)  oauth_flow_auth_code_pkce()"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"client oauth_client(). auth_url Authorization url; need discover reading documentation. scope Scopes requested resource owner. pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server. auth_params List containing additional parameters passed oauth_flow_auth_code_url() token_params List containing additional parameters passed token_url. host_name Use redirect_uri instead. host_ip IP address temporary webserver used capture authorization code. type Either desktop web. Use desktop running desktop environment can redirect user localhost. Use web running hosted web environment. port Port bind temporary webserver . Used redirect_uri \"http(s)://localhost\". default, uses random port. may need set fixed port API requires redirect_uri specified client exactly matches redirect_uri generated function. redirect_uri URL redirect back authorization complete. Often must registered API advance. state Random state generated oauth_flow_auth_code(). Used verify working authentication request created. (unlikely threat R packages since webserver listens authorization responses transient.) query List query parameters returned oauth_flow_auth_code_listen().","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_auth_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth flow: authorization code — oauth_flow_auth_code","text":"","code":"client <- oauth_client(   id = \"28acfec0674bb3da9f38\",   secret = obfuscated(paste0(      \"J9iiGmyelHltyxqrHXW41ZZPZamyUNxSX1_uKnv\",      \"PeinhhxET_7FfUs2X0LLKotXY2bpgOMoHRCo\"   )),   token_url = \"https://github.com/login/oauth/access_token\",   name = \"hadley-oauth-test\" ) if (interactive()) {   token <- oauth_flow_auth_code(client, auth_url = \"https://github.com/login/oauth/authorize\")   token }"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"function uses Bearer JWT authorization grant get access token, defined rfc7523, Section 2.1. often used service accounts, accounts used primarily automated environments.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"","code":"oauth_flow_bearer_jwt(   client,   claim,   signature = \"jwt_encode_sig\",   signature_params = list(),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"client oauth_client(). claim list claims. elements claim set static apart iat, nbf, exp, jti, provide list jwt_claim() automatically fill dynamic components. components need vary, can instead provide zero-argument callback function call jwt_claim(). signature Function use sign claim, e.g. jwt_encode_sig(). signature_params Additional arguments passed signature, e.g. size, header. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_bearer_jwt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: Bearer JWT — oauth_flow_bearer_jwt","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: client credentials — oauth_flow_client_credentials","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"function implements OAuth client credentials flow, defined rfc6749, Section 4.4. used allow client access resources controls directly, behalf user.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"","code":"oauth_flow_client_credentials(client, scope = NULL, token_params = list())"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"client oauth_client(). scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_client_credentials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: client credentials — oauth_flow_client_credentials","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: device — oauth_flow_device","title":"OAuth flow: device — oauth_flow_device","text":"functions implement OAuth device flow, defined rfc8628. designed devices access web browser (ever authenticated app TV, probably flow used), also works well within R. specification allows also subspecifications: oauth_flow_auth_code_pkce() also reused generate code verifier, method, challenge components needed PKCE, defined rfc7636.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: device — oauth_flow_device","text":"","code":"oauth_flow_device(   client,   auth_url,   pkce = FALSE,   scope = NULL,   auth_params = list(),   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth flow: device — oauth_flow_device","text":"client oauth_client(). auth_url Authorization url; need discover reading documentation. pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server. scope Scopes requested resource owner. auth_params List containing additional parameters passed oauth_flow_auth_code_url() token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_device.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: device — oauth_flow_device","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: user password — oauth_flow_password","title":"OAuth flow: user password — oauth_flow_password","text":"function implements OAuth resource owner password flow, defined rfc6749, Section 4.3. allows user supply password , exchanging access token can cached locally.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: user password — oauth_flow_password","text":"","code":"oauth_flow_password(   client,   username,   password = NULL,   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth flow: user password — oauth_flow_password","text":"client oauth_client(). username User name. password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: user password — oauth_flow_password","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth flow: refresh token — oauth_flow_refresh","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"function generates access token refresh token, following process described rfc6749, Section 6. Warns refresh returns new refresh token, see req_oauth_refresh() details.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"","code":"oauth_flow_refresh(   client,   refresh_token = Sys.getenv(\"HTTR2_REFRESH_TOKEN\"),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"client oauth_client(). refresh_token refresh token. equivalent password typed console stored script. Instead, recommend placing environment variable; default behaviour look HTTR2_REFRESH_TOKEN. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_flow_refresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth flow: refresh token — oauth_flow_refresh","text":"oauth_token.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth token — oauth_token","title":"Create an OAuth token — oauth_token","text":"Creates S3 object class <httr2_token> representing OAuth token returned access token endpoint.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth token — oauth_token","text":"","code":"oauth_token(   access_token,   token_type = \"bearer\",   expires_in = NULL,   refresh_token = NULL,   ...,   .date = Sys.time() )"},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAuth token — oauth_token","text":"access_token access token used authenticate request token_type Type token; \"bearer\" currently supported. expires_in Number seconds token expires. refresh_token Optional refresh token; supplied, can used cheaply get new access token one expires. ... Additional components returned endpoint .date Date request made; used convert relative expires_in absolute expires_at.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth token — oauth_token","text":"OAuth token: S3 list class httr2_token.","code":""},{"path":"https://httr2.r-lib.org/reference/oauth_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OAuth token — oauth_token","text":"","code":"oauth_token(\"abcdef\") #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> oauth_token(\"abcdef\", expires_in = 3600) #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> expires_at: 2023-09-01 09:14:40 oauth_token(\"abcdef\", refresh_token = \"ghijkl\") #> <httr2_token> #> token_type: bearer #> access_token: <REDACTED> #> refresh_token: <REDACTED>"},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":null,"dir":"Reference","previous_headings":"","what":"Obfuscate mildly secret information — obfuscate","title":"Obfuscate mildly secret information — obfuscate","text":"Use obfuscate(\"value\") generate call obfuscated(), unobfuscate value last possible moment. Obfuscated values work limited locations: secret argument oauth_client() Elements data argument req_body_form(), req_body_json(), req_body_multipart(). Working together pair functions provides way obfuscate mildly confidential information, like OAuth client secrets. secret can revealed inspecting source code, skilled R programmer figure effort. main goal protect scraping; way automated tool grab obfuscated secrets.","code":""},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obfuscate mildly secret information — obfuscate","text":"","code":"obfuscate(x)  obfuscated(x)"},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obfuscate mildly secret information — obfuscate","text":"x string obfuscate, mark obfuscated.","code":""},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obfuscate mildly secret information — obfuscate","text":"obfuscate() prints obfuscated() call include code. obfuscated() returns S3 class marking string obfuscated can unobfuscated needed.","code":""},{"path":"https://httr2.r-lib.org/reference/obfuscate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obfuscate mildly secret information — obfuscate","text":"","code":"obfuscate(\"good morning\") #> obfuscated(\"C1EkLvlRkEdN55CRmwK0DMrUhESIcuTtXaorYw\")  # Every time you obfuscate you'll get a different value because it # includes 16 bytes of random data which protects against certain types of # brute force attack obfuscate(\"good morning\") #> obfuscated(\"9ftdPMHLhY--EVq87D33xFU6EdI5Hd52MRIu8A\")"},{"path":"https://httr2.r-lib.org/reference/paginate_req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a paginated request — paginate_req_perform","title":"Perform a paginated request — paginate_req_perform","text":"Perform paginated request","code":""},{"path":"https://httr2.r-lib.org/reference/paginate_req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a paginated request — paginate_req_perform","text":"","code":"paginate_req_perform(req, max_pages = 20L, progress = TRUE)  paginate_next_request(resp, req)"},{"path":"https://httr2.r-lib.org/reference/paginate_req_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a paginated request — paginate_req_perform","text":"req request. max_pages maximum number pages request. progress Display progress bar? resp HTTP response.","code":""},{"path":"https://httr2.r-lib.org/reference/paginate_req_perform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a paginated request — paginate_req_perform","text":"list responses.","code":""},{"path":"https://httr2.r-lib.org/reference/paginate_req_perform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a paginated request — paginate_req_perform","text":"","code":"page_size <- 150  req_pokemon <- request(\"https://pokeapi.co/api/v2/pokemon\") %>%   req_url_query(limit = page_size) %>%   req_paginate_next_url(     next_url = function(resp) resp_body_json(resp)[[\"next\"]],     n_pages = function(resp) {       total <- resp_body_json(resp)$count       ceiling(total / page_size)     }   )  responses <- paginate_req_perform(req_pokemon)"},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://httr2.r-lib.org/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate request with HTTP basic authentication — req_auth_basic","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"sets Authorization header. See details https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"","code":"req_auth_basic(req, username, password = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"req request. username User name. password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate request with HTTP basic authentication — req_auth_basic","text":"","code":"req <- request(\"http://example.com\") %>% req_auth_basic(\"hadley\", \"SECRET\") req #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: '<REDACTED>' #> Body: empty req %>% req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Authorization: <REDACTED> #>   # httr2 does its best to redact the Authorization header so that you don't # accidentally reveal confidential data. Use `redact_headers` to reveal it: print(req, redact_headers = FALSE) #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: 'Basic aGFkbGV5OlNFQ1JFVA==' #> Body: empty req %>% req_dry_run(redact_headers = FALSE) #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Authorization: Basic aGFkbGV5OlNFQ1JFVA== #>   # We do this because the authorization header is not encrypted and the # so password can easily be discovered: rawToChar(jsonlite::base64_dec(\"aGFkbGV5OlNFQ1JFVA==\")) #> [1] \"hadley:SECRET\""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate request with bearer token — req_auth_bearer_token","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"bearer token gives bearer access confidential resources (keep secure like user name password). usually produced large authentication scheme (like various OAuth 2.0 flows), sometimes given directly.","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"","code":"req_auth_bearer_token(req, token)"},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"req request. token bearer token","code":""},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_auth_bearer_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate request with bearer token — req_auth_bearer_token","text":"","code":"req <- request(\"http://example.com\") %>% req_auth_bearer_token(\"sdaljsdf093lkfs\") req #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: '<REDACTED>' #> Body: empty  # httr2 does its best to redact the Authorization header so that you don't # accidentally reveal confidential data. Use `redact_headers` to reveal it: print(req, redact_headers = FALSE) #> <httr2_request> #> GET http://example.com #> Headers: #> • Authorization: 'Bearer sdaljsdf093lkfs' #> Body: empty"},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Send data in request body — req_body","title":"Send data in request body — req_body","text":"req_body_file() sends local file. req_body_raw() sends string raw vector. req_body_json() sends JSON encoded data. req_body_form() sends form encoded data. req_body_multipart() creates multi-part body. Adding body request automatically switch method POST.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send data in request body — req_body","text":"","code":"req_body_raw(req, body, type = NULL)  req_body_file(req, path, type = NULL)  req_body_json(req, data, auto_unbox = TRUE, digits = 22, null = \"null\", ...)  req_body_form(.req, ...)  req_body_multipart(.req, ...)"},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send data in request body — req_body","text":"req, .req request. body literal string raw vector send body. type Content type. req_body_file(), default attempt guess extension path. path Path file upload. data Data include body. auto_unbox length-1 vectors automatically \"unboxed\" JSON scalars? digits many digits precision numbers use JSON? null NULL translated JSON's null (\"null\") empty list (\"list\"). ... <dynamic-dots> Name-data pairs used send data body. req_body_form(), values must strings (things easily coerced string); req_body_multipart() values must strings objects produced curl::form_file()/curl::form_data(). req_body_json(), additional arguments passed jsonlite::toJSON().","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send data in request body — req_body","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_body.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send data in request body — req_body","text":"","code":"req <- request(example_url()) %>%   req_url_path(\"/post\")  # Most APIs expect small amounts of data in either form or json encoded: req %>%   req_body_form(x = \"A simple text string\") %>%   req_dry_run() #> POST /post HTTP/1.1 #> Host: 127.0.0.1:39239 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Type: application/x-www-form-urlencoded #> Content-Length: 28 #>  #> x=A%20simple%20text%20string  req %>%   req_body_json(list(x = \"A simple text string\")) %>%   req_dry_run() #> POST /post HTTP/1.1 #> Host: 127.0.0.1:39239 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Type: application/json #> Content-Length: 28 #>  #> {\"x\":\"A simple text string\"}  # For total control over the body, send a string or raw vector req %>%   req_body_raw(\"A simple text string\") %>%   req_dry_run() #> POST /post HTTP/1.1 #> Host: 127.0.0.1:39239 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Length: 20 #>  #> A simple text string  # There are two main ways that APIs expect entire files path <- tempfile() writeLines(letters[1:6], path)  # You can send a single file as the body: req %>%   req_body_file(path) %>%   req_dry_run() #> POST /post HTTP/1.1 #> Host: 127.0.0.1:39239 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Length: 12 #>  #> a #> b #> c #> d #> e #> f  # You can send multiple files, or a mix of files and data # with multipart encoding req %>%   req_body_multipart(a = curl::form_file(path), b = \"some data\") %>%   req_dry_run() #> POST /post HTTP/1.1 #> Host: 127.0.0.1:39239 #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Content-Length: 316 #> Content-Type: multipart/form-data; boundary=------------------------4f56602c836a7e4b #>  #> --------------------------4f56602c836a7e4b #> Content-Disposition: form-data; name=\"a\"; filename=\"file17e861bc9da3\" #> Content-Type: application/octet-stream #>  #> a #> b #> c #> d #> e #> f #>  #> --------------------------4f56602c836a7e4b #> Content-Disposition: form-data; name=\"b\" #>  #> some data #> --------------------------4f56602c836a7e4b--"},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically cache requests — req_cache","title":"Automatically cache requests — req_cache","text":"Use req_perform() automatically cache HTTP requests. API requests cacheable, static files often . req_cache() caches responses GET requests status code 200 least one standard caching headers (e.g. Expires, Etag, Last-Modified, Cache-Control), unless caching expressly prohibited Cache-Control: -store. Typically, request still sent server check cached value still --date, need re-download body value. learn HTTP caching, recommend MDN article HTTP caching.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically cache requests — req_cache","text":"","code":"req_cache(   req,   path,   use_on_error = FALSE,   debug = FALSE,   max_age = Inf,   max_n = Inf,   max_size = 1024^3 )"},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically cache requests — req_cache","text":"req request. path Path cache directory. httr2 provide helpers manage cache, want empty , can use something like unlink(dir(cache_path, full.names = TRUE)). use_on_error request errors, cache response, req_perform() return instead generating error? debug TRUE emit useful messages telling cache hits misses. can helpful understand whether caching actually anything use case. max_n, max_age, max_size Automatically prune cache specifying one : max_age: delete files older number seconds. max_n: delete files (oldest newest) preserve many files. max_size: delete files (oldest newest) preserve many bytes. cache pruning performed per minute.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically cache requests — req_cache","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically cache requests — req_cache","text":"","code":"# GitHub uses HTTP caching for all raw files. url <- paste0(   \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/\",   \"master/inst/extdata/penguins.csv\" ) # Here I set debug = TRUE so you can see what's happening req <- request(url) %>% req_cache(tempdir(), debug = TRUE)  # First request downloads the data resp <- req %>% req_perform() #> Saving response to cache \"d5d1ddd7f99f55dbc920c63f942804c0\"  # Second request retrieves it from the cache resp <- req %>% req_perform() #> Pruning cache #> Found url in cache \"d5d1ddd7f99f55dbc920c63f942804c0\" #> Cached value is fresh; retrieving response from cache"},{"path":"https://httr2.r-lib.org/reference/req_cookie_preserve.html","id":null,"dir":"Reference","previous_headings":"","what":"Preserve cookies across requests — req_cookie_preserve","title":"Preserve cookies across requests — req_cookie_preserve","text":"default, httr2 uses clean slate every request meaning cookies automatically preserved across requests. preserve cookies, must set cookie file read updated request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cookie_preserve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preserve cookies across requests — req_cookie_preserve","text":"","code":"req_cookie_preserve(req, path)"},{"path":"https://httr2.r-lib.org/reference/req_cookie_preserve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preserve cookies across requests — req_cookie_preserve","text":"req request. path path file cookies read updated request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_cookie_preserve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preserve cookies across requests — req_cookie_preserve","text":"","code":"path <- tempfile() httpbin <- request(example_url()) %>%   req_cookie_preserve(path)  # Manually set two cookies httpbin %>%   req_template(\"/cookies/set/:name/:value\", name = \"chocolate\", value = \"chip\") %>%   req_perform() %>%   resp_body_json() #> $cookies #> $cookies$chocolate #> [1] \"chip\" #>  #>   httpbin %>%   req_template(\"/cookies/set/:name/:value\", name = \"oatmeal\", value = \"raisin\") %>%   req_perform() %>%   resp_body_json() #> $cookies #> $cookies$chocolate #> [1] \"chip\" #>  #> $cookies$oatmeal #> [1] \"raisin\" #>  #>   # The cookie path has a straightforward format cat(readChar(path, nchars = 1e4)) #> # Netscape HTTP Cookie File #> # https://curl.se/docs/http-cookies.html #> # This file was generated by libcurl! Edit at your own risk. #>  #> 127.0.0.1\tFALSE\t/\tFALSE\t0\toatmeal\traisin #> 127.0.0.1\tFALSE\t/\tFALSE\t0\tchocolate\tchip"},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a dry run — req_dry_run","title":"Perform a dry run — req_dry_run","text":"shows exactly httr2 send server, without actually sending anything. requires httpuv package works sending real HTTP request local webserver, thanks magic curl::curl_echo().","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a dry run — req_dry_run","text":"","code":"req_dry_run(req, quiet = FALSE, redact_headers = TRUE)"},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a dry run — req_dry_run","text":"req request. quiet TRUE print anything. redact_headers Redact confidential data headers? Currently redacts contents Authorization header prevent accidentally leaking credentials debugging/reprexing.","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a dry run — req_dry_run","text":"Invisibly, list containing information request, including method, path, headers.","code":""},{"path":"https://httr2.r-lib.org/reference/req_dry_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a dry run — req_dry_run","text":"","code":"# httr2 adds default User-Agent, Accept, and Accept-Encoding headers request(\"http://example.com\") %>% req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #>   # the Authorization header is automatically redacted to avoid leaking # credentials on the console req <- request(\"http://example.com\") %>% req_auth_basic(\"user\", \"password\") req %>% req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Authorization: <REDACTED> #>   # if you need to see it, use redact_headers = FALSE req %>% req_dry_run(redact_headers = FALSE) #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Authorization: Basic dXNlcjpwYXNzd29yZA== #>"},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Control handling of HTTP errors — req_error","title":"Control handling of HTTP errors — req_error","text":"req_perform() automatically convert HTTP errors (.e. 4xx 5xx status code) R errors. Use req_error() either override defaults, extract additional information response useful expose user.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control handling of HTTP errors — req_error","text":"","code":"req_error(req, is_error = NULL, body = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control handling of HTTP errors — req_error","text":"req request. is_error predicate function takes single argument (response) returns TRUE FALSE indicating whether R error signalled. body callback function takes single argument (response) returns character vector additional information include body error. vector passed along message argument rlang::abort() can use formatting supports.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control handling of HTTP errors — req_error","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Control handling of HTTP errors — req_error","text":"req_perform() designed succeed get valid HTTP response. two ways request can fail: HTTP request might fail, example connection dropped server exist. type error class httr2_failure. HTTP request might succeed, return HTTP status code represents error, e.g. 404 Found specified resource found. type error (e.g.) class c(\"httr2_http_404\", \"httr2_http\"). error classes designed used conjunction R's condition handling tools (https://adv-r.hadley.nz/conditions.html). example, want return default value server returns 404, use tryCatch():   want re-throw error additional context, use withCallingHandlers(), e.g.:   Learn error chaining rlang::topic-error-chaining.","code":"tryCatch(   req %>% req_perform() %>% resp_body_json(),   httr2_http_404 = function(cnd) NULL ) withCallingHandlers(   req %>% req_perform() %>% resp_body_json(),   httr2_http_404 = function(cnd) {     rlang::abort(\"Couldn't find user\", parent = cnd)   } )"},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control handling of HTTP errors — req_error","text":"","code":"# Performing this request usually generates an error because httr2 # converts HTTP errors into R errors: req <- request(example_url()) %>%   req_url_path(\"/status/404\") try(req %>% req_perform()) #> Error in req_perform(.) : HTTP 404 Not Found. # You can still retrieve it with last_response() last_response() #> <httr2_response> #> GET http://127.0.0.1:39239/status/404 #> Status: 404 Not Found #> Content-Type: text/plain #> Body: None  # But you might want to suppress this behaviour: resp <- req %>%   req_error(is_error = function(resp) FALSE) %>%   req_perform() resp #> <httr2_response> #> GET http://127.0.0.1:39239/status/404 #> Status: 404 Not Found #> Content-Type: text/plain #> Body: None  # Or perhaps you're working with a server that routinely uses the # wrong HTTP error codes only 500s are really errors request(\"http://example.com\") %>%   req_error(is_error = function(resp) resp_status(resp) == 500) #> <httr2_request> #> GET http://example.com #> Body: empty #> Policies: #> • error_is_error: a function  # Most typically you'll use req_error() to add additional information # extracted from the response body (or sometimes header): error_body <- function(resp) {   resp_body_json(resp)$error } request(\"http://example.com\") %>%   req_error(body = error_body) #> <httr2_request> #> GET http://example.com #> Body: empty #> Policies: #> • error_body: a function # Learn more in https://httr2.r-lib.org/articles/wrapping-apis.html"},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify request headers — req_headers","title":"Modify request headers — req_headers","text":"req_headers() allows set value header.","code":""},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify request headers — req_headers","text":"","code":"req_headers(.req, ..., .redact = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify request headers — req_headers","text":".req request. ... <dynamic-dots> Name-value pairs headers values. Use NULL reset value httr's default Use \"\" remove header Use character vector repeat header. .redact Headers redact. NULL, default, added headers redacted.","code":""},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify request headers — req_headers","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_headers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify request headers — req_headers","text":"","code":"req <- request(\"http://example.com\")  # Use req_headers() to add arbitrary additional headers to the request req %>%   req_headers(MyHeader = \"MyValue\") %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> MyHeader: MyValue #>   # Repeated use overrides the previous value: req %>%   req_headers(MyHeader = \"Old value\") %>%   req_headers(MyHeader = \"New value\") %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> MyHeader: New value #>   # Setting Accept to NULL uses curl's default: req %>%   req_headers(Accept = NULL) %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #>   # Setting it to \"\" removes it: req %>%   req_headers(Accept = \"\") %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept-Encoding: deflate, gzip, br, zstd #>   # If you need to repeat a header, provide a vector of values # (this is rarely needed, but is important in a handful of cases) req %>%   req_headers(HeaderName = c(\"Value 1\", \"Value 2\", \"Value 3\")) %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> HeaderName: Value 1 #> HeaderName: Value 2 #> HeaderName: Value 3 #>   # If you have headers in a list, use !!! headers <- list(HeaderOne = \"one\", HeaderTwo = \"two\") req %>%    req_headers(!!!headers, HeaderThree = \"three\") %>%    req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> HeaderOne: one #> HeaderTwo: two #> HeaderThree: three #>   # Use `.redact` to hide a header in the output req %>%   req_headers(Secret = \"this-is-private\", Public = \"but-this-is-not\", .redact = \"Secret\") %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #> Secret: <REDACTED> #> Public: but-this-is-not #>"},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Set HTTP method in request — req_method","title":"Set HTTP method in request — req_method","text":"Use function use custom HTTP method like HEAD, DELETE, PATCH, UPDATE, OPTIONS. default method GET requests without body, POST requests body.","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set HTTP method in request — req_method","text":"","code":"req_method(req, method)"},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set HTTP method in request — req_method","text":"req request. method Custom HTTP method","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set HTTP method in request — req_method","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set HTTP method in request — req_method","text":"","code":"request(example_url()) %>% req_method(\"PATCH\") #> <httr2_request> #> PATCH http://127.0.0.1:39239/ #> Body: empty request(example_url()) %>% req_method(\"PUT\") #> <httr2_request> #> PUT http://127.0.0.1:39239/ #> Body: empty request(example_url()) %>% req_method(\"HEAD\") #> <httr2_request> #> HEAD http://127.0.0.1:39239/ #> Body: empty"},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication — req_oauth","title":"OAuth authentication — req_oauth","text":"low-level helper automatically authenticating request OAuth flow, caching access token refreshing possible. need use function implementing OAuth flow.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication — req_oauth","text":"","code":"req_oauth(req, flow, flow_params, cache)"},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication — req_oauth","text":"req request. flow Function used generate access token. flow_params List parameters call flow . cache object controls token cached. list containing three functions: get() retrieves token cache, returning NULL cached yet. set() saves token cache. clear() removes token cache","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication — req_oauth","text":"oauth_token.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with authorization code — req_oauth_auth_code","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"uses oauth_flow_auth_code() generate access token, used authentication request req_auth_bearer_token(). token automatically cached (either memory disk) minimise number times flow performed. Learn overall flow vignette(\"oauth\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"","code":"req_oauth_auth_code(   req,   client,   auth_url,   cache_disk = FALSE,   cache_key = NULL,   scope = NULL,   pkce = TRUE,   auth_params = list(),   token_params = list(),   type = c(\"desktop\", \"web\"),   host_name = \"localhost\",   host_ip = \"127.0.0.1\",   port = httpuv::randomPort(),   redirect_uri = \"http://localhost\" )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"req request. client oauth_client(). auth_url Authorization url; need discover reading documentation. cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Cached tokens encrypted, automatically deleted 30 days creation, stored oauth_cache_path(). cache_key want cache multiple tokens per app, use key disambiguate . scope Scopes requested resource owner. pkce Use \"Proof Key Code Exchange\"? adds extra layer security always used supported server. auth_params List containing additional parameters passed oauth_flow_auth_code_url() token_params List containing additional parameters passed token_url. type Either desktop web. Use desktop running desktop environment can redirect user localhost. Use web running hosted web environment. host_name Use redirect_uri instead. host_ip IP address temporary webserver used capture authorization code. port Port bind temporary webserver . Used redirect_uri \"http(s)://localhost\". default, uses random port. may need set fixed port API requires redirect_uri specified client exactly matches redirect_uri generated function. redirect_uri URL redirect back authorization complete. Often must registered API advance.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"authorization code flow used web applications native applications (equivalent R packages). rfc8252 spells important considerations native apps. importantly way native apps keep secrets users. means server either require client_secret (.e. public client confidential client) ensure possession client_secret bestow meaningful rights. modern APIs bigger players (Azure, Google, etc) explicitly native apps. However, cases, even older APIs, possessing client_secret gives ability anything harmful, general principle fine include R package, long mildly obfuscated protect credential scraping. incentive steal client credentials takes less time create new client find client secret.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_auth_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth authentication with authorization code — req_oauth_auth_code","text":"","code":"client <- oauth_client(   id = \"28acfec0674bb3da9f38\",   secret = obfuscated(paste0(      \"J9iiGmyelHltyxqrHXW41ZZPZamyUNxSX1_uKnv\",      \"PeinhhxET_7FfUs2X0LLKotXY2bpgOMoHRCo\"   )),   token_url = \"https://github.com/login/oauth/access_token\",   name = \"hadley-oauth-test\" )  request(\"https://api.github.com/user\") %>%   req_oauth_auth_code(client, auth_url = \"https://github.com/login/oauth/authorize\") #> <httr2_request> #> GET https://api.github.com/user #> Body: empty #> Policies: #> • auth_oauth: a list"},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"uses oauth_flow_bearer_jwt() generate access token used authenticate request req_auth_bearer_token(). token cached memory. Learn overall flow vignette(\"oauth\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"","code":"req_oauth_bearer_jwt(   req,   client,   claim,   signature = \"jwt_encode_sig\",   signature_params = list(),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"req request. client oauth_client(). claim list claims. elements claim set static apart iat, nbf, exp, jti, provide list jwt_claim() automatically fill dynamic components. components need vary, can instead provide zero-argument callback function call jwt_claim(). signature Function use sign claim, e.g. jwt_encode_sig(). signature_params Additional arguments passed signature, e.g. size, header. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_bearer_jwt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth authentication with a bearer JWT — req_oauth_bearer_jwt","text":"","code":"client <- oauth_client(\"example\", \"https://example.com/get_token\") claim <- jwt_claim() req <- request(\"https://example.com\")  req %>% req_oauth_bearer_jwt(client, claim) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_oauth: a list"},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with client credentials — req_oauth_client_credentials","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"uses oauth_flow_client_credentials() generate access token, used authentication request req_auth_bearer_token(). token cached memory. Learn overall flow vignette(\"oauth\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"","code":"req_oauth_client_credentials(req, client, scope = NULL, token_params = list())"},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"req request. client oauth_client(). scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_client_credentials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth authentication with client credentials — req_oauth_client_credentials","text":"","code":"client <- oauth_client(\"example\", \"https://example.com/get_token\") req <- request(\"https://example.com\")  req %>% req_oauth_client_credentials(client) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_oauth: a list"},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with device flow — req_oauth_device","title":"OAuth authentication with device flow — req_oauth_device","text":"uses oauth_flow_device() generate access token, used authentication request req_auth_bearer_token(). token automatically cached (either memory disk) minimise number times flow performed. Learn overall flow vignette(\"oauth\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with device flow — req_oauth_device","text":"","code":"req_oauth_device(   req,   client,   cache_disk = FALSE,   cache_key = NULL,   scope = NULL,   auth_params = list(),   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication with device flow — req_oauth_device","text":"req request. client oauth_client(). cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Cached tokens encrypted, automatically deleted 30 days creation, stored oauth_cache_path(). cache_key want cache multiple tokens per app, use key disambiguate . scope Scopes requested resource owner. auth_params List containing additional parameters passed oauth_flow_auth_code_url() token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with device flow — req_oauth_device","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_device.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth authentication with device flow — req_oauth_device","text":"","code":"client <- oauth_client(\"example\", \"https://example.com/get_token\") req <- request(\"https://example.com\")  req %>% req_oauth_device(client) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_oauth: a list"},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with username and password — req_oauth_password","title":"OAuth authentication with username and password — req_oauth_password","text":"uses oauth_flow_password() generate access token, used authentication request req_auth_bearer_token(). token, password automatically cached (either memory disk); password used get token discarded. Learn overall flow vignette(\"oauth\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with username and password — req_oauth_password","text":"","code":"req_oauth_password(   req,   client,   username,   password = NULL,   cache_disk = FALSE,   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication with username and password — req_oauth_password","text":"req request. client oauth_client(). username User name. password Password. avoid entering password directly calling function captured .Rhistory. Instead, leave unset default behaviour prompt interactively. cache_disk access token cached disk? reduces number times need re-authenticate cost storing access credentials disk. Cached tokens encrypted, automatically deleted 30 days creation, stored oauth_cache_path(). scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with username and password — req_oauth_password","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth authentication with username and password — req_oauth_password","text":"","code":"client <- oauth_client(\"example\", \"https://example.com/get_token\") req <- request(\"https://example.com\")  if (interactive()) {   req %>% req_oauth_password(client, \"username\") }"},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth authentication with a refresh token — req_oauth_refresh","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"uses oauth_flow_refresh() generate access token, used authenticate request req_auth_bearer_token(). primarily useful testing: can manually execute another OAuth flow (e.g. calling oauth_flow_auth_code() oauth_flow_device()), extract refresh token result, save environment variable future use automated tests. requesting access token, server may also return new refresh token. happens, oauth_flow_refresh() warn, update stored refresh token. Learn overall flow vignette(\"oauth\").","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"","code":"req_oauth_refresh(   req,   client,   refresh_token = Sys.getenv(\"HTTR2_REFRESH_TOKEN\"),   scope = NULL,   token_params = list() )"},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"req request. client oauth_client(). refresh_token refresh token. equivalent password typed console stored script. Instead, recommend placing environment variable; default behaviour look HTTR2_REFRESH_TOKEN. scope Scopes requested resource owner. token_params List containing additional parameters passed token_url.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_oauth_refresh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth authentication with a refresh token — req_oauth_refresh","text":"","code":"client <- oauth_client(\"example\", \"https://example.com/get_token\") req <- request(\"https://example.com\") req %>% req_oauth_refresh(client) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • auth_oauth: a list"},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set arbitrary curl options in request — req_options","title":"Set arbitrary curl options in request — req_options","text":"req_options() expert use ; allows directly set libcurl options access features otherwise available httr2.","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set arbitrary curl options in request — req_options","text":"","code":"req_options(.req, ...)"},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set arbitrary curl options in request — req_options","text":".req request. ... <dynamic-dots> Name-value pairs. name valid curl option, found curl::curl_options().","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set arbitrary curl options in request — req_options","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set arbitrary curl options in request — req_options","text":"","code":"# req_options() allows you to access curl options that are not otherwise # exposed by httr2. For example, in very special cases you may need to # turn off SSL verification. This is generally a bad idea so httr2 doesn't # provide a convenient wrapper, but if you really know what you're doing # you can still access this libcurl option: req <- request(\"https://example.com\") %>%   req_options(ssl_verifypeer = 0)"},{"path":"https://httr2.r-lib.org/reference/req_paginate.html","id":null,"dir":"Reference","previous_headings":"","what":"Pagination — req_paginate","title":"Pagination — req_paginate","text":"Use req_paginate() specify request next page paginated API. Use paginate_req_perform() fetch pages. need control use combination req_perform() paginate_next_request() iterate pages . also helpers common pagination patterns: req_paginate_next_url() response contains link next page. req_paginate_offset() request describes offset .e. element start page size. req_paginate_next_token() response contains token used describe next page.","code":""},{"path":"https://httr2.r-lib.org/reference/req_paginate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pagination — req_paginate","text":"","code":"req_paginate(req, next_request, n_pages = NULL)  req_paginate_next_url(req, next_url, n_pages = NULL)  req_paginate_offset(req, offset, page_size, n_pages = NULL)  req_paginate_token(req, set_token, next_token, n_pages = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_paginate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pagination — req_paginate","text":"req request. next_request callback function takes two arguments (original request response) returns: new request request next page NULL next page. n_pages function extracts total number pages response. next_url function extracts url next page response. offset function applies new offset request. takes two arguments: request integer offset. page_size whole number specifies page size .e. number elements per page. set_token function applies new token request. takes two arguments: request new token. next_token function extracts next token response.","code":""},{"path":"https://httr2.r-lib.org/reference/req_paginate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pagination — req_paginate","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_paginate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pagination — req_paginate","text":"","code":"page_size <- 150  request(\"https://pokeapi.co/api/v2/pokemon\") %>%   req_url_query(limit = page_size) %>%   req_paginate_next_url(     next_url = function(resp) resp_body_json(resp)[[\"next\"]],     n_pages = function(resp) {       total <- resp_body_json(resp)$count       ceiling(total / page_size)     }   ) #> <httr2_request> #> GET https://pokeapi.co/api/v2/pokemon?limit=150 #> Body: empty #> Policies: #> • paginate: a list"},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request — req_perform","title":"Perform a request — req_perform","text":"preparing request, call req_perform() perform , fetching results back R response. default HTTP method GET unless body (set req_body_json friends) present, case POST. can override defaults req_method().","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request — req_perform","text":"","code":"req_perform(   req,   path = NULL,   verbosity = NULL,   mock = getOption(\"httr2_mock\", NULL),   error_call = current_env() )"},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a request — req_perform","text":"req request. path Optionally, path save body request. useful large responses since avoids storing response memory. verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly. mock mocking function. supplied, function called request. return either NULL (want handle request) response (). See with_mock()/ local_mock() details. error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request — req_perform","text":"HTTP request succeeds, status code ok (e.g. 200), HTTP response. HTTP request succeeds, status code error (e.g 404), error class c(\"httr2_http_404\", \"httr2_http\"). default, 400 500 status codes treated error, can customise req_error(). HTTP request fails (e.g. connection dropped server exist), error class \"httr2_failure\".","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"requests","dir":"Reference","previous_headings":"","what":"Requests","title":"Perform a request — req_perform","text":"Note one call req_perform() may perform multiple HTTP requests: url redirected 301, 302, 303, 307, curl automatically follow Location header new location. configured retries req_retry() request fails transient problem, req_perform() try waiting bit. See req_retry() details. using OAuth, cached token expired, req_perform() get new token either using refresh token (available) running OAuth flow.","code":""},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"progress-bar","dir":"Reference","previous_headings":"","what":"Progress bar","title":"Perform a request — req_perform","text":"req_perform() automatically add progress bar needs wait requests req_throttle() req_retry(). can turn progress bar (just show total time wait) setting options(httr2_progress = FALSE).","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_perform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a request — req_perform","text":"","code":"request(\"https://google.com\") %>%   req_perform() #> <httr2_response> #> GET https://www.google.com/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (18598 bytes)"},{"path":"https://httr2.r-lib.org/reference/req_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a progress bar to long downloads or uploads — req_progress","title":"Add a progress bar to long downloads or uploads — req_progress","text":"uploading downloading large file, often useful provide progress bar know long wait.","code":""},{"path":"https://httr2.r-lib.org/reference/req_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a progress bar to long downloads or uploads — req_progress","text":"","code":"req_progress(req, type = c(\"down\", \"up\"))"},{"path":"https://httr2.r-lib.org/reference/req_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a progress bar to long downloads or uploads — req_progress","text":"req request. type Type progress display: either number bytes uploaded downloaded.","code":""},{"path":"https://httr2.r-lib.org/reference/req_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a progress bar to long downloads or uploads — req_progress","text":"","code":"req <- request(\"https://r4ds.s3.us-west-2.amazonaws.com/seattle-library-checkouts.csv\") %>%   req_progress()  if (FALSE) { path <- tempfile() req %>% req_perform(path = path) }"},{"path":"https://httr2.r-lib.org/reference/req_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a proxy for a request — req_proxy","title":"Use a proxy for a request — req_proxy","text":"Use proxy request","code":""},{"path":"https://httr2.r-lib.org/reference/req_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a proxy for a request — req_proxy","text":"","code":"req_proxy(   req,   url,   port = NULL,   username = NULL,   password = NULL,   auth = \"basic\" )"},{"path":"https://httr2.r-lib.org/reference/req_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a proxy for a request — req_proxy","text":"req request. url, port Location proxy. username, password Login details proxy, needed. auth Type HTTP authentication use. one following: basic, digest, digest_ie, gssnegotiate, ntlm, .","code":""},{"path":"https://httr2.r-lib.org/reference/req_proxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a proxy for a request — req_proxy","text":"","code":"# Proxy from https://www.proxynova.com/proxy-server-list/ if (FALSE) { request(\"http://hadley.nz\") %>%   req_proxy(\"20.116.130.70\", 3128) %>%   req_perform() }"},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Control when a request will retry, and how long it will wait between tries — req_retry","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"req_retry() alters req_perform() automatically retry case failure. activate , must specify either total number requests make max_tries total amount time spend max_seconds. req_perform() retry : Either HTTP request HTTP response complete successfully leading error curl, lower-level library httr2 uses perform HTTP request. occurs, example, wifi . error \"transient\", .e. HTTP error can resolved waiting. default, 429 503 statuses treated transient, API wrapping transient status codes (conveys transient-ness property response), can override default is_transient. bad idea immediately retry request, req_perform() wait little trying : response contains Retry-header, httr2 wait amount time specifies. API wrapping conveys information different header (property response) can override default behaviour retry_after. Otherwise, httr2 use \"truncated exponential backoff full jitter\", .e. wait random amount time one second 2 ^ tries seconds, capped 60 seconds. words, waits runif(1, 1, 2) seconds first failure, runif(1, 1, 4) second, runif(1, 1, 8) third, . prefer different strategy, can override default backoff.","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"","code":"req_retry(   req,   max_tries = NULL,   max_seconds = NULL,   is_transient = NULL,   backoff = NULL,   after = NULL )"},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"req request. max_tries, max_seconds Cap maximum number attempts max_tries total elapsed time first request max_seconds. neither option supplied (default), req_perform() retry. is_transient predicate function takes single argument (response) returns TRUE FALSE specifying whether response represents transient error. backoff function takes single argument (number failed attempts far) returns number seconds wait. function takes single argument (response) returns either number seconds wait NULL, indicates precise wait time available backoff strategy used instead..","code":""},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control when a request will retry, and how long it will wait between tries — req_retry","text":"","code":"# google APIs assume that a 500 is also a transient error request(\"http://google.com\") %>%   req_retry(is_transient = ~ resp_status(.x) %in% c(429, 500, 503)) #> <httr2_request> #> GET http://google.com #> Body: empty #> Policies: #> • retry_is_transient: a <rlang_lambda_function> object  # use a constant 10s delay after every failure request(\"http://example.com\") %>%   req_retry(backoff = ~ 10) #> <httr2_request> #> GET http://example.com #> Body: empty #> Policies: #> • retry_backoff: a <rlang_lambda_function> object  # When rate-limited, GitHub's API returns a 403 with # `X-RateLimit-Remaining: 0` and an Unix time stored in the # `X-RateLimit-Reset` header. This takes a bit more work to handle: github_is_transient <- function(resp) {   resp_status(resp) == 403 &&     identical(resp_header(resp, \"X-RateLimit-Remaining\"), \"0\") } github_after <- function(resp) {   time <- as.numeric(resp_header(resp, \"X-RateLimit-Reset\"))   time - unclass(Sys.time()) } request(\"http://api.github.com\") %>%   req_retry(     is_transient = github_is_transient,     after = github_after   ) #> <httr2_request> #> GET http://api.github.com #> Body: empty #> Policies: #> • retry_is_transient: a function #> • retry_after: a function"},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request, streaming data back to R — req_stream","title":"Perform a request, streaming data back to R — req_stream","text":"preparing request, call req_stream() perform request handle result streaming callback. useful streaming HTTP APIs potentially stream never ends.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request, streaming data back to R — req_stream","text":"","code":"req_stream(req, callback, timeout_sec = Inf, buffer_kb = 64)"},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a request, streaming data back to R — req_stream","text":"req request. callback single argument callback function. called repeatedly raw vector whenever least buffer_kb worth data process. must return TRUE continue streaming. timeout_sec Number seconds processs stream . buffer_kb Buffer size, kilobytes.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request, streaming data back to R — req_stream","text":"HTTP response.","code":""},{"path":"https://httr2.r-lib.org/reference/req_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a request, streaming data back to R — req_stream","text":"","code":"show_bytes <- function(x) {   cat(\"Got \", length(x), \" bytes\\n\", sep = \"\")   TRUE } resp <- request(example_url()) %>%   req_url_path(\"/stream-bytes/100000\") %>%   req_stream(show_bytes, buffer_kb = 32) #> Got 32768 bytes #> Got 32768 bytes #> Got 32768 bytes #> Got 1696 bytes"},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Set request method/path from a template — req_template","title":"Set request method/path from a template — req_template","text":"Many APIs document methods lightweight template mechanism looks like GET /user/{user} POST /organisation/:org. function makes easy copy paste snippets retrieve template variables either function arguments current environment. req_template() append existing path can set base url initial request(). means generally want avoid multiple req_template() calls request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set request method/path from a template — req_template","text":"","code":"req_template(req, template, ..., .env = parent.frame())"},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set request method/path from a template — req_template","text":"req request. template template string consists optional HTTP method path containing variables labelled like either :foo {foo}. ... Template variables. .env Environment look template variables found .... Expert use .","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set request method/path from a template — req_template","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set request method/path from a template — req_template","text":"","code":"httpbin <- request(example_url())  # You can supply template parameters in `...` httpbin %>% req_template(\"GET /bytes/{n}\", n = 100) #> <httr2_request> #> GET http://127.0.0.1:39239/bytes/100 #> Body: empty  # or you retrieve from the current environment n <- 200 httpbin %>% req_template(\"GET /bytes/{n}\") #> <httr2_request> #> GET http://127.0.0.1:39239/bytes/200 #> Body: empty  # Existing path is preserved: httpbin_test <- request(example_url()) %>% req_url_path(\"/test\") name <- \"id\" value <- \"a3fWa\" httpbin_test %>% req_template(\"GET /set/{name}/{value}\") #> <httr2_request> #> GET http://127.0.0.1:39239/test/set/id/a3fWa #> Body: empty"},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate limit a request by automatically adding a delay — req_throttle","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"Use req_throttle() ensure repeated calls req_perform() never exceed specified rate.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"","code":"req_throttle(req, rate, realm = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"req request. rate Maximum rate, .e. maximum number requests per second. Usually easiest expressed fraction, number_of_requests / number_of_seconds, e.g. 15 requests per minute 15 / 60. realm unique identifier throttle pool. supplied, defaults hostname request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_throttle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate limit a request by automatically adding a delay — req_throttle","text":"","code":"# Ensure we never send more than 30 requests a minute req <- request(\"https://example.com\") %>%   req_throttle(rate = 30 / 60)  resp <- req_perform(req) throttle_status() #>         realm        last_request #> 1 example.com 2023-09-01 08:14:53 resp <- req_perform(req) #> Waiting 2s for throttling delay ■■■■■■■■■■■■■■■                  #> Waiting 2s for throttling delay ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  throttle_status() #>         realm        last_request #> 1 example.com 2023-09-01 08:14:55"},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Set time limit for a request — req_timeout","title":"Set time limit for a request — req_timeout","text":"error thrown request complete time limit.","code":""},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set time limit for a request — req_timeout","text":"","code":"req_timeout(req, seconds)"},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set time limit for a request — req_timeout","text":"req request. seconds Maximum number seconds wait","code":""},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set time limit for a request — req_timeout","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_timeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set time limit for a request — req_timeout","text":"","code":"# Give up after at most 10 seconds request(\"http://example.com\") %>% req_timeout(10) #> <httr2_request> #> GET http://example.com #> Body: empty #> Options: #> • timeout_ms: 10000"},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify request URL — req_url","title":"Modify request URL — req_url","text":"req_url() replaces entire url req_url_query() modifies components query req_url_path() modifies path req_url_path_append() adds path","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify request URL — req_url","text":"","code":"req_url(req, url)  req_url_query(.req, ...)  req_url_path(req, ...)  req_url_path_append(req, ...)"},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify request URL — req_url","text":"req, .req request. url New URL; completely replaces existing. ... req_url_query(): <dynamic-dots> Name-value pairs provide query parameters. value must either length-1 atomic vector (automatically escaped) NULL (silently dropped). want opt escaping, wrap strings (). req_url_path() req_url_path_append(): sequence path components combined /.","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify request URL — req_url","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify request URL — req_url","text":"","code":"req <- request(\"http://example.com\")  # Change url components req %>%   req_url_path_append(\"a\") %>%   req_url_path_append(\"b\") %>%   req_url_path_append(\"search.html\") %>%   req_url_query(q = \"the cool ice\") #> <httr2_request> #> GET http://example.com/a/b/search.html?q=the%20cool%20ice #> Body: empty  # Change complete url req %>%   req_url(\"http://google.com\") #> <httr2_request> #> GET http://google.com #> Body: empty  # If you have query parameters in a list, use !!! params <- list(a = \"1\", b = \"2\") req %>%   req_url_query(!!!params, c = \"3\") #> <httr2_request> #> GET http://example.com?a=1&b=2&c=3 #> Body: empty"},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set user-agent for a request — req_user_agent","title":"Set user-agent for a request — req_user_agent","text":"overrides default user-agent set httr2 includes version numbers httr2, curl package, libcurl.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set user-agent for a request — req_user_agent","text":"","code":"req_user_agent(req, string = NULL)"},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set user-agent for a request — req_user_agent","text":"req request. string String sent User-Agent header. NULL, user default.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set user-agent for a request — req_user_agent","text":"modified HTTP request.","code":""},{"path":"https://httr2.r-lib.org/reference/req_user_agent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set user-agent for a request — req_user_agent","text":"","code":"# Default user-agent: request(\"http://example.com\") %>% req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #>   request(\"http://example.com\") %>% req_user_agent(\"MyString\") %>% req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: MyString #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #>   # If you're wrapping in an API in a package, it's polite to set the # user agent to identify your package. request(\"http://example.com\") %>%   req_user_agent(\"MyPackage (http://mypackage.com)\") %>%   req_dry_run() #> GET / HTTP/1.1 #> Host: example.com #> User-Agent: MyPackage (http://mypackage.com) #> Accept: */* #> Accept-Encoding: deflate, gzip, br, zstd #>"},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Show extra output when request is performed — req_verbose","title":"Show extra output when request is performed — req_verbose","text":"req_verbose() uses following prefixes distinguish different components HTTP requests responses: *  informative curl messages <- request headers << request body -> response headers >> response body","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show extra output when request is performed — req_verbose","text":"","code":"req_verbose(   req,   header_req = TRUE,   header_resp = TRUE,   body_req = FALSE,   body_resp = FALSE,   info = FALSE,   redact_headers = TRUE )"},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show extra output when request is performed — req_verbose","text":"req request. header_req, header_resp Show request/response headers? body_req, body_resp request/response bodies? response body compressed, show number bytes received \"chunk\". info Show informational text curl? mainly useful debugging https auth problems, disabled default. redact_headers Redact confidential data headers? Currently redacts contents Authorization header prevent accidentally leaking credentials debugging/reprexing.","code":""},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show extra output when request is performed — req_verbose","text":"modified HTTP request.","code":""},{"path":[]},{"path":"https://httr2.r-lib.org/reference/req_verbose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show extra output when request is performed — req_verbose","text":"","code":"# Use `req_verbose()` to see the headers that are sent back and forth when # making a request resp <- request(\"https://httr2.r-lib.org\") %>%   req_verbose() %>%   req_perform() #> -> GET / HTTP/2 #> -> Host: httr2.r-lib.org #> -> user-agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> -> accept: */* #> -> accept-encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/2 200  #> <- server: GitHub.com #> <- content-type: text/html; charset=utf-8 #> <- last-modified: Thu, 31 Aug 2023 21:09:37 GMT #> <- access-control-allow-origin: * #> <- etag: W/\"64f10191-4d6a\" #> <- expires: Fri, 01 Sep 2023 07:40:23 GMT #> <- cache-control: max-age=600 #> <- content-encoding: gzip #> <- x-proxy-cache: MISS #> <- x-github-request-id: A1D4:9188:36BD2F:3C715D:64F1930E #> <- accept-ranges: bytes #> <- date: Fri, 01 Sep 2023 08:14:57 GMT #> <- via: 1.1 varnish #> <- age: 25 #> <- x-served-by: cache-pao-kpao1770063-PAO #> <- x-cache: HIT #> <- x-cache-hits: 1 #> <- x-timer: S1693556097.091888,VS0,VE2 #> <- vary: Accept-Encoding #> <- x-fastly-request-id: a7848b9b4d24ecf9e1768b2743c4e99c0323343f #> <- content-length: 5341 #> <-   # Or use one of the convenient shortcuts: resp <- request(\"https://httr2.r-lib.org\") %>%   req_perform(verbosity = 1) #> -> GET / HTTP/2 #> -> Host: httr2.r-lib.org #> -> user-agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> -> accept: */* #> -> accept-encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/2 200  #> <- server: GitHub.com #> <- content-type: text/html; charset=utf-8 #> <- last-modified: Thu, 31 Aug 2023 21:09:37 GMT #> <- access-control-allow-origin: * #> <- etag: W/\"64f10191-4d6a\" #> <- expires: Fri, 01 Sep 2023 07:40:23 GMT #> <- cache-control: max-age=600 #> <- content-encoding: gzip #> <- x-proxy-cache: MISS #> <- x-github-request-id: A1D4:9188:36BD2F:3C715D:64F1930E #> <- accept-ranges: bytes #> <- date: Fri, 01 Sep 2023 08:14:57 GMT #> <- via: 1.1 varnish #> <- age: 25 #> <- x-served-by: cache-pao-kpao1770063-PAO #> <- x-cache: HIT #> <- x-cache-hits: 2 #> <- x-timer: S1693556097.113780,VS0,VE0 #> <- vary: Accept-Encoding #> <- x-fastly-request-id: a2f4a3c59faa3e738079f565acb6665323c6b273 #> <- content-length: 5341 #> <-"},{"path":"https://httr2.r-lib.org/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new HTTP request — request","title":"Create a new HTTP request — request","text":"perform HTTP request, first create request object request(), define behaviour req_ functions, perform request fetch response req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new HTTP request — request","text":"","code":"request(base_url)"},{"path":"https://httr2.r-lib.org/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new HTTP request — request","text":"base_url Base URL request.","code":""},{"path":"https://httr2.r-lib.org/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new HTTP request — request","text":"HTTP response: S3 list class httr2_request.","code":""},{"path":"https://httr2.r-lib.org/reference/request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new HTTP request — request","text":"","code":"request(\"http://r-project.org\") #> <httr2_request> #> GET http://r-project.org #> Body: empty"},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract body from response — resp_body_raw","title":"Extract body from response — resp_body_raw","text":"resp_body_raw() returns raw bytes. resp_body_string() returns UTF-8 string. resp_body_json() returns parsed JSON. resp_body_html() returns parsed HTML. resp_body_xml() returns parsed XML. resp_has_body() returns TRUE response body. resp_body_json() resp_body_xml() check content-type header correct; server returns incorrect type can suppress check check_type = FALSE.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract body from response — resp_body_raw","text":"","code":"resp_body_raw(resp)  resp_has_body(resp)  resp_body_string(resp, encoding = NULL)  resp_body_json(resp, check_type = TRUE, simplifyVector = FALSE, ...)  resp_body_html(resp, check_type = TRUE, ...)  resp_body_xml(resp, check_type = TRUE, ...)"},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract body from response — resp_body_raw","text":"resp response object. encoding Character encoding body text. specified, use encoding specified content-type, falling back UTF-8 warning found. resulting string always re-encoded UTF-8. check_type Check response expected content type? Set FALSE suppress automated check simplifyVector JSON arrays containing primitives (.e. booleans, numbers, strings) caused atomic vectors? ... arguments passed jsonlite::fromJSON() xml2::read_xml() respectively.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract body from response — resp_body_raw","text":"resp_body_raw() returns raw vector. resp_body_string() returns string. resp_body_json() returns NULL, atomic vector, list. resp_body_html() resp_body_xml() return xml2::xml_document","code":""},{"path":"https://httr2.r-lib.org/reference/resp_body_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract body from response — resp_body_raw","text":"","code":"resp <- request(\"https://httr2.r-lib.org\") %>% req_perform() resp #> <httr2_response> #> GET https://httr2.r-lib.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (19818 bytes)  resp %>% resp_has_body() #> [1] TRUE resp %>% resp_body_raw() #>     [1] 3c 21 44 4f 43 54 59 50 45 20 68 74 6d 6c 3e 0a 3c 21 2d 2d 20 47 #>    [23] 65 6e 65 72 61 74 65 64 20 62 79 20 70 6b 67 64 6f 77 6e 3a 20 64 #>    [45] 6f 20 6e 6f 74 20 65 64 69 74 20 62 79 20 68 61 6e 64 20 2d 2d 3e #>    [67] 3c 68 74 6d 6c 20 6c 61 6e 67 3d 22 65 6e 22 3e 0a 3c 68 65 61 64 #>    [89] 3e 0a 3c 6d 65 74 61 20 68 74 74 70 2d 65 71 75 69 76 3d 22 43 6f #>   [111] 6e 74 65 6e 74 2d 54 79 70 65 22 20 63 6f 6e 74 65 6e 74 3d 22 74 #>   [133] 65 78 74 2f 68 74 6d 6c 3b 20 63 68 61 72 73 65 74 3d 55 54 46 2d #>   [155] 38 22 3e 0a 3c 6d 65 74 61 20 63 68 61 72 73 65 74 3d 22 75 74 66 #>   [177] 2d 38 22 3e 0a 3c 6d 65 74 61 20 68 74 74 70 2d 65 71 75 69 76 3d #>   [199] 22 58 2d 55 41 2d 43 6f 6d 70 61 74 69 62 6c 65 22 20 63 6f 6e 74 #>   [221] 65 6e 74 3d 22 49 45 3d 65 64 67 65 22 3e 0a 3c 6d 65 74 61 20 6e #>   [243] 61 6d 65 3d 22 76 69 65 77 70 6f 72 74 22 20 63 6f 6e 74 65 6e 74 #>   [265] 3d 22 77 69 64 74 68 3d 64 65 76 69 63 65 2d 77 69 64 74 68 2c 20 #>   [287] 69 6e 69 74 69 61 6c 2d 73 63 61 6c 65 3d 31 2c 20 73 68 72 69 6e #>   [309] 6b 2d 74 6f 2d 66 69 74 3d 6e 6f 22 3e 0a 3c 6d 65 74 61 20 6e 61 #>   [331] 6d 65 3d 22 64 65 73 63 72 69 70 74 69 6f 6e 22 20 63 6f 6e 74 65 #>   [353] 6e 74 3d 22 54 6f 6f 6c 73 20 66 6f 72 20 63 72 65 61 74 69 6e 67 #>   [375] 20 61 6e 64 20 6d 6f 64 69 66 79 69 6e 67 20 48 54 54 50 20 72 65 #>   [397] 71 75 65 73 74 73 2c 20 74 68 65 6e 0a 20 20 20 20 70 65 72 66 6f #>   [419] 72 6d 69 6e 67 20 74 68 65 6d 20 61 6e 64 20 70 72 6f 63 65 73 73 #>   [441] 69 6e 67 20 74 68 65 20 72 65 73 75 6c 74 73 2e 20 68 74 74 72 32 #>   [463] 20 69 73 20 61 20 6d 6f 64 65 72 6e 0a 20 20 20 20 72 65 2d 69 6d #>   [485] 61 67 69 6e 69 6e 67 20 6f 66 20 68 74 74 72 20 74 68 61 74 20 75 #>   [507] 73 65 73 20 61 20 70 69 70 65 2d 62 61 73 65 64 20 69 6e 74 65 72 #>   [529] 66 61 63 65 20 61 6e 64 20 73 6f 6c 76 65 73 0a 20 20 20 20 6d 6f #>   [551] 72 65 20 6f 66 20 74 68 65 20 70 72 6f 62 6c 65 6d 73 20 74 68 61 #>   [573] 74 20 41 50 49 20 77 72 61 70 70 69 6e 67 20 70 61 63 6b 61 67 65 #>   [595] 73 20 66 61 63 65 2e 22 3e 0a 3c 74 69 74 6c 65 3e 50 65 72 66 6f #>   [617] 72 6d 20 48 54 54 50 20 52 65 71 75 65 73 74 73 20 61 6e 64 20 50 #>   [639] 72 6f 63 65 73 73 20 74 68 65 20 52 65 73 70 6f 6e 73 65 73 20 e2 #>   [661] 80 a2 20 68 74 74 72 32 3c 2f 74 69 74 6c 65 3e 0a 3c 73 63 72 69 #>   [683] 70 74 20 73 72 63 3d 22 64 65 70 73 2f 6a 71 75 65 72 79 2d 33 2e #>   [705] 36 2e 30 2f 6a 71 75 65 72 79 2d 33 2e 36 2e 30 2e 6d 69 6e 2e 6a #>   [727] 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 6d 65 74 61 20 6e 61 6d 65 #>   [749] 3d 22 76 69 65 77 70 6f 72 74 22 20 63 6f 6e 74 65 6e 74 3d 22 77 #>   [771] 69 64 74 68 3d 64 65 76 69 63 65 2d 77 69 64 74 68 2c 20 69 6e 69 #>   [793] 74 69 61 6c 2d 73 63 61 6c 65 3d 31 2c 20 73 68 72 69 6e 6b 2d 74 #>   [815] 6f 2d 66 69 74 3d 6e 6f 22 3e 0a 3c 6c 69 6e 6b 20 68 72 65 66 3d #>   [837] 22 64 65 70 73 2f 62 6f 6f 74 73 74 72 61 70 2d 35 2e 32 2e 32 2f #>   [859] 62 6f 6f 74 73 74 72 61 70 2e 6d 69 6e 2e 63 73 73 22 20 72 65 6c #>   [881] 3d 22 73 74 79 6c 65 73 68 65 65 74 22 3e 0a 3c 73 63 72 69 70 74 #>   [903] 20 73 72 63 3d 22 64 65 70 73 2f 62 6f 6f 74 73 74 72 61 70 2d 35 #>   [925] 2e 32 2e 32 2f 62 6f 6f 74 73 74 72 61 70 2e 62 75 6e 64 6c 65 2e #>   [947] 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 6c 69 6e 6b #>   [969] 20 68 72 65 66 3d 22 64 65 70 73 2f 53 6f 75 72 63 65 5f 53 61 6e #>   [991] 73 5f 50 72 6f 2d 30 2e 34 2e 37 2f 66 6f 6e 74 2e 63 73 73 22 20 #>  [1013] 72 65 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 22 3e 0a 3c 6c 69 6e #>  [1035] 6b 20 68 72 65 66 3d 22 64 65 70 73 2f 53 6f 75 72 63 65 5f 43 6f #>  [1057] 64 65 5f 50 72 6f 2d 30 2e 34 2e 37 2f 66 6f 6e 74 2e 63 73 73 22 #>  [1079] 20 72 65 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 22 3e 0a 3c 21 2d #>  [1101] 2d 20 46 6f 6e 74 20 41 77 65 73 6f 6d 65 20 69 63 6f 6e 73 20 2d #>  [1123] 2d 3e 3c 6c 69 6e 6b 20 72 65 6c 3d 22 73 74 79 6c 65 73 68 65 65 #>  [1145] 74 22 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 #>  [1167] 2e 63 6c 6f 75 64 66 6c 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c #>  [1189] 69 62 73 2f 66 6f 6e 74 2d 61 77 65 73 6f 6d 65 2f 35 2e 31 32 2e #>  [1211] 31 2f 63 73 73 2f 61 6c 6c 2e 6d 69 6e 2e 63 73 73 22 20 69 6e 74 #>  [1233] 65 67 72 69 74 79 3d 22 73 68 61 32 35 36 2d 6d 6d 67 4c 6b 43 59 #>  [1255] 4c 55 51 62 58 6e 30 42 31 53 52 71 7a 48 61 72 36 64 43 6e 76 39 #>  [1277] 6f 5a 46 50 45 43 31 67 31 63 77 6c 6b 6b 3d 22 20 63 72 6f 73 73 #>  [1299] 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 3e 0a 3c 6c #>  [1321] 69 6e 6b 20 72 65 6c 3d 22 73 74 79 6c 65 73 68 65 65 74 22 20 68 #>  [1343] 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f #>  [1365] 75 64 66 6c 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f #>  [1387] 66 6f 6e 74 2d 61 77 65 73 6f 6d 65 2f 35 2e 31 32 2e 31 2f 63 73 #>  [1409] 73 2f 76 34 2d 73 68 69 6d 73 2e 6d 69 6e 2e 63 73 73 22 20 69 6e #>  [1431] 74 65 67 72 69 74 79 3d 22 73 68 61 32 35 36 2d 77 5a 6a 52 35 32 #>  [1453] 66 7a 6e 67 31 70 4a 48 77 78 34 61 56 32 41 4f 33 79 79 54 4f 58 #>  [1475] 72 63 44 57 37 6a 42 70 4a 74 54 77 56 78 77 3d 22 20 63 72 6f 73 #>  [1497] 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 3e 0a 3c #>  [1519] 21 2d 2d 20 62 6f 6f 74 73 74 72 61 70 2d 74 6f 63 20 2d 2d 3e 3c #>  [1541] 73 63 72 69 70 74 20 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 63 64 #>  [1563] 6e 2e 6a 73 64 65 6c 69 76 72 2e 6e 65 74 2f 67 68 2f 61 66 65 6c #>  [1585] 64 2f 62 6f 6f 74 73 74 72 61 70 2d 74 6f 63 40 76 31 2e 30 2e 31 #>  [1607] 2f 64 69 73 74 2f 62 6f 6f 74 73 74 72 61 70 2d 74 6f 63 2e 6d 69 #>  [1629] 6e 2e 6a 73 22 20 69 6e 74 65 67 72 69 74 79 3d 22 73 68 61 32 35 #>  [1651] 36 2d 34 76 65 56 51 62 75 37 2f 2f 4c 6b 35 54 53 6d 63 37 59 56 #>  [1673] 34 38 4d 78 74 4d 79 39 38 65 32 36 63 66 35 4d 72 67 5a 59 6e 77 #>  [1695] 6f 3d 22 20 63 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 #>  [1717] 6d 6f 75 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 21 2d 2d 20 68 65 #>  [1739] 61 64 72 6f 6f 6d 2e 6a 73 20 2d 2d 3e 3c 73 63 72 69 70 74 20 73 #>  [1761] 72 63 3d 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 #>  [1783] 64 66 6c 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 68 #>  [1805] 65 61 64 72 6f 6f 6d 2f 30 2e 31 31 2e 30 2f 68 65 61 64 72 6f 6f #>  [1827] 6d 2e 6d 69 6e 2e 6a 73 22 20 69 6e 74 65 67 72 69 74 79 3d 22 73 #>  [1849] 68 61 32 35 36 2d 41 73 55 58 34 53 4a 45 31 2b 79 75 44 75 35 2b #>  [1871] 6d 41 56 7a 4a 62 75 59 4e 50 48 6a 2f 57 72 6f 48 75 5a 38 49 72 #>  [1893] 2f 43 6b 45 30 3d 22 20 63 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 #>  [1915] 6e 6f 6e 79 6d 6f 75 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 73 63 #>  [1937] 72 69 70 74 20 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a #>  [1959] 73 2e 63 6c 6f 75 64 66 6c 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f #>  [1981] 6c 69 62 73 2f 68 65 61 64 72 6f 6f 6d 2f 30 2e 31 31 2e 30 2f 6a #>  [2003] 51 75 65 72 79 2e 68 65 61 64 72 6f 6f 6d 2e 6d 69 6e 2e 6a 73 22 #>  [2025] 20 69 6e 74 65 67 72 69 74 79 3d 22 73 68 61 32 35 36 2d 5a 58 2f #>  [2047] 79 4e 53 68 62 6a 71 73 6f 68 48 31 6b 39 35 6c 69 71 59 39 47 64 #>  [2069] 38 75 4f 69 45 31 53 34 76 5a 63 2b 39 4b 51 31 4b 34 3d 22 20 63 #>  [2091] 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 #>  [2113] 3e 3c 2f 73 63 72 69 70 74 3e 3c 21 2d 2d 20 63 6c 69 70 62 6f 61 #>  [2135] 72 64 2e 6a 73 20 2d 2d 3e 3c 73 63 72 69 70 74 20 73 72 63 3d 22 #>  [2157] 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 64 66 6c 61 #>  [2179] 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 63 6c 69 70 62 #>  [2201] 6f 61 72 64 2e 6a 73 2f 32 2e 30 2e 36 2f 63 6c 69 70 62 6f 61 72 #>  [2223] 64 2e 6d 69 6e 2e 6a 73 22 20 69 6e 74 65 67 72 69 74 79 3d 22 73 #>  [2245] 68 61 32 35 36 2d 69 6e 63 35 6b 6c 39 4d 41 31 68 6b 65 59 55 74 #>  [2267] 2b 45 43 33 42 68 6c 49 67 79 70 2f 32 6a 44 49 79 42 4c 53 36 6b #>  [2289] 33 55 78 50 49 3d 22 20 63 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 #>  [2311] 6e 6f 6e 79 6d 6f 75 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 21 2d #>  [2333] 2d 20 73 65 61 72 63 68 20 2d 2d 3e 3c 73 63 72 69 70 74 20 73 72 #>  [2355] 63 3d 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 64 #>  [2377] 66 6c 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 66 75 #>  [2399] 73 65 2e 6a 73 2f 36 2e 34 2e 36 2f 66 75 73 65 2e 6a 73 22 20 69 #>  [2421] 6e 74 65 67 72 69 74 79 3d 22 73 68 61 35 31 32 2d 7a 76 36 59 77 #>  [2443] 6b 6a 79 6b 74 73 6f 68 6b 62 70 39 62 62 34 35 56 36 74 45 4d 6f #>  [2465] 57 68 7a 46 7a 58 69 73 2b 4c 72 4d 65 68 6d 4a 5a 5a 53 79 73 31 #>  [2487] 39 59 78 66 31 64 6f 70 48 78 37 57 7a 49 4b 78 72 35 74 4b 32 64 #>  [2509] 56 63 59 6d 61 43 6b 32 75 71 64 6a 46 34 41 3d 3d 22 20 63 72 6f #>  [2531] 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 3e 3c #>  [2553] 2f 73 63 72 69 70 74 3e 3c 73 63 72 69 70 74 20 73 72 63 3d 22 68 #>  [2575] 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 64 66 6c 61 72 #>  [2597] 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 61 75 74 6f 63 6f #>  [2619] 6d 70 6c 65 74 65 2e 6a 73 2f 30 2e 33 38 2e 30 2f 61 75 74 6f 63 #>  [2641] 6f 6d 70 6c 65 74 65 2e 6a 71 75 65 72 79 2e 6d 69 6e 2e 6a 73 22 #>  [2663] 20 69 6e 74 65 67 72 69 74 79 3d 22 73 68 61 35 31 32 2d 47 55 39 #>  [2685] 61 79 66 2b 36 36 58 78 32 54 6d 70 78 71 4a 70 6c 69 57 62 54 35 #>  [2707] 50 69 47 59 78 70 61 47 38 72 66 6e 42 45 6b 31 4c 4c 38 6c 31 4b #>  [2729] 47 6b 52 53 68 68 6e 67 77 64 58 4b 31 55 67 71 68 41 7a 57 70 5a #>  [2751] 48 53 69 59 50 63 30 39 2f 4e 77 44 51 49 47 79 67 3d 3d 22 20 63 #>  [2773] 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 #>  [2795] 3e 3c 2f 73 63 72 69 70 74 3e 3c 73 63 72 69 70 74 20 73 72 63 3d #>  [2817] 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 64 66 6c #>  [2839] 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 6d 61 72 6b #>  [2861] 2e 6a 73 2f 38 2e 31 31 2e 31 2f 6d 61 72 6b 2e 6d 69 6e 2e 6a 73 #>  [2883] 22 20 69 6e 74 65 67 72 69 74 79 3d 22 73 68 61 35 31 32 2d 35 43 #>  [2905] 59 4f 6c 48 58 47 68 36 51 70 4f 46 41 2f 54 65 54 79 6c 4b 4c 57 #>  [2927] 66 42 33 66 74 50 73 64 65 37 41 6e 6d 68 75 69 74 69 54 58 34 4b #>  [2949] 35 53 71 43 4c 42 65 4b 72 6f 36 73 50 53 38 69 6c 73 7a 31 51 34 #>  [2971] 4e 52 78 33 76 38 4b 6f 32 49 42 69 73 7a 7a 64 77 77 3d 3d 22 20 #>  [2993] 63 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 #>  [3015] 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 21 2d 2d 20 70 6b 67 64 6f 77 #>  [3037] 6e 20 2d 2d 3e 3c 73 63 72 69 70 74 20 73 72 63 3d 22 70 6b 67 64 #>  [3059] 6f 77 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 3c 6d 65 74 61 #>  [3081] 20 70 72 6f 70 65 72 74 79 3d 22 6f 67 3a 74 69 74 6c 65 22 20 63 #>  [3103] 6f 6e 74 65 6e 74 3d 22 50 65 72 66 6f 72 6d 20 48 54 54 50 20 52 #>  [3125] 65 71 75 65 73 74 73 20 61 6e 64 20 50 72 6f 63 65 73 73 20 74 68 #>  [3147] 65 20 52 65 73 70 6f 6e 73 65 73 22 3e 0a 3c 6d 65 74 61 20 70 72 #>  [3169] 6f 70 65 72 74 79 3d 22 6f 67 3a 64 65 73 63 72 69 70 74 69 6f 6e #>  [3191] 22 20 63 6f 6e 74 65 6e 74 3d 22 54 6f 6f 6c 73 20 66 6f 72 20 63 #>  [3213] 72 65 61 74 69 6e 67 20 61 6e 64 20 6d 6f 64 69 66 79 69 6e 67 20 #>  [3235] 48 54 54 50 20 72 65 71 75 65 73 74 73 2c 20 74 68 65 6e 0a 20 20 #>  [3257] 20 20 70 65 72 66 6f 72 6d 69 6e 67 20 74 68 65 6d 20 61 6e 64 20 #>  [3279] 70 72 6f 63 65 73 73 69 6e 67 20 74 68 65 20 72 65 73 75 6c 74 73 #>  [3301] 2e 20 68 74 74 72 32 20 69 73 20 61 20 6d 6f 64 65 72 6e 0a 20 20 #>  [3323] 20 20 72 65 2d 69 6d 61 67 69 6e 69 6e 67 20 6f 66 20 68 74 74 72 #>  [3345] 20 74 68 61 74 20 75 73 65 73 20 61 20 70 69 70 65 2d 62 61 73 65 #>  [3367] 64 20 69 6e 74 65 72 66 61 63 65 20 61 6e 64 20 73 6f 6c 76 65 73 #>  [3389] 0a 20 20 20 20 6d 6f 72 65 20 6f 66 20 74 68 65 20 70 72 6f 62 6c #>  [3411] 65 6d 73 20 74 68 61 74 20 41 50 49 20 77 72 61 70 70 69 6e 67 20 #>  [3433] 70 61 63 6b 61 67 65 73 20 66 61 63 65 2e 22 3e 0a 3c 21 2d 2d 20 #>  [3455] 6d 61 74 68 6a 61 78 20 2d 2d 3e 3c 73 63 72 69 70 74 20 73 72 63 #>  [3477] 3d 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 64 66 #>  [3499] 6c 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 6d 61 74 #>  [3521] 68 6a 61 78 2f 32 2e 37 2e 35 2f 4d 61 74 68 4a 61 78 2e 6a 73 22 #>  [3543] 20 69 6e 74 65 67 72 69 74 79 3d 22 73 68 61 32 35 36 2d 6e 76 4a #>  [3565] 4a 76 39 77 57 4b 45 6d 38 38 71 76 6f 51 6c 39 65 6b 4c 32 4a 2b #>  [3587] 6b 2f 52 57 49 73 61 53 53 63 78 78 6c 73 72 76 38 6b 3d 22 20 63 #>  [3609] 72 6f 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 #>  [3631] 3e 3c 2f 73 63 72 69 70 74 3e 3c 73 63 72 69 70 74 20 73 72 63 3d #>  [3653] 22 68 74 74 70 73 3a 2f 2f 63 64 6e 6a 73 2e 63 6c 6f 75 64 66 6c #>  [3675] 61 72 65 2e 63 6f 6d 2f 61 6a 61 78 2f 6c 69 62 73 2f 6d 61 74 68 #>  [3697] 6a 61 78 2f 32 2e 37 2e 35 2f 63 6f 6e 66 69 67 2f 54 65 58 2d 41 #>  [3719] 4d 53 2d 4d 4d 4c 5f 48 54 4d 4c 6f 72 4d 4d 4c 2e 6a 73 22 20 69 #>  [3741] 6e 74 65 67 72 69 74 79 3d 22 73 68 61 32 35 36 2d 38 34 44 4b 58 #>  [3763] 56 4a 58 73 30 2f 46 38 4f 54 4d 7a 58 34 55 52 39 30 39 2b 6a 74 #>  [3785] 6c 34 47 37 53 50 79 70 50 61 76 46 2b 47 66 41 3d 22 20 63 72 6f #>  [3807] 73 73 6f 72 69 67 69 6e 3d 22 61 6e 6f 6e 79 6d 6f 75 73 22 3e 3c #>  [3829] 2f 73 63 72 69 70 74 3e 3c 21 2d 2d 5b 69 66 20 6c 74 20 49 45 20 #>  [3851] 39 5d 3e 0a 3c 73 63 72 69 70 74 20 73 72 63 3d 22 68 74 74 70 73 #>  [3873] 3a 2f 2f 6f 73 73 2e 6d 61 78 63 64 6e 2e 63 6f 6d 2f 68 74 6d 6c #>  [3895] 35 73 68 69 76 2f 33 2e 37 2e 33 2f 68 74 6d 6c 35 73 68 69 76 2e #>  [3917] 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e 0a 3c 73 63 72 #>  [3939] 69 70 74 20 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 6f 73 73 2e 6d #>  [3961] 61 78 63 64 6e 2e 63 6f 6d 2f 72 65 73 70 6f 6e 64 2f 31 2e 34 2e #>  [3983] 32 2f 72 65 73 70 6f 6e 64 2e 6d 69 6e 2e 6a 73 22 3e 3c 2f 73 63 #>  [4005] 72 69 70 74 3e 0a 3c 21 5b 65 6e 64 69 66 5d 2d 2d 3e 3c 73 63 72 #>  [4027] 69 70 74 20 64 65 66 65 72 20 64 61 74 61 2d 64 6f 6d 61 69 6e 3d #>  [4049] 22 68 74 74 72 32 2e 72 2d 6c 69 62 2e 6f 72 67 2c 61 6c 6c 2e 74 #>  [4071] 69 64 79 76 65 72 73 65 2e 6f 72 67 22 20 73 72 63 3d 22 68 74 74 #>  [4093] 70 73 3a 2f 2f 70 6c 61 75 73 69 62 6c 65 2e 69 6f 2f 6a 73 2f 70 #>  [4115] 6c 61 75 73 69 62 6c 65 2e 6a 73 22 3e 3c 2f 73 63 72 69 70 74 3e #>  [4137] 0a 3c 2f 68 65 61 64 3e 0a 3c 62 6f 64 79 3e 0a 20 20 20 20 3c 61 #>  [4159] 20 68 72 65 66 3d 22 23 63 6f 6e 74 61 69 6e 65 72 22 20 63 6c 61 #>  [4181] 73 73 3d 22 76 69 73 75 61 6c 6c 79 2d 68 69 64 64 65 6e 2d 66 6f #>  [4203] 63 75 73 61 62 6c 65 22 3e 53 6b 69 70 20 74 6f 20 63 6f 6e 74 65 #>  [4225] 6e 74 3c 2f 61 3e 0a 20 20 20 20 0a 0a 20 20 20 20 3c 6e 61 76 20 #>  [4247] 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 20 66 69 78 65 64 2d 74 6f #>  [4269] 70 20 6e 61 76 62 61 72 2d 6c 69 67 68 74 20 6e 61 76 62 61 72 2d #>  [4291] 65 78 70 61 6e 64 2d 6c 67 20 62 67 2d 6e 6f 6e 65 22 3e 3c 64 69 #>  [4313] 76 20 63 6c 61 73 73 3d 22 63 6f 6e 74 61 69 6e 65 72 22 3e 0a 20 #>  [4335] 20 20 20 0a 20 20 20 20 3c 61 20 63 6c 61 73 73 3d 22 6e 61 76 62 #>  [4357] 61 72 2d 62 72 61 6e 64 20 6d 65 2d 32 22 20 68 72 65 66 3d 22 69 #>  [4379] 6e 64 65 78 2e 68 74 6d 6c 22 3e 68 74 74 72 32 3c 2f 61 3e 0a 0a #>  [4401] 20 20 20 20 3c 73 6d 61 6c 6c 20 63 6c 61 73 73 3d 22 6e 61 76 2d #>  [4423] 74 65 78 74 20 74 65 78 74 2d 6d 75 74 65 64 20 6d 65 2d 61 75 74 #>  [4445] 6f 22 20 64 61 74 61 2d 62 73 2d 74 6f 67 67 6c 65 3d 22 74 6f 6f #>  [4467] 6c 74 69 70 22 20 64 61 74 61 2d 62 73 2d 70 6c 61 63 65 6d 65 6e #>  [4489] 74 3d 22 62 6f 74 74 6f 6d 22 20 74 69 74 6c 65 3d 22 22 3e 30 2e #>  [4511] 32 2e 33 2e 39 30 30 30 3c 2f 73 6d 61 6c 6c 3e 0a 0a 20 20 20 20 #>  [4533] 0a 20 20 20 20 3c 62 75 74 74 6f 6e 20 63 6c 61 73 73 3d 22 6e 61 #>  [4555] 76 62 61 72 2d 74 6f 67 67 6c 65 72 22 20 74 79 70 65 3d 22 62 75 #>  [4577] 74 74 6f 6e 22 20 64 61 74 61 2d 62 73 2d 74 6f 67 67 6c 65 3d 22 #>  [4599] 63 6f 6c 6c 61 70 73 65 22 20 64 61 74 61 2d 62 73 2d 74 61 72 67 #>  [4621] 65 74 3d 22 23 6e 61 76 62 61 72 22 20 61 72 69 61 2d 63 6f 6e 74 #>  [4643] 72 6f 6c 73 3d 22 6e 61 76 62 61 72 22 20 61 72 69 61 2d 65 78 70 #>  [4665] 61 6e 64 65 64 3d 22 66 61 6c 73 65 22 20 61 72 69 61 2d 6c 61 62 #>  [4687] 65 6c 3d 22 54 6f 67 67 6c 65 20 6e 61 76 69 67 61 74 69 6f 6e 22 #>  [4709] 3e 0a 20 20 20 20 20 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6e #>  [4731] 61 76 62 61 72 2d 74 6f 67 67 6c 65 72 2d 69 63 6f 6e 22 3e 3c 2f #>  [4753] 73 70 61 6e 3e 0a 20 20 20 20 3c 2f 62 75 74 74 6f 6e 3e 0a 0a 20 #>  [4775] 20 20 20 3c 64 69 76 20 69 64 3d 22 6e 61 76 62 61 72 22 20 63 6c #>  [4797] 61 73 73 3d 22 63 6f 6c 6c 61 70 73 65 20 6e 61 76 62 61 72 2d 63 #>  [4819] 6f 6c 6c 61 70 73 65 20 6d 73 2d 33 22 3e 0a 20 20 20 20 20 20 3c #>  [4841] 75 6c 20 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 2d 6e 61 76 20 6d #>  [4863] 65 2d 61 75 74 6f 22 3e 0a 3c 6c 69 20 63 6c 61 73 73 3d 22 6e 61 #>  [4885] 76 2d 69 74 65 6d 22 3e 0a 20 20 3c 61 20 63 6c 61 73 73 3d 22 6e #>  [4907] 61 76 2d 6c 69 6e 6b 22 20 68 72 65 66 3d 22 61 72 74 69 63 6c 65 #>  [4929] 73 2f 68 74 74 72 32 2e 68 74 6d 6c 22 3e 47 65 74 20 73 74 61 72 #>  [4951] 74 65 64 3c 2f 61 3e 0a 3c 2f 6c 69 3e 0a 3c 6c 69 20 63 6c 61 73 #>  [4973] 73 3d 22 6e 61 76 2d 69 74 65 6d 22 3e 0a 20 20 3c 61 20 63 6c 61 #>  [4995] 73 73 3d 22 6e 61 76 2d 6c 69 6e 6b 22 20 68 72 65 66 3d 22 72 65 #>  [5017] 66 65 72 65 6e 63 65 2f 69 6e 64 65 78 2e 68 74 6d 6c 22 3e 52 65 #>  [5039] 66 65 72 65 6e 63 65 3c 2f 61 3e 0a 3c 2f 6c 69 3e 0a 3c 6c 69 20 #>  [5061] 63 6c 61 73 73 3d 22 6e 61 76 2d 69 74 65 6d 20 64 72 6f 70 64 6f #>  [5083] 77 6e 22 3e 0a 20 20 3c 61 20 68 72 65 66 3d 22 23 22 20 63 6c 61 #>  [5105] 73 73 3d 22 6e 61 76 2d 6c 69 6e 6b 20 64 72 6f 70 64 6f 77 6e 2d #>  [5127] 74 6f 67 67 6c 65 22 20 64 61 74 61 2d 62 73 2d 74 6f 67 67 6c 65 #>  [5149] 3d 22 64 72 6f 70 64 6f 77 6e 22 20 72 6f 6c 65 3d 22 62 75 74 74 #>  [5171] 6f 6e 22 20 61 72 69 61 2d 65 78 70 61 6e 64 65 64 3d 22 66 61 6c #>  [5193] 73 65 22 20 61 72 69 61 2d 68 61 73 70 6f 70 75 70 3d 22 74 72 75 #>  [5215] 65 22 20 69 64 3d 22 64 72 6f 70 64 6f 77 6e 2d 61 72 74 69 63 6c #>  [5237] 65 73 22 3e 41 72 74 69 63 6c 65 73 3c 2f 61 3e 0a 20 20 3c 64 69 #>  [5259] 76 20 63 6c 61 73 73 3d 22 64 72 6f 70 64 6f 77 6e 2d 6d 65 6e 75 #>  [5281] 22 20 61 72 69 61 2d 6c 61 62 65 6c 6c 65 64 62 79 3d 22 64 72 6f #>  [5303] 70 64 6f 77 6e 2d 61 72 74 69 63 6c 65 73 22 3e 0a 20 20 20 20 3c #>  [5325] 61 20 63 6c 61 73 73 3d 22 64 72 6f 70 64 6f 77 6e 2d 69 74 65 6d #>  [5347] 22 20 68 72 65 66 3d 22 61 72 74 69 63 6c 65 73 2f 77 72 61 70 70 #>  [5369] 69 6e 67 2d 61 70 69 73 2e 68 74 6d 6c 22 3e 57 72 61 70 70 69 6e #>  [5391] 67 20 41 50 49 73 3c 2f 61 3e 0a 20 20 20 20 3c 61 20 63 6c 61 73 #>  [5413] 73 3d 22 64 72 6f 70 64 6f 77 6e 2d 69 74 65 6d 22 20 68 72 65 66 #>  [5435] 3d 22 61 72 74 69 63 6c 65 73 2f 6f 61 75 74 68 2e 68 74 6d 6c 22 #>  [5457] 3e 4f 41 75 74 68 3c 2f 61 3e 0a 20 20 3c 2f 64 69 76 3e 0a 3c 2f #>  [5479] 6c 69 3e 0a 3c 6c 69 20 63 6c 61 73 73 3d 22 6e 61 76 2d 69 74 65 #>  [5501] 6d 22 3e 0a 20 20 3c 61 20 63 6c 61 73 73 3d 22 6e 61 76 2d 6c 69 #>  [5523] 6e 6b 22 20 68 72 65 66 3d 22 6e 65 77 73 2f 69 6e 64 65 78 2e 68 #>  [5545] 74 6d 6c 22 3e 43 68 61 6e 67 65 6c 6f 67 3c 2f 61 3e 0a 3c 2f 6c #>  [5567] 69 3e 0a 20 20 20 20 20 20 3c 2f 75 6c 3e 0a 3c 66 6f 72 6d 20 63 #>  [5589] 6c 61 73 73 3d 22 66 6f 72 6d 2d 69 6e 6c 69 6e 65 20 6d 79 2d 32 #>  [5611] 20 6d 79 2d 6c 67 2d 30 22 20 72 6f 6c 65 3d 22 73 65 61 72 63 68 #>  [5633] 22 3e 0a 20 20 20 20 20 20 20 20 3c 69 6e 70 75 74 20 74 79 70 65 #>  [5655] 3d 22 73 65 61 72 63 68 22 20 63 6c 61 73 73 3d 22 66 6f 72 6d 2d #>  [5677] 63 6f 6e 74 72 6f 6c 20 6d 65 2d 73 6d 2d 32 22 20 61 72 69 61 2d #>  [5699] 6c 61 62 65 6c 3d 22 54 6f 67 67 6c 65 20 6e 61 76 69 67 61 74 69 #>  [5721] 6f 6e 22 20 6e 61 6d 65 3d 22 73 65 61 72 63 68 2d 69 6e 70 75 74 #>  [5743] 22 20 64 61 74 61 2d 73 65 61 72 63 68 2d 69 6e 64 65 78 3d 22 73 #>  [5765] 65 61 72 63 68 2e 6a 73 6f 6e 22 20 69 64 3d 22 73 65 61 72 63 68 #>  [5787] 2d 69 6e 70 75 74 22 20 70 6c 61 63 65 68 6f 6c 64 65 72 3d 22 53 #>  [5809] 65 61 72 63 68 20 66 6f 72 22 20 61 75 74 6f 63 6f 6d 70 6c 65 74 #>  [5831] 65 3d 22 6f 66 66 22 3e 0a 3c 2f 66 6f 72 6d 3e 0a 0a 20 20 20 20 #>  [5853] 20 20 3c 75 6c 20 63 6c 61 73 73 3d 22 6e 61 76 62 61 72 2d 6e 61 #>  [5875] 76 22 3e 0a 3c 6c 69 20 63 6c 61 73 73 3d 22 6e 61 76 2d 69 74 65 #>  [5897] 6d 22 3e 0a 20 20 3c 61 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e #>  [5919] 61 6c 2d 6c 69 6e 6b 20 6e 61 76 2d 6c 69 6e 6b 22 20 68 72 65 66 #>  [5941] 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 72 #>  [5963] 2d 6c 69 62 2f 68 74 74 72 32 2f 22 20 61 72 69 61 2d 6c 61 62 65 #>  [5985] 6c 3d 22 67 69 74 68 75 62 22 3e 0a 20 20 20 20 3c 73 70 61 6e 20 #>  [6007] 63 6c 61 73 73 3d 22 66 61 62 20 66 61 20 66 61 62 20 66 61 2d 67 #>  [6029] 69 74 68 75 62 20 66 61 2d 6c 67 22 3e 3c 2f 73 70 61 6e 3e 0a 20 #>  [6051] 20 20 20 20 0a 20 20 3c 2f 61 3e 0a 3c 2f 6c 69 3e 0a 20 20 20 20 #>  [6073] 20 20 3c 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a 20 20 20 20 0a 20 #>  [6095] 20 3c 2f 64 69 76 3e 0a 3c 2f 6e 61 76 3e 3c 64 69 76 20 63 6c 61 #>  [6117] 73 73 3d 22 63 6f 6e 74 61 69 6e 65 72 20 74 65 6d 70 6c 61 74 65 #>  [6139] 2d 68 6f 6d 65 22 20 69 64 3d 22 63 6f 6e 74 61 69 6e 65 72 22 3e #>  [6161] 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 72 6f 77 22 3e 0a 20 20 3c #>  [6183] 6d 61 69 6e 20 69 64 3d 22 6d 61 69 6e 22 20 63 6c 61 73 73 3d 22 #>  [6205] 63 6f 6c 2d 6d 64 2d 39 22 3e 3c 64 69 76 20 63 6c 61 73 73 3d 22 #>  [6227] 73 65 63 74 69 6f 6e 20 6c 65 76 65 6c 31 22 3e 0a 3c 64 69 76 20 #>  [6249] 63 6c 61 73 73 3d 22 70 61 67 65 2d 68 65 61 64 65 72 22 3e 3c 68 #>  [6271] 31 20 69 64 3d 22 68 74 74 72 32 22 3e 68 74 74 72 32 3c 61 20 63 #>  [6293] 6c 61 73 73 3d 22 61 6e 63 68 6f 72 22 20 61 72 69 61 2d 6c 61 62 #>  [6315] 65 6c 3d 22 61 6e 63 68 6f 72 22 20 68 72 65 66 3d 22 23 68 74 74 #>  [6337] 72 32 22 3e 3c 2f 61 3e 0a 3c 2f 68 31 3e 3c 2f 64 69 76 3e 0a 3c #>  [6359] 21 2d 2d 20 62 61 64 67 65 73 3a 20 73 74 61 72 74 20 2d 2d 3e 0a #>  [6381] 0a 3c 70 3e 68 74 74 72 32 20 69 73 20 61 20 67 72 6f 75 6e 64 2d #>  [6403] 75 70 20 72 65 77 72 69 74 65 20 6f 66 20 3c 61 20 68 72 65 66 3d #>  [6425] 22 68 74 74 70 73 3a 2f 2f 68 74 74 72 2e 72 2d 6c 69 62 2e 6f 72 #>  [6447] 67 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e #>  [6469] 6b 22 3e 68 74 74 72 3c 2f 61 3e 20 74 68 61 74 20 70 72 6f 76 69 #>  [6491] 64 65 73 20 61 20 70 69 70 65 61 62 6c 65 20 41 50 49 20 77 69 74 #>  [6513] 68 20 61 6e 20 65 78 70 6c 69 63 69 74 20 72 65 71 75 65 73 74 20 #>  [6535] 6f 62 6a 65 63 74 20 74 68 61 74 20 73 6f 6c 76 65 73 20 6d 6f 72 #>  [6557] 65 20 70 72 6f 62 6c 65 6d 73 20 66 65 6c 74 20 62 79 20 70 61 63 #>  [6579] 6b 61 67 65 73 20 74 68 61 74 20 77 72 61 70 20 41 50 49 73 20 28 #>  [6601] 65 2e 67 2e c2 a0 62 75 69 6c 74 2d 69 6e 20 72 61 74 65 2d 6c 69 #>  [6623] 6d 69 74 69 6e 67 2c 20 72 65 74 72 69 65 73 2c 20 4f 41 75 74 68 #>  [6645] 2c 20 73 65 63 75 72 65 20 73 65 63 72 65 74 73 2c 20 61 6e 64 20 #>  [6667] 6d 6f 72 65 29 2e 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d #>  [6689] 22 73 65 63 74 69 6f 6e 20 6c 65 76 65 6c 32 22 3e 0a 3c 68 32 20 #>  [6711] 69 64 3d 22 69 6e 73 74 61 6c 6c 61 74 69 6f 6e 22 3e 49 6e 73 74 #>  [6733] 61 6c 6c 61 74 69 6f 6e 3c 61 20 63 6c 61 73 73 3d 22 61 6e 63 68 #>  [6755] 6f 72 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d 22 61 6e 63 68 6f 72 #>  [6777] 22 20 68 72 65 66 3d 22 23 69 6e 73 74 61 6c 6c 61 74 69 6f 6e 22 #>  [6799] 3e 3c 2f 61 3e 0a 3c 2f 68 32 3e 0a 3c 70 3e 59 6f 75 20 63 61 6e #>  [6821] 20 69 6e 73 74 61 6c 6c 20 68 74 74 72 20 66 72 6f 6d 20 43 52 41 #>  [6843] 4e 20 77 69 74 68 3a 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 73 73 #>  [6865] 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 20 69 64 3d 22 63 62 31 22 #>  [6887] 3e 3c 70 72 65 20 63 6c 61 73 73 3d 22 64 6f 77 6e 6c 69 74 20 73 #>  [6909] 6f 75 72 63 65 43 6f 64 65 20 72 22 3e 0a 3c 63 6f 64 65 20 63 6c #>  [6931] 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 20 52 22 3e 3c 73 70 #>  [6953] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 #>  [6975] 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 72 64 72 72 2e 69 6f #>  [6997] 2f 72 2f 75 74 69 6c 73 2f 69 6e 73 74 61 6c 6c 2e 70 61 63 6b 61 #>  [7019] 67 65 73 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 #>  [7041] 6e 61 6c 2d 6c 69 6e 6b 22 3e 69 6e 73 74 61 6c 6c 2e 70 61 63 6b #>  [7063] 61 67 65 73 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 #>  [7085] 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 #>  [7107] 6e 20 63 6c 61 73 73 3d 22 73 74 22 3e 22 68 74 74 72 32 22 3c 2f #>  [7129] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e #>  [7151] 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 3e #>  [7173] 3c 2f 70 72 65 3e 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 #>  [7195] 69 76 20 63 6c 61 73 73 3d 22 73 65 63 74 69 6f 6e 20 6c 65 76 65 #>  [7217] 6c 32 22 3e 0a 3c 68 32 20 69 64 3d 22 75 73 61 67 65 22 3e 55 73 #>  [7239] 61 67 65 3c 61 20 63 6c 61 73 73 3d 22 61 6e 63 68 6f 72 22 20 61 #>  [7261] 72 69 61 2d 6c 61 62 65 6c 3d 22 61 6e 63 68 6f 72 22 20 68 72 65 #>  [7283] 66 3d 22 23 75 73 61 67 65 22 3e 3c 2f 61 3e 0a 3c 2f 68 32 3e 0a #>  [7305] 3c 70 3e 54 6f 20 75 73 65 20 68 74 74 72 32 2c 20 73 74 61 72 74 #>  [7327] 20 62 79 20 63 72 65 61 74 69 6e 67 20 61 20 3c 73 74 72 6f 6e 67 #>  [7349] 3e 72 65 71 75 65 73 74 3c 2f 73 74 72 6f 6e 67 3e 3a 3c 2f 70 3e #>  [7371] 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 #>  [7393] 65 22 20 69 64 3d 22 63 62 32 22 3e 3c 70 72 65 20 63 6c 61 73 73 #>  [7415] 3d 22 64 6f 77 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 #>  [7437] 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 #>  [7459] 43 6f 64 65 20 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [7481] 61 73 73 3d 22 6b 77 22 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 #>  [7503] 73 3a 2f 2f 72 64 72 72 2e 69 6f 2f 72 2f 62 61 73 65 2f 6c 69 62 #>  [7525] 72 61 72 79 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 #>  [7547] 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 6c 69 62 72 61 72 79 3c 2f 61 3e #>  [7569] 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 #>  [7591] 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [7613] 22 76 61 22 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f #>  [7635] 68 74 74 72 32 2e 72 2d 6c 69 62 2e 6f 72 67 22 3e 68 74 74 72 32 #>  [7657] 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [7679] 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a #>  [7701] 3c 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 #>  [7723] 70 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 #>  [7745] 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 26 #>  [7767] 6c 74 3b 2d 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 #>  [7789] 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 #>  [7811] 6e 63 65 2f 72 65 71 75 65 73 74 2e 68 74 6d 6c 22 3e 72 65 71 75 #>  [7833] 65 73 74 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [7855] 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e #>  [7877] 20 63 6c 61 73 73 3d 22 73 74 22 3e 22 68 74 74 70 73 3a 2f 2f 72 #>  [7899] 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 22 3c 2f 73 70 61 6e 3e 3c 73 #>  [7921] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e #>  [7943] 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 #>  [7965] 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 3c 2f #>  [7987] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #>  [8009] 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 32 #>  [8031] 5f 72 65 71 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 #>  [8053] 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [8075] 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 54 20 68 74 74 70 73 3a #>  [8097] 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 6e 3e #>  [8119] 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #>  [8141] 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 79 3a 20 65 #>  [8163] 6d 70 74 79 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f #>  [8185] 64 65 3e 3c 2f 70 72 65 3e 3c 2f 64 69 76 3e 0a 3c 70 3e 59 6f 75 #>  [8207] 20 63 61 6e 20 74 61 69 6c 6f 72 20 74 68 69 73 20 72 65 71 75 65 #>  [8229] 73 74 20 77 69 74 68 20 74 68 65 20 3c 63 6f 64 65 3e 72 65 71 5f #>  [8251] 3c 2f 63 6f 64 65 3e 20 66 61 6d 69 6c 79 20 6f 66 20 66 75 6e 63 #>  [8273] 74 69 6f 6e 73 3a 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d #>  [8295] 22 73 6f 75 72 63 65 43 6f 64 65 22 20 69 64 3d 22 63 62 33 22 3e #>  [8317] 3c 70 72 65 20 63 6c 61 73 73 3d 22 64 6f 77 6e 6c 69 74 20 73 6f #>  [8339] 75 72 63 65 43 6f 64 65 20 72 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 #>  [8361] 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 20 52 22 3e 3c 73 70 61 #>  [8383] 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 20 41 #>  [8405] 64 64 20 63 75 73 74 6f 6d 20 68 65 61 64 65 72 73 3c 2f 73 70 61 #>  [8427] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #>  [8449] 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 20 #>  [8471] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3c 61 20 68 72 #>  [8493] 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 70 69 70 65 2e 68 74 6d #>  [8515] 6c 22 3e 25 26 67 74 3b 25 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 20 3c #>  [8537] 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 #>  [8559] 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 68 65 61 64 65 #>  [8581] 72 73 2e 68 74 6d 6c 22 3e 72 65 71 5f 68 65 61 64 65 72 73 3c 2f #>  [8603] 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #>  [8625] 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #>  [8647] 73 3d 22 73 74 22 3e 22 41 63 63 65 70 74 22 3c 2f 73 70 61 6e 3e #>  [8669] 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 #>  [8691] 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 73 74 22 3e #>  [8713] 22 61 70 70 6c 69 63 61 74 69 6f 6e 2f 6a 73 6f 6e 22 3c 2f 73 70 #>  [8735] 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c #>  [8757] 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 #>  [8779] 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 #>  [8801] 6c 74 3b 68 74 74 72 32 5f 72 65 71 75 65 73 74 26 67 74 3b 3c 2f #>  [8823] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 #>  [8845] 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 #>  [8867] 54 20 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 #>  [8889] 67 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e #>  [8911] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b #>  [8933] 20 48 65 61 64 65 72 73 3a 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #>  [8955] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 #>  [8977] 6f 22 3e 23 26 67 74 3b 20 e2 80 a2 20 41 63 63 65 70 74 3a 20 27 #>  [8999] 61 70 70 6c 69 63 61 74 69 6f 6e 2f 6a 73 6f 6e 27 3c 2f 73 70 61 #>  [9021] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #>  [9043] 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 79 3a #>  [9065] 20 65 6d 70 74 79 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c #>  [9087] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 #>  [9109] 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 20 41 64 64 20 61 20 #>  [9131] 62 6f 64 79 2c 20 74 75 72 6e 69 6e 67 20 69 74 20 69 6e 74 6f 20 #>  [9153] 61 20 50 4f 53 54 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c #>  [9175] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e #>  [9197] 72 65 71 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [9219] 3d 22 6f 70 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e #>  [9241] 63 65 2f 70 69 70 65 2e 68 74 6d 6c 22 3e 25 26 67 74 3b 25 3c 2f #>  [9263] 61 3e 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [9285] 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 #>  [9307] 65 2f 72 65 71 5f 62 6f 64 79 2e 68 74 6d 6c 22 3e 72 65 71 5f 62 #>  [9329] 6f 64 79 5f 6a 73 6f 6e 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 #>  [9351] 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e #>  [9373] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 #>  [9395] 65 66 3d 22 68 74 74 70 73 3a 2f 2f 72 64 72 72 2e 69 6f 2f 72 2f #>  [9417] 62 61 73 65 2f 6c 69 73 74 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d #>  [9439] 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 6c 69 73 74 3c 2f #>  [9461] 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #>  [9483] 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 78 20 3c 73 70 61 6e 20 63 6c #>  [9505] 61 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 #>  [9527] 6e 20 63 6c 61 73 73 3d 22 66 6c 22 3e 31 3c 2f 73 70 61 6e 3e 2c #>  [9549] 20 79 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3d 3c #>  [9571] 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 6c #>  [9593] 22 3e 32 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #>  [9615] 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #>  [9637] 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #>  [9659] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 #>  [9681] 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 32 5f 72 65 71 #>  [9703] 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e #>  [9725] 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f #>  [9747] 22 3e 23 26 67 74 3b 20 50 4f 53 54 20 68 74 74 70 73 3a 2f 2f 72 #>  [9769] 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 6e 3e 3c 2f 73 #>  [9791] 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #>  [9813] 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 79 3a 20 6a 73 6f 6e #>  [9835] 20 65 6e 63 6f 64 65 64 20 64 61 74 61 3c 2f 73 70 61 6e 3e 3c 2f #>  [9857] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 #>  [9879] 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 #>  [9901] 20 41 75 74 6f 6d 61 74 69 63 61 6c 6c 79 20 72 65 74 72 79 20 69 #>  [9923] 66 20 74 68 65 20 72 65 71 75 65 73 74 20 66 61 69 6c 73 3c 2f 73 #>  [9945] 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 #>  [9967] 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e #>  [9989] 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3c 61 20 #> [10011] 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 70 69 70 65 2e 68 #> [10033] 74 6d 6c 22 3e 25 26 67 74 3b 25 3c 2f 61 3e 3c 2f 73 70 61 6e 3e #> [10055] 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 #> [10077] 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 72 65 74 #> [10099] 72 79 2e 68 74 6d 6c 22 3e 72 65 71 5f 72 65 74 72 79 3c 2f 61 3e #> [10121] 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 #> [10143] 22 3e 28 3c 2f 73 70 61 6e 3e 6d 61 78 5f 74 72 69 65 73 20 3c 73 #> [10165] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3d 3c 2f 73 70 61 6e #> [10187] 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 6c 22 3e 35 3c 2f #> [10209] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e #> [10231] 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e #> [10253] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b #> [10275] 20 26 6c 74 3b 68 74 74 72 32 5f 72 65 71 75 65 73 74 26 67 74 3b #> [10297] 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c #> [10319] 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 #> [10341] 47 45 54 20 68 74 74 70 73 3a 2f 2f 72 2d 70 72 6f 6a 65 63 74 2e #> [10363] 6f 72 67 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 #> [10385] 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 #> [10407] 74 3b 20 42 6f 64 79 3a 20 65 6d 70 74 79 3c 2f 73 70 61 6e 3e 3c #> [10429] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [10451] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 50 6f 6c 69 63 69 65 73 #> [10473] 3a 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e #> [10495] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b #> [10517] 20 e2 80 a2 20 72 65 74 72 79 5f 6d 61 78 5f 74 72 69 65 73 3a 20 #> [10539] 35 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e #> [10561] 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #> [10583] 61 73 73 3d 22 63 6f 22 3e 23 20 43 68 61 6e 67 65 20 74 68 65 20 #> [10605] 48 54 54 50 20 6d 65 74 68 6f 64 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #> [10627] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [10649] 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 #> [10671] 63 6c 61 73 73 3d 22 6f 70 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 #> [10693] 66 65 72 65 6e 63 65 2f 70 69 70 65 2e 68 74 6d 6c 22 3e 25 26 67 #> [10715] 74 3b 25 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 #> [10737] 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 #> [10759] 65 72 65 6e 63 65 2f 72 65 71 5f 6d 65 74 68 6f 64 2e 68 74 6d 6c #> [10781] 22 3e 72 65 71 5f 6d 65 74 68 6f 64 3c 2f 61 3e 3c 2f 73 70 61 6e #> [10803] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 #> [10825] 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 73 74 22 3e 22 #> [10847] 50 41 54 43 48 22 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [10869] 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #> [10891] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 #> [10913] 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 32 5f 72 65 71 #> [10935] 75 65 73 74 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e #> [10957] 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f #> [10979] 22 3e 23 26 67 74 3b 20 50 41 54 43 48 20 68 74 74 70 73 3a 2f 2f #> [11001] 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 6e 3e 3c 2f #> [11023] 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #> [11045] 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 79 3a 20 65 6d 70 #> [11067] 74 79 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 #> [11089] 3e 3c 2f 70 72 65 3e 3c 2f 64 69 76 3e 0a 3c 70 3e 41 6e 64 20 73 #> [11111] 65 65 20 65 78 61 63 74 6c 79 20 77 68 61 74 20 68 74 74 72 32 20 #> [11133] 77 69 6c 6c 20 73 65 6e 64 20 74 6f 20 74 68 65 20 73 65 72 76 65 #> [11155] 72 20 77 69 74 68 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 #> [11177] 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 64 72 79 5f 72 75 6e 2e #> [11199] 68 74 6d 6c 22 3e 72 65 71 5f 64 72 79 5f 72 75 6e 28 29 3c 2f 61 #> [11221] 3e 3c 2f 63 6f 64 65 3e 3a 3c 2f 70 3e 0a 3c 64 69 76 20 63 6c 61 #> [11243] 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 20 69 64 3d 22 63 62 #> [11265] 34 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d 22 64 6f 77 6e 6c 69 74 #> [11287] 20 73 6f 75 72 63 65 43 6f 64 65 20 72 22 3e 0a 3c 63 6f 64 65 20 #> [11309] 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 20 52 22 3e 3c #> [11331] 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 76 61 22 3e #> [11353] 72 65 71 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 #> [11375] 3d 22 6f 70 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e #> [11397] 63 65 2f 70 69 70 65 2e 68 74 6d 6c 22 3e 25 26 67 74 3b 25 3c 2f #> [11419] 61 3e 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [11441] 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 #> [11463] 65 2f 72 65 71 5f 64 72 79 5f 72 75 6e 2e 68 74 6d 6c 22 3e 72 65 #> [11485] 71 5f 64 72 79 5f 72 75 6e 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 #> [11507] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e #> [11529] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 #> [11551] 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 #> [11573] 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 54 #> [11595] 20 2f 20 48 54 54 50 2f 31 2e 31 3c 2f 73 70 61 6e 3e 3c 2f 73 70 #> [11617] 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [11639] 22 63 6f 22 3e 23 26 67 74 3b 20 48 6f 73 74 3a 20 72 2d 70 72 6f #> [11661] 6a 65 63 74 2e 6f 72 67 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e #> [11683] 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f #> [11705] 22 3e 23 26 67 74 3b 20 55 73 65 72 2d 41 67 65 6e 74 3a 20 68 74 #> [11727] 74 72 32 2f 30 2e 32 2e 32 2e 39 30 30 30 20 72 2d 63 75 72 6c 2f #> [11749] 35 2e 30 2e 30 20 6c 69 62 63 75 72 6c 2f 37 2e 38 37 2e 30 3c 2f #> [11771] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 #> [11793] 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 41 63 #> [11815] 63 65 70 74 3a 20 2a 2f 2a 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #> [11837] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 #> [11859] 6f 22 3e 23 26 67 74 3b 20 41 63 63 65 70 74 2d 45 6e 63 6f 64 69 #> [11881] 6e 67 3a 20 64 65 66 6c 61 74 65 2c 20 67 7a 69 70 3c 2f 73 70 61 #> [11903] 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 72 65 3e #> [11925] 3c 2f 64 69 76 3e 0a 3c 70 3e 55 73 65 20 3c 63 6f 64 65 3e 3c 61 #> [11947] 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 70 #> [11969] 65 72 66 6f 72 6d 2e 68 74 6d 6c 22 3e 72 65 71 5f 70 65 72 66 6f #> [11991] 72 6d 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 20 74 6f 20 70 65 72 #> [12013] 66 6f 72 6d 20 74 68 65 20 72 65 71 75 65 73 74 2c 20 72 65 74 72 #> [12035] 69 65 76 69 6e 67 20 61 20 3c 73 74 72 6f 6e 67 3e 72 65 73 70 6f #> [12057] 6e 73 65 3c 2f 73 74 72 6f 6e 67 3e 3a 3c 2f 70 3e 0a 3c 64 69 76 #> [12079] 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 22 20 69 64 #> [12101] 3d 22 63 62 35 22 3e 3c 70 72 65 20 63 6c 61 73 73 3d 22 64 6f 77 #> [12123] 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 22 3e 0a 3c 63 #> [12145] 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 65 20 #> [12167] 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 #> [12189] 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e 20 #> [12211] 63 6c 61 73 73 3d 22 6f 70 22 3e 26 6c 74 3b 2d 3c 2f 73 70 61 6e #> [12233] 3e 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 #> [12255] 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 70 65 #> [12277] 72 66 6f 72 6d 2e 68 74 6d 6c 22 3e 72 65 71 5f 70 65 72 66 6f 72 #> [12299] 6d 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 #> [12321] 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 #> [12343] 6c 61 73 73 3d 22 76 61 22 3e 72 65 71 3c 2f 73 70 61 6e 3e 3c 73 #> [12365] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e #> [12387] 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 #> [12409] 6c 61 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e 3c #> [12431] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [12453] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 74 72 #> [12475] 32 5f 72 65 73 70 6f 6e 73 65 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c #> [12497] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [12519] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 47 45 54 20 68 74 74 70 #> [12541] 73 3a 2f 2f 77 77 77 2e 72 2d 70 72 6f 6a 65 63 74 2e 6f 72 67 2f #> [12563] 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c #> [12585] 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 #> [12607] 53 74 61 74 75 73 3a 20 32 30 30 20 4f 4b 3c 2f 73 70 61 6e 3e 3c #> [12629] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [12651] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 43 6f 6e 74 65 6e 74 2d #> [12673] 54 79 70 65 3a 20 74 65 78 74 2f 68 74 6d 6c 3c 2f 73 70 61 6e 3e #> [12695] 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #> [12717] 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 42 6f 64 79 3a 20 49 #> [12739] 6e 20 6d 65 6d 6f 72 79 20 28 36 32 30 34 20 62 79 74 65 73 29 3c #> [12761] 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f #> [12783] 70 72 65 3e 3c 2f 64 69 76 3e 0a 3c 70 3e 54 68 65 20 3c 63 6f 64 #> [12805] 65 3e 72 65 73 70 5f 3c 2f 63 6f 64 65 3e 20 66 75 6e 63 74 69 6f #> [12827] 6e 73 20 68 65 6c 70 20 79 6f 75 20 65 78 74 72 61 63 74 20 76 61 #> [12849] 72 69 6f 75 73 20 75 73 65 66 75 6c 20 63 6f 6d 70 6f 6e 65 6e 74 #> [12871] 73 20 6f 66 20 74 68 65 20 72 65 73 70 6f 6e 73 65 3a 3c 2f 70 3e #> [12893] 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 43 6f 64 #> [12915] 65 22 20 69 64 3d 22 63 62 36 22 3e 3c 70 72 65 20 63 6c 61 73 73 #> [12937] 3d 22 64 6f 77 6e 6c 69 74 20 73 6f 75 72 63 65 43 6f 64 65 20 72 #> [12959] 22 3e 0a 3c 63 6f 64 65 20 63 6c 61 73 73 3d 22 73 6f 75 72 63 65 #> [12981] 43 6f 64 65 20 52 22 3e 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c #> [13003] 61 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e 20 3c #> [13025] 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3c 61 20 68 72 65 #> [13047] 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 70 69 70 65 2e 68 74 6d 6c #> [13069] 22 3e 25 26 67 74 3b 25 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 20 3c 73 #> [13091] 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 #> [13113] 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 73 70 5f 63 6f 6e 74 65 #> [13135] 6e 74 5f 74 79 70 65 2e 68 74 6d 6c 22 3e 72 65 73 70 5f 63 6f 6e #> [13157] 74 65 6e 74 5f 74 79 70 65 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 #> [13179] 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e #> [13201] 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 #> [13223] 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 #> [13245] 6e 20 63 6c 61 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 5b 31 5d #> [13267] 20 22 74 65 78 74 2f 68 74 6d 6c 22 3c 2f 73 70 61 6e 3e 3c 2f 73 #> [13289] 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 #> [13311] 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 #> [13333] 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3c 61 20 68 72 65 66 3d 22 #> [13355] 72 65 66 65 72 65 6e 63 65 2f 70 69 70 65 2e 68 74 6d 6c 22 3e 25 #> [13377] 26 67 74 3b 25 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 20 3c 73 70 61 6e #> [13399] 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 65 66 3d 22 72 #> [13421] 65 66 65 72 65 6e 63 65 2f 72 65 73 70 5f 73 74 61 74 75 73 2e 68 #> [13443] 74 6d 6c 22 3e 72 65 73 70 5f 73 74 61 74 75 73 5f 64 65 73 63 3c #> [13465] 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d #> [13487] 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [13509] 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #> [13531] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 #> [13553] 6f 22 3e 23 26 67 74 3b 20 5b 31 5d 20 22 4f 4b 22 3c 2f 73 70 61 #> [13575] 6e 3e 3c 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 #> [13597] 63 6c 61 73 73 3d 22 76 61 22 3e 72 65 73 70 3c 2f 73 70 61 6e 3e #> [13619] 20 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 3c 61 20 68 #> [13641] 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 70 69 70 65 2e 68 74 #> [13663] 6d 6c 22 3e 25 26 67 74 3b 25 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 20 #> [13685] 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 66 75 22 3e 3c 61 20 68 72 #> [13707] 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 73 70 5f 62 6f 64 #> [13729] 79 5f 72 61 77 2e 68 74 6d 6c 22 3e 72 65 73 70 5f 62 6f 64 79 5f #> [13751] 68 74 6d 6c 3c 2f 61 3e 3c 2f 73 70 61 6e 3e 3c 73 70 61 6e 20 63 #> [13773] 6c 61 73 73 3d 22 6f 70 22 3e 28 3c 2f 73 70 61 6e 3e 3c 73 70 61 #> [13795] 6e 20 63 6c 61 73 73 3d 22 6f 70 22 3e 29 3c 2f 73 70 61 6e 3e 3c #> [13817] 2f 73 70 61 6e 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 #> [13839] 73 73 3d 22 63 6f 22 3e 23 26 67 74 3b 20 7b 68 74 6d 6c 5f 64 6f #> [13861] 63 75 6d 65 6e 74 7d 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a #> [13883] 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 #> [13905] 3e 23 26 67 74 3b 20 26 6c 74 3b 68 74 6d 6c 20 6c 61 6e 67 3d 22 #> [13927] 65 6e 22 26 67 74 3b 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 0a #> [13949] 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 6f 22 #> [13971] 3e 23 26 67 74 3b 20 5b 31 5d 20 26 6c 74 3b 68 65 61 64 26 67 74 #> [13993] 3b 5c 6e 26 6c 74 3b 6d 65 74 61 20 68 74 74 70 2d 65 71 75 69 76 #> [14015] 3d 22 43 6f 6e 74 65 6e 74 2d 54 79 70 65 22 20 63 6f 6e 74 65 6e #> [14037] 74 3d 22 74 65 78 74 2f 68 74 6d 6c 3b 20 63 68 61 72 73 65 74 3d #> [14059] 55 54 46 2d 38 20 2e 2e 2e 3c 2f 73 70 61 6e 3e 3c 2f 73 70 61 6e #> [14081] 3e 0a 3c 73 70 61 6e 3e 3c 73 70 61 6e 20 63 6c 61 73 73 3d 22 63 #> [14103] 6f 22 3e 23 26 67 74 3b 20 5b 32 5d 20 26 6c 74 3b 62 6f 64 79 26 #> [14125] 67 74 3b 5c 6e 20 20 20 20 26 6c 74 3b 64 69 76 20 63 6c 61 73 73 #> [14147] 3d 22 63 6f 6e 74 61 69 6e 65 72 20 70 61 67 65 22 26 67 74 3b 5c #> [14169] 6e 20 20 20 20 20 20 26 6c 74 3b 64 69 76 20 63 6c 61 73 73 3d 22 #> [14191] 72 6f 77 22 26 67 74 3b 5c 6e 20 20 20 20 20 20 20 2e 2e 2e 3c 2f #> [14213] 73 70 61 6e 3e 3c 2f 73 70 61 6e 3e 3c 2f 63 6f 64 65 3e 3c 2f 70 #> [14235] 72 65 3e 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69 76 20 #> [14257] 63 6c 61 73 73 3d 22 73 65 63 74 69 6f 6e 20 6c 65 76 65 6c 32 22 #> [14279] 3e 0a 3c 68 32 20 69 64 3d 22 6d 61 6a 6f 72 2d 64 69 66 66 65 72 #> [14301] 65 6e 63 65 73 2d 74 6f 2d 68 74 74 72 22 3e 4d 61 6a 6f 72 20 64 #> [14323] 69 66 66 65 72 65 6e 63 65 73 20 74 6f 20 68 74 74 72 3c 61 20 63 #> [14345] 6c 61 73 73 3d 22 61 6e 63 68 6f 72 22 20 61 72 69 61 2d 6c 61 62 #> [14367] 65 6c 3d 22 61 6e 63 68 6f 72 22 20 68 72 65 66 3d 22 23 6d 61 6a #> [14389] 6f 72 2d 64 69 66 66 65 72 65 6e 63 65 73 2d 74 6f 2d 68 74 74 72 #> [14411] 22 3e 3c 2f 61 3e 0a 3c 2f 68 32 3e 0a 3c 75 6c 3e 0a 3c 6c 69 3e #> [14433] 3c 70 3e 59 6f 75 20 63 61 6e 20 6e 6f 77 20 63 72 65 61 74 65 20 #> [14455] 61 6e 64 20 6d 6f 64 69 66 79 20 61 20 72 65 71 75 65 73 74 20 77 #> [14477] 69 74 68 6f 75 74 20 70 65 72 66 6f 72 6d 69 6e 67 20 69 74 2e 20 #> [14499] 54 68 69 73 20 6d 65 61 6e 73 20 74 68 61 74 20 74 68 65 72 65 e2 #> [14521] 80 99 73 20 6e 6f 77 20 61 20 73 69 6e 67 6c 65 20 66 75 6e 63 74 #> [14543] 69 6f 6e 20 74 6f 20 70 65 72 66 6f 72 6d 20 74 68 65 20 72 65 71 #> [14565] 75 65 73 74 20 61 6e 64 20 66 65 74 63 68 20 74 68 65 20 72 65 73 #> [14587] 75 6c 74 3a 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 #> [14609] 66 65 72 65 6e 63 65 2f 72 65 71 5f 70 65 72 66 6f 72 6d 2e 68 74 #> [14631] 6d 6c 22 3e 72 65 71 5f 70 65 72 66 6f 72 6d 28 29 3c 2f 61 3e 3c #> [14653] 2f 63 6f 64 65 3e 2e 20 28 49 66 20 79 6f 75 20 77 61 6e 74 20 74 #> [14675] 6f 20 68 61 6e 64 6c 65 20 74 68 65 20 72 65 73 70 6f 6e 73 65 20 #> [14697] 61 73 20 69 74 20 73 74 72 65 61 6d 73 20 69 6e 2c 20 75 73 65 20 #> [14719] 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e #> [14741] 63 65 2f 72 65 71 5f 73 74 72 65 61 6d 2e 68 74 6d 6c 22 3e 72 65 #> [14763] 71 5f 73 74 72 65 61 6d 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 20 #> [14785] 69 6e 73 74 65 61 64 29 2e 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 #> [14807] 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 70 65 72 66 6f #> [14829] 72 6d 2e 68 74 6d 6c 22 3e 72 65 71 5f 70 65 72 66 6f 72 6d 28 29 #> [14851] 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 20 72 65 70 6c 61 63 65 73 20 3c #> [14873] 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f #> [14895] 68 74 74 72 2e 72 2d 6c 69 62 2e 6f 72 67 2f 72 65 66 65 72 65 6e #> [14917] 63 65 2f 47 45 54 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 #> [14939] 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 68 74 74 72 3a 3a 47 45 54 #> [14961] 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2c 20 3c 63 6f 64 65 3e 3c #> [14983] 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 68 74 74 72 2e 72 #> [15005] 2d 6c 69 62 2e 6f 72 67 2f 72 65 66 65 72 65 6e 63 65 2f 50 4f 53 #> [15027] 54 2e 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 #> [15049] 6c 2d 6c 69 6e 6b 22 3e 68 74 74 72 3a 3a 50 4f 53 54 28 29 3c 2f #> [15071] 61 3e 3c 2f 63 6f 64 65 3e 2c 20 3c 63 6f 64 65 3e 3c 61 20 68 72 #> [15093] 65 66 3d 22 68 74 74 70 73 3a 2f 2f 68 74 74 72 2e 72 2d 6c 69 62 #> [15115] 2e 6f 72 67 2f 72 65 66 65 72 65 6e 63 65 2f 44 45 4c 45 54 45 2e #> [15137] 68 74 6d 6c 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d #> [15159] 6c 69 6e 6b 22 3e 68 74 74 72 3a 3a 44 45 4c 45 54 45 28 29 3c 2f #> [15181] 61 3e 3c 2f 63 6f 64 65 3e 2c 20 61 6e 64 20 6d 6f 72 65 2e 3c 2f #> [15203] 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 70 3e 48 54 54 50 20 65 72 #> [15225] 72 6f 72 73 20 61 72 65 20 61 75 74 6f 6d 61 74 69 63 61 6c 6c 79 #> [15247] 20 63 6f 6e 76 65 72 74 65 64 20 69 6e 74 6f 20 52 20 65 72 72 6f #> [15269] 72 73 2e 20 55 73 65 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d #> [15291] 22 72 65 66 65 72 65 6e 63 65 2f 72 65 71 5f 65 72 72 6f 72 2e 68 #> [15313] 74 6d 6c 22 3e 72 65 71 5f 65 72 72 6f 72 28 29 3c 2f 61 3e 3c 2f #> [15335] 63 6f 64 65 3e 20 74 6f 20 6f 76 65 72 72 69 64 65 20 74 68 65 20 #> [15357] 64 65 66 61 75 6c 74 73 20 28 77 68 69 63 68 20 74 75 72 6e 20 61 #> [15379] 6c 6c 20 34 78 78 20 61 6e 64 20 35 78 78 20 72 65 73 70 6f 6e 73 #> [15401] 65 73 20 69 6e 74 6f 20 65 72 72 6f 72 73 29 20 6f 72 20 74 6f 20 #> [15423] 61 64 64 20 61 64 64 69 74 69 6f 6e 61 6c 20 64 65 74 61 69 6c 73 #> [15445] 20 74 6f 20 74 68 65 20 65 72 72 6f 72 20 6d 65 73 73 61 67 65 2e #> [15467] 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 70 3e 59 6f 75 20 63 #> [15489] 61 6e 20 61 75 74 6f 6d 61 74 69 63 61 6c 6c 79 20 72 65 74 72 79 #> [15511] 20 69 66 20 74 68 65 20 72 65 71 75 65 73 74 20 66 61 69 6c 73 20 #> [15533] 6f 72 20 65 6e 63 6f 75 6e 74 65 72 73 20 61 20 74 72 61 6e 73 69 #> [15555] 65 6e 74 20 48 54 54 50 20 65 72 72 6f 72 20 28 65 2e 67 2e c2 a0 #> [15577] 61 20 34 32 39 20 72 61 74 65 20 6c 69 6d 69 74 20 72 65 71 75 65 #> [15599] 73 74 29 2e 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 #> [15621] 66 65 72 65 6e 63 65 2f 72 65 71 5f 72 65 74 72 79 2e 68 74 6d 6c #> [15643] 22 3e 72 65 71 5f 72 65 74 72 79 28 29 3c 2f 61 3e 3c 2f 63 6f 64 #> [15665] 65 3e 20 64 65 66 69 6e 65 73 20 74 68 65 20 6d 61 78 69 6d 75 6d #> [15687] 20 6e 75 6d 62 65 72 20 6f 66 20 72 65 74 72 69 65 73 2c 20 77 68 #> [15709] 69 63 68 20 65 72 72 6f 72 73 20 61 72 65 20 74 72 61 6e 73 69 65 #> [15731] 6e 74 2c 20 61 6e 64 20 68 6f 77 20 6c 6f 6e 67 20 74 6f 20 77 61 #> [15753] 69 74 20 62 65 74 77 65 65 6e 20 74 72 69 65 73 2e 3c 2f 70 3e 3c #> [15775] 2f 6c 69 3e 0a 3c 6c 69 3e 3c 70 3e 4f 41 75 74 68 20 73 75 70 70 #> [15797] 6f 72 74 20 68 61 73 20 62 65 65 6e 20 74 6f 74 61 6c 6c 79 20 6f #> [15819] 76 65 72 68 61 75 6c 65 64 20 74 6f 20 64 69 72 65 63 74 6c 79 20 #> [15841] 73 75 70 70 6f 72 74 20 6d 61 6e 79 20 6d 6f 72 65 20 66 6c 6f 77 #> [15863] 73 20 61 6e 64 20 74 6f 20 6d 61 6b 65 20 69 74 20 6d 75 63 68 20 #> [15885] 65 61 73 69 65 72 20 74 6f 20 62 6f 74 68 20 63 75 73 74 6f 6d 69 #> [15907] 73 65 20 74 68 65 20 62 75 69 6c 74 2d 69 6e 20 66 6c 6f 77 73 20 #> [15929] 61 6e 64 20 74 6f 20 63 72 65 61 74 65 20 79 6f 75 72 20 6f 77 6e #> [15951] 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 70 3e 59 6f 75 20 #> [15973] 63 61 6e 20 6d 61 6e 61 67 65 20 73 65 63 72 65 74 73 20 28 6f 66 #> [15995] 74 65 6e 20 6e 65 65 64 65 64 20 66 6f 72 20 74 65 73 74 69 6e 67 #> [16017] 29 20 77 69 74 68 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 #> [16039] 72 65 66 65 72 65 6e 63 65 2f 73 65 63 72 65 74 73 2e 68 74 6d 6c #> [16061] 22 3e 73 65 63 72 65 74 5f 65 6e 63 72 79 70 74 28 29 3c 2f 61 3e #> [16083] 3c 2f 63 6f 64 65 3e 20 61 6e 64 20 66 72 69 65 6e 64 73 2e 20 59 #> [16105] 6f 75 20 63 61 6e 20 6f 62 66 75 73 63 61 74 65 20 6d 69 6c 64 6c #> [16127] 79 20 63 6f 6e 66 69 64 65 6e 74 69 61 6c 20 64 61 74 61 20 77 69 #> [16149] 74 68 20 3c 63 6f 64 65 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 #> [16171] 72 65 6e 63 65 2f 6f 62 66 75 73 63 61 74 65 2e 68 74 6d 6c 22 3e #> [16193] 6f 62 66 75 73 63 61 74 65 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e #> [16215] 2c 20 70 72 65 76 65 6e 74 69 6e 67 20 69 74 20 66 72 6f 6d 20 62 #> [16237] 65 69 6e 67 20 73 63 72 61 70 65 64 20 66 72 6f 6d 20 70 75 62 6c #> [16259] 69 73 68 65 64 20 63 6f 64 65 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c #> [16281] 6c 69 3e 3c 70 3e 59 6f 75 20 63 61 6e 20 61 75 74 6f 6d 61 74 69 #> [16303] 63 61 6c 6c 79 20 63 61 63 68 65 20 61 6c 6c 20 63 61 63 68 65 61 #> [16325] 62 6c 65 20 72 65 73 75 6c 74 73 20 77 69 74 68 20 3c 63 6f 64 65 #> [16347] 3e 3c 61 20 68 72 65 66 3d 22 72 65 66 65 72 65 6e 63 65 2f 72 65 #> [16369] 71 5f 63 61 63 68 65 2e 68 74 6d 6c 22 3e 72 65 71 5f 63 61 63 68 #> [16391] 65 28 29 3c 2f 61 3e 3c 2f 63 6f 64 65 3e 2e 20 52 65 6c 61 74 69 #> [16413] 76 65 6c 79 20 66 65 77 20 41 50 49 20 72 65 73 70 6f 6e 73 65 73 #> [16435] 20 61 72 65 20 63 61 63 68 65 61 62 6c 65 2c 20 62 75 74 20 77 68 #> [16457] 65 6e 20 74 68 65 79 20 61 72 65 20 69 74 20 74 79 70 69 63 61 6c #> [16479] 6c 79 20 6d 61 6b 65 73 20 61 20 62 69 67 20 64 69 66 66 65 72 65 #> [16501] 6e 63 65 2e 3c 2f 70 3e 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f #> [16523] 64 69 76 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 65 63 74 69 #> [16545] 6f 6e 20 6c 65 76 65 6c 32 22 3e 0a 3c 68 32 20 69 64 3d 22 61 63 #> [16567] 6b 6e 6f 77 6c 65 64 67 65 6d 65 6e 74 73 22 3e 41 63 6b 6e 6f 77 #> [16589] 6c 65 64 67 65 6d 65 6e 74 73 3c 61 20 63 6c 61 73 73 3d 22 61 6e #> [16611] 63 68 6f 72 22 20 61 72 69 61 2d 6c 61 62 65 6c 3d 22 61 6e 63 68 #> [16633] 6f 72 22 20 68 72 65 66 3d 22 23 61 63 6b 6e 6f 77 6c 65 64 67 65 #> [16655] 6d 65 6e 74 73 22 3e 3c 2f 61 3e 0a 3c 2f 68 32 3e 0a 3c 70 3e 68 #> [16677] 74 74 72 32 20 77 6f 75 6c 64 6e e2 80 99 74 20 62 65 20 70 6f 73 #> [16699] 73 69 62 6c 65 20 77 69 74 68 6f 75 74 20 3c 61 20 68 72 65 66 3d #> [16721] 22 68 74 74 70 73 3a 2f 2f 6a 65 72 6f 65 6e 2e 63 72 61 6e 2e 64 #> [16743] 65 76 2f 63 75 72 6c 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 #> [16765] 6e 61 6c 2d 6c 69 6e 6b 22 3e 63 75 72 6c 3c 2f 61 3e 2c 20 3c 61 #> [16787] 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e #> [16809] 63 6f 6d 2f 6a 65 72 6f 65 6e 2f 6f 70 65 6e 73 73 6c 2f 22 20 63 #> [16831] 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 6f #> [16853] 70 65 6e 73 73 6c 3c 2f 61 3e 2c 20 3c 61 20 68 72 65 66 3d 22 68 #> [16875] 74 74 70 73 3a 2f 2f 6a 65 72 6f 65 6e 2e 63 72 61 6e 2e 64 65 76 #> [16897] 2f 6a 73 6f 6e 6c 69 74 65 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 #> [16919] 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 6a 73 6f 6e 6c 69 74 65 3c 2f #> [16941] 61 3e 2c 20 61 6e 64 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 #> [16963] 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 72 2d 6c 69 62 2f 6a 6f #> [16985] 73 65 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c #> [17007] 69 6e 6b 22 3e 6a 6f 73 65 3c 2f 61 3e 2c 20 77 68 69 63 68 20 61 #> [17029] 72 65 20 61 6c 6c 20 6d 61 69 6e 74 61 69 6e 65 64 20 62 79 20 3c #> [17051] 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 #> [17073] 2e 63 6f 6d 2f 6a 65 72 6f 65 6e 22 20 63 6c 61 73 73 3d 22 65 78 #> [17095] 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 4a 65 72 6f 65 6e 20 4f 6f #> [17117] 6d 73 3c 2f 61 3e 2e 20 41 20 62 69 67 20 74 68 61 6e 6b 73 20 61 #> [17139] 6c 73 6f 20 67 6f 20 74 6f 20 3c 61 20 68 72 65 66 3d 22 68 74 74 #> [17161] 70 73 3a 2f 2f 6a 65 6e 6e 79 62 72 79 61 6e 2e 6f 72 67 22 20 63 #> [17183] 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 4a #> [17205] 65 6e 6e 79 20 42 72 79 61 6e 3c 2f 61 3e 20 61 6e 64 20 3c 61 20 #> [17227] 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 72 65 73 65 61 72 63 68 #> [17249] 2e 67 6f 6f 67 6c 65 2f 70 65 6f 70 6c 65 2f 43 72 61 69 67 43 69 #> [17271] 74 72 6f 2f 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d #> [17293] 6c 69 6e 6b 22 3e 43 72 61 69 67 20 43 69 74 72 6f 3c 2f 61 3e 20 #> [17315] 77 68 6f 20 68 61 76 65 20 67 69 76 65 6e 20 6d 65 20 6d 75 63 68 #> [17337] 20 75 73 65 66 75 6c 20 66 65 65 64 62 61 63 6b 20 6f 6e 20 62 6f #> [17359] 74 68 20 74 68 65 20 64 65 73 69 67 6e 20 6f 66 20 74 68 65 20 69 #> [17381] 6e 74 65 72 6e 61 6c 73 20 61 6e 64 20 74 68 65 20 75 73 65 72 20 #> [17403] 66 61 63 69 6e 67 20 41 50 49 2e 3c 2f 70 3e 0a 3c 2f 64 69 76 3e #> [17425] 0a 3c 2f 64 69 76 3e 0a 20 20 3c 2f 6d 61 69 6e 3e 3c 61 73 69 64 #> [17447] 65 20 63 6c 61 73 73 3d 22 63 6f 6c 2d 6d 64 2d 33 22 3e 3c 64 69 #> [17469] 76 20 63 6c 61 73 73 3d 22 6c 69 6e 6b 73 22 3e 0a 3c 68 32 20 64 #> [17491] 61 74 61 2d 74 6f 63 2d 73 6b 69 70 3e 4c 69 6e 6b 73 3c 2f 68 32 #> [17513] 3e 0a 3c 75 6c 20 63 6c 61 73 73 3d 22 6c 69 73 74 2d 75 6e 73 74 #> [17535] 79 6c 65 64 22 3e 0a 3c 6c 69 3e 3c 61 20 68 72 65 66 3d 22 68 74 #> [17557] 74 70 73 3a 2f 2f 63 6c 6f 75 64 2e 72 2d 70 72 6f 6a 65 63 74 2e #> [17579] 6f 72 67 2f 70 61 63 6b 61 67 65 3d 68 74 74 72 32 22 20 63 6c 61 #> [17601] 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 56 69 65 #> [17623] 77 20 6f 6e 20 43 52 41 4e 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 6c 69 #> [17645] 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 #> [17667] 75 62 2e 63 6f 6d 2f 72 2d 6c 69 62 2f 68 74 74 72 32 2f 22 20 63 #> [17689] 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 42 #> [17711] 72 6f 77 73 65 20 73 6f 75 72 63 65 20 63 6f 64 65 3c 2f 61 3e 3c #> [17733] 2f 6c 69 3e 0a 3c 6c 69 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 #> [17755] 73 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 72 2d 6c 69 62 2f 68 #> [17777] 74 74 72 32 2f 69 73 73 75 65 73 22 20 63 6c 61 73 73 3d 22 65 78 #> [17799] 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 52 65 70 6f 72 74 20 61 20 #> [17821] 62 75 67 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f 64 #> [17843] 69 76 3e 0a 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 6c 69 63 65 6e #> [17865] 73 65 22 3e 0a 3c 68 32 20 64 61 74 61 2d 74 6f 63 2d 73 6b 69 70 #> [17887] 3e 4c 69 63 65 6e 73 65 3c 2f 68 32 3e 0a 3c 75 6c 20 63 6c 61 73 #> [17909] 73 3d 22 6c 69 73 74 2d 75 6e 73 74 79 6c 65 64 22 3e 0a 3c 6c 69 #> [17931] 3e 3c 61 20 68 72 65 66 3d 22 4c 49 43 45 4e 53 45 2e 68 74 6d 6c #> [17953] 22 3e 46 75 6c 6c 20 6c 69 63 65 6e 73 65 3c 2f 61 3e 3c 2f 6c 69 #> [17975] 3e 0a 3c 6c 69 3e 3c 73 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d 22 #> [17997] 68 74 74 70 73 3a 2f 2f 6f 70 65 6e 73 6f 75 72 63 65 2e 6f 72 67 #> [18019] 2f 6c 69 63 65 6e 73 65 73 2f 6d 69 74 2d 6c 69 63 65 6e 73 65 2e #> [18041] 70 68 70 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c #> [18063] 69 6e 6b 22 3e 4d 49 54 3c 2f 61 3e 20 2b 20 66 69 6c 65 20 3c 61 #> [18085] 20 68 72 65 66 3d 22 4c 49 43 45 4e 53 45 2d 74 65 78 74 2e 68 74 #> [18107] 6d 6c 22 3e 4c 49 43 45 4e 53 45 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c #> [18129] 3e 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a 0a #> [18151] 3c 64 69 76 20 63 6c 61 73 73 3d 22 63 69 74 61 74 69 6f 6e 22 3e #> [18173] 0a 3c 68 32 20 64 61 74 61 2d 74 6f 63 2d 73 6b 69 70 3e 43 69 74 #> [18195] 61 74 69 6f 6e 3c 2f 68 32 3e 0a 3c 75 6c 20 63 6c 61 73 73 3d 22 #> [18217] 6c 69 73 74 2d 75 6e 73 74 79 6c 65 64 22 3e 0a 3c 6c 69 3e 3c 61 #> [18239] 20 68 72 65 66 3d 22 61 75 74 68 6f 72 73 2e 68 74 6d 6c 23 63 69 #> [18261] 74 61 74 69 6f 6e 22 3e 43 69 74 69 6e 67 20 68 74 74 72 32 3c 2f #> [18283] 61 3e 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a #> [18305] 3c 64 69 76 20 63 6c 61 73 73 3d 22 64 65 76 65 6c 6f 70 65 72 73 #> [18327] 22 3e 0a 3c 68 32 20 64 61 74 61 2d 74 6f 63 2d 73 6b 69 70 3e 44 #> [18349] 65 76 65 6c 6f 70 65 72 73 3c 2f 68 32 3e 0a 3c 75 6c 20 63 6c 61 #> [18371] 73 73 3d 22 6c 69 73 74 2d 75 6e 73 74 79 6c 65 64 22 3e 0a 3c 6c #> [18393] 69 3e 0a 3c 61 20 68 72 65 66 3d 22 68 74 74 70 3a 2f 2f 68 61 64 #> [18415] 6c 65 79 2e 6e 7a 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 #> [18437] 6c 2d 6c 69 6e 6b 22 3e 48 61 64 6c 65 79 20 57 69 63 6b 68 61 6d #> [18459] 3c 2f 61 3e 20 3c 62 72 3e 3c 73 6d 61 6c 6c 20 63 6c 61 73 73 3d #> [18481] 22 72 6f 6c 65 73 22 3e 20 41 75 74 68 6f 72 2c 20 6d 61 69 6e 74 #> [18503] 61 69 6e 65 72 20 3c 2f 73 6d 61 6c 6c 3e 20 20 3c 2f 6c 69 3e 0a #> [18525] 3c 6c 69 3e 0a 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f #> [18547] 77 77 77 2e 72 73 74 75 64 69 6f 2e 63 6f 6d 22 20 63 6c 61 73 73 #> [18569] 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 3c 69 6d 67 20 #> [18591] 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e 74 69 64 79 76 #> [18613] 65 72 73 65 2e 6f 72 67 2f 72 73 74 75 64 69 6f 2d 6c 6f 67 6f 2e #> [18635] 73 76 67 22 20 61 6c 74 3d 22 52 53 74 75 64 69 6f 22 20 77 69 64 #> [18657] 74 68 3d 22 37 32 22 3e 3c 2f 61 3e 20 3c 62 72 3e 3c 73 6d 61 6c #> [18679] 6c 20 63 6c 61 73 73 3d 22 72 6f 6c 65 73 22 3e 20 43 6f 70 79 72 #> [18701] 69 67 68 74 20 68 6f 6c 64 65 72 2c 20 66 75 6e 64 65 72 20 3c 2f #> [18723] 73 6d 61 6c 6c 3e 20 20 3c 2f 6c 69 3e 0a 3c 6c 69 3e 3c 61 20 68 #> [18745] 72 65 66 3d 22 61 75 74 68 6f 72 73 2e 68 74 6d 6c 22 3e 4d 6f 72 #> [18767] 65 20 61 62 6f 75 74 20 61 75 74 68 6f 72 73 2e 2e 2e 3c 2f 61 3e #> [18789] 3c 2f 6c 69 3e 0a 3c 2f 75 6c 3e 0a 3c 2f 64 69 76 3e 0a 0a 3c 64 #> [18811] 69 76 20 63 6c 61 73 73 3d 22 64 65 76 2d 73 74 61 74 75 73 22 3e #> [18833] 0a 3c 68 32 20 64 61 74 61 2d 74 6f 63 2d 73 6b 69 70 3e 44 65 76 #> [18855] 20 73 74 61 74 75 73 3c 2f 68 32 3e 0a 3c 75 6c 20 63 6c 61 73 73 #> [18877] 3d 22 6c 69 73 74 2d 75 6e 73 74 79 6c 65 64 22 3e 0a 3c 6c 69 3e #> [18899] 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 #> [18921] 62 2e 63 6f 6d 2f 72 2d 6c 69 62 2f 68 74 74 72 32 2f 61 63 74 69 #> [18943] 6f 6e 73 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c #> [18965] 69 6e 6b 22 3e 3c 69 6d 67 20 73 72 63 3d 22 68 74 74 70 73 3a 2f #> [18987] 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 72 2d 6c 69 62 2f 68 74 74 72 #> [19009] 32 2f 77 6f 72 6b 66 6c 6f 77 73 2f 52 2d 43 4d 44 2d 63 68 65 63 #> [19031] 6b 2f 62 61 64 67 65 2e 73 76 67 22 20 61 6c 74 3d 22 52 2d 43 4d #> [19053] 44 2d 63 68 65 63 6b 22 3e 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 6c 69 #> [19075] 3e 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 61 70 70 2e #> [19097] 63 6f 64 65 63 6f 76 2e 69 6f 2f 67 68 2f 72 2d 6c 69 62 2f 68 74 #> [19119] 74 72 32 3f 62 72 61 6e 63 68 3d 6d 61 69 6e 22 20 63 6c 61 73 73 #> [19141] 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 3c 69 6d 67 20 #> [19163] 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 63 6f 64 65 63 6f 76 2e 69 #> [19185] 6f 2f 67 68 2f 72 2d 6c 69 62 2f 68 74 74 72 32 2f 62 72 61 6e 63 #> [19207] 68 2f 6d 61 69 6e 2f 67 72 61 70 68 2f 62 61 64 67 65 2e 73 76 67 #> [19229] 22 20 61 6c 74 3d 22 43 6f 64 65 63 6f 76 20 74 65 73 74 20 63 6f #> [19251] 76 65 72 61 67 65 22 3e 3c 2f 61 3e 3c 2f 6c 69 3e 0a 3c 2f 75 6c #> [19273] 3e 0a 3c 2f 64 69 76 3e 0a 0a 20 20 3c 2f 61 73 69 64 65 3e 0a 3c #> [19295] 2f 64 69 76 3e 0a 0a 0a 20 20 20 3c 2f 64 69 76 3e 0a 20 20 3c 66 #> [19317] 6f 6f 74 65 72 3e 3c 64 69 76 20 63 6c 61 73 73 3d 22 63 6f 6e 74 #> [19339] 61 69 6e 65 72 22 3e 0a 20 20 3c 64 69 76 20 63 6c 61 73 73 3d 22 #> [19361] 70 6b 67 64 6f 77 6e 2d 66 6f 6f 74 65 72 2d 6c 65 66 74 22 3e 0a #> [19383] 20 20 3c 70 3e 3c 2f 70 3e 0a 3c 70 3e 44 65 76 65 6c 6f 70 65 64 #> [19405] 20 62 79 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 3a 2f 2f 68 61 #> [19427] 64 6c 65 79 2e 6e 7a 22 20 63 6c 61 73 73 3d 22 65 78 74 65 72 6e #> [19449] 61 6c 2d 6c 69 6e 6b 22 3e 48 61 64 6c 65 79 20 57 69 63 6b 68 61 #> [19471] 6d 3c 2f 61 3e 2c 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a #> [19493] 2f 2f 77 77 77 2e 72 73 74 75 64 69 6f 2e 63 6f 6d 22 20 63 6c 61 #> [19515] 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 3c 69 6d #> [19537] 67 20 73 72 63 3d 22 68 74 74 70 73 3a 2f 2f 77 77 77 2e 74 69 64 #> [19559] 79 76 65 72 73 65 2e 6f 72 67 2f 72 73 74 75 64 69 6f 2d 6c 6f 67 #> [19581] 6f 2e 73 76 67 22 20 61 6c 74 3d 22 52 53 74 75 64 69 6f 22 20 77 #> [19603] 69 64 74 68 3d 22 37 32 22 3e 3c 2f 61 3e 2e 3c 2f 70 3e 0a 3c 2f #> [19625] 64 69 76 3e 0a 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 70 6b 67 64 #> [19647] 6f 77 6e 2d 66 6f 6f 74 65 72 2d 72 69 67 68 74 22 3e 0a 20 20 3c #> [19669] 70 3e 3c 2f 70 3e 0a 3c 70 3e 53 69 74 65 20 62 75 69 6c 74 20 77 #> [19691] 69 74 68 20 3c 61 20 68 72 65 66 3d 22 68 74 74 70 73 3a 2f 2f 70 #> [19713] 6b 67 64 6f 77 6e 2e 72 2d 6c 69 62 2e 6f 72 67 2f 22 20 63 6c 61 #> [19735] 73 73 3d 22 65 78 74 65 72 6e 61 6c 2d 6c 69 6e 6b 22 3e 70 6b 67 #> [19757] 64 6f 77 6e 3c 2f 61 3e 20 32 2e 30 2e 37 2e 3c 2f 70 3e 0a 3c 2f #> [19779] 64 69 76 3e 0a 0a 20 20 3c 2f 64 69 76 3e 3c 2f 66 6f 6f 74 65 72 #> [19801] 3e 0a 3c 2f 62 6f 64 79 3e 0a 3c 2f 68 74 6d 6c 3e 0a resp %>% resp_body_string() #> [1] \"<!DOCTYPE html>\\n<!-- Generated by pkgdown: do not edit by hand --><html lang=\\\"en\\\">\\n<head>\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n<meta charset=\\\"utf-8\\\">\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n<meta name=\\\"description\\\" content=\\\"Tools for creating and modifying HTTP requests, then\\n    performing them and processing the results. httr2 is a modern\\n    re-imagining of httr that uses a pipe-based interface and solves\\n    more of the problems that API wrapping packages face.\\\">\\n<title>Perform HTTP Requests and Process the Responses • httr2<\/title>\\n<script src=\\\"deps/jquery-3.6.0/jquery-3.6.0.min.js\\\"><\/script><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\\n<link href=\\\"deps/bootstrap-5.2.2/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\n<script src=\\\"deps/bootstrap-5.2.2/bootstrap.bundle.min.js\\\"><\/script><link href=\\\"deps/Source_Sans_Pro-0.4.7/font.css\\\" rel=\\\"stylesheet\\\">\\n<link href=\\\"deps/Source_Code_Pro-0.4.7/font.css\\\" rel=\\\"stylesheet\\\">\\n<!-- Font Awesome icons --><link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css\\\" integrity=\\\"sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk=\\\" crossorigin=\\\"anonymous\\\">\\n<link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/v4-shims.min.css\\\" integrity=\\\"sha256-wZjR52fzng1pJHwx4aV2AO3yyTOXrcDW7jBpJtTwVxw=\\\" crossorigin=\\\"anonymous\\\">\\n<!-- bootstrap-toc --><script src=\\\"https://cdn.jsdelivr.net/gh/afeld/bootstrap-toc@v1.0.1/dist/bootstrap-toc.min.js\\\" integrity=\\\"sha256-4veVQbu7//Lk5TSmc7YV48MxtMy98e26cf5MrgZYnwo=\\\" crossorigin=\\\"anonymous\\\"><\/script><!-- headroom.js --><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/headroom/0.11.0/headroom.min.js\\\" integrity=\\\"sha256-AsUX4SJE1+yuDu5+mAVzJbuYNPHj/WroHuZ8Ir/CkE0=\\\" crossorigin=\\\"anonymous\\\"><\/script><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/headroom/0.11.0/jQuery.headroom.min.js\\\" integrity=\\\"sha256-ZX/yNShbjqsohH1k95liqY9Gd8uOiE1S4vZc+9KQ1K4=\\\" crossorigin=\\\"anonymous\\\"><\/script><!-- clipboard.js --><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.6/clipboard.min.js\\\" integrity=\\\"sha256-inc5kl9MA1hkeYUt+EC3BhlIgyp/2jDIyBLS6k3UxPI=\\\" crossorigin=\\\"anonymous\\\"><\/script><!-- search --><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/fuse.js/6.4.6/fuse.js\\\" integrity=\\\"sha512-zv6Ywkjyktsohkbp9bb45V6tEMoWhzFzXis+LrMehmJZZSys19Yxf1dopHx7WzIKxr5tK2dVcYmaCk2uqdjF4A==\\\" crossorigin=\\\"anonymous\\\"><\/script><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/autocomplete.js/0.38.0/autocomplete.jquery.min.js\\\" integrity=\\\"sha512-GU9ayf+66Xx2TmpxqJpliWbT5PiGYxpaG8rfnBEk1LL8l1KGkRShhngwdXK1UgqhAzWpZHSiYPc09/NwDQIGyg==\\\" crossorigin=\\\"anonymous\\\"><\/script><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/mark.min.js\\\" integrity=\\\"sha512-5CYOlHXGh6QpOFA/TeTylKLWfB3ftPsde7AnmhuitiTX4K5SqCLBeKro6sPS8ilsz1Q4NRx3v8Ko2IBiszzdww==\\\" crossorigin=\\\"anonymous\\\"><\/script><!-- pkgdown --><script src=\\\"pkgdown.js\\\"><\/script><meta property=\\\"og:title\\\" content=\\\"Perform HTTP Requests and Process the Responses\\\">\\n<meta property=\\\"og:description\\\" content=\\\"Tools for creating and modifying HTTP requests, then\\n    performing them and processing the results. httr2 is a modern\\n    re-imagining of httr that uses a pipe-based interface and solves\\n    more of the problems that API wrapping packages face.\\\">\\n<!-- mathjax --><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js\\\" integrity=\\\"sha256-nvJJv9wWKEm88qvoQl9ekL2J+k/RWIsaSScxxlsrv8k=\\\" crossorigin=\\\"anonymous\\\"><\/script><script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/config/TeX-AMS-MML_HTMLorMML.js\\\" integrity=\\\"sha256-84DKXVJXs0/F8OTMzX4UR909+jtl4G7SPypPavF+GfA=\\\" crossorigin=\\\"anonymous\\\"><\/script><!--[if lt IE 9]>\\n<script src=\\\"https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js\\\"><\/script>\\n<script src=\\\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\\\"><\/script>\\n<![endif]--><script defer data-domain=\\\"httr2.r-lib.org,all.tidyverse.org\\\" src=\\\"https://plausible.io/js/plausible.js\\\"><\/script>\\n<\/head>\\n<body>\\n    <a href=\\\"#container\\\" class=\\\"visually-hidden-focusable\\\">Skip to content<\/a>\\n    \\n\\n    <nav class=\\\"navbar fixed-top navbar-light navbar-expand-lg bg-none\\\"><div class=\\\"container\\\">\\n    \\n    <a class=\\\"navbar-brand me-2\\\" href=\\\"index.html\\\">httr2<\/a>\\n\\n    <small class=\\\"nav-text text-muted me-auto\\\" data-bs-toggle=\\\"tooltip\\\" data-bs-placement=\\\"bottom\\\" title=\\\"\\\">0.2.3.9000<\/small>\\n\\n    \\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#navbar\\\" aria-controls=\\\"navbar\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"><\/span>\\n    <\/button>\\n\\n    <div id=\\\"navbar\\\" class=\\\"collapse navbar-collapse ms-3\\\">\\n      <ul class=\\\"navbar-nav me-auto\\\">\\n<li class=\\\"nav-item\\\">\\n  <a class=\\\"nav-link\\\" href=\\\"articles/httr2.html\\\">Get started<\/a>\\n<\/li>\\n<li class=\\\"nav-item\\\">\\n  <a class=\\\"nav-link\\\" href=\\\"reference/index.html\\\">Reference<\/a>\\n<\/li>\\n<li class=\\\"nav-item dropdown\\\">\\n  <a href=\\\"#\\\" class=\\\"nav-link dropdown-toggle\\\" data-bs-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\" aria-haspopup=\\\"true\\\" id=\\\"dropdown-articles\\\">Articles<\/a>\\n  <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdown-articles\\\">\\n    <a class=\\\"dropdown-item\\\" href=\\\"articles/wrapping-apis.html\\\">Wrapping APIs<\/a>\\n    <a class=\\\"dropdown-item\\\" href=\\\"articles/oauth.html\\\">OAuth<\/a>\\n  <\/div>\\n<\/li>\\n<li class=\\\"nav-item\\\">\\n  <a class=\\\"nav-link\\\" href=\\\"news/index.html\\\">Changelog<\/a>\\n<\/li>\\n      <\/ul>\\n<form class=\\\"form-inline my-2 my-lg-0\\\" role=\\\"search\\\">\\n        <input type=\\\"search\\\" class=\\\"form-control me-sm-2\\\" aria-label=\\\"Toggle navigation\\\" name=\\\"search-input\\\" data-search-index=\\\"search.json\\\" id=\\\"search-input\\\" placeholder=\\\"Search for\\\" autocomplete=\\\"off\\\">\\n<\/form>\\n\\n      <ul class=\\\"navbar-nav\\\">\\n<li class=\\\"nav-item\\\">\\n  <a class=\\\"external-link nav-link\\\" href=\\\"https://github.com/r-lib/httr2/\\\" aria-label=\\\"github\\\">\\n    <span class=\\\"fab fa fab fa-github fa-lg\\\"><\/span>\\n     \\n  <\/a>\\n<\/li>\\n      <\/ul>\\n<\/div>\\n\\n    \\n  <\/div>\\n<\/nav><div class=\\\"container template-home\\\" id=\\\"container\\\">\\n<div class=\\\"row\\\">\\n  <main id=\\\"main\\\" class=\\\"col-md-9\\\"><div class=\\\"section level1\\\">\\n<div class=\\\"page-header\\\"><h1 id=\\\"httr2\\\">httr2<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#httr2\\\"><\/a>\\n<\/h1><\/div>\\n<!-- badges: start -->\\n\\n<p>httr2 is a ground-up rewrite of <a href=\\\"https://httr.r-lib.org\\\" class=\\\"external-link\\\">httr<\/a> that provides a pipeable API with an explicit request object that solves more problems felt by packages that wrap APIs (e.g. built-in rate-limiting, retries, OAuth, secure secrets, and more).<\/p>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"installation\\\">Installation<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#installation\\\"><\/a>\\n<\/h2>\\n<p>You can install httr from CRAN with:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb1\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"fu\\\"><a href=\\\"https://rdrr.io/r/utils/install.packages.html\\\" class=\\\"external-link\\\">install.packages<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"httr2\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span><\/code><\/pre><\/div>\\n<\/div>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"usage\\\">Usage<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#usage\\\"><\/a>\\n<\/h2>\\n<p>To use httr2, start by creating a <strong>request<\/strong>:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb2\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"kw\\\"><a href=\\\"https://rdrr.io/r/base/library.html\\\" class=\\\"external-link\\\">library<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"va\\\"><a href=\\\"https://httr2.r-lib.org\\\">httr2<\/a><\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\">&lt;-<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/request.html\\\">request<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"https://r-project.org\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span><\/code><\/pre><\/div>\\n<p>You can tailor this request with the <code>req_<\/code> family of functions:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb3\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"co\\\"># Add custom headers<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_headers.html\\\">req_headers<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"Accept\\\"<\/span> <span class=\\\"op\\\">=<\/span> <span class=\\\"st\\\">\\\"application/json\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Headers:<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • Accept: 'application/json'<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Add a body, turning it into a POST<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_body.html\\\">req_body_json<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"fu\\\"><a href=\\\"https://rdrr.io/r/base/list.html\\\" class=\\\"external-link\\\">list<\/a><\/span><span class=\\\"op\\\">(<\/span>x <span class=\\\"op\\\">=<\/span> <span class=\\\"fl\\\">1<\/span>, y <span class=\\\"op\\\">=<\/span> <span class=\\\"fl\\\">2<\/span><span class=\\\"op\\\">)<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; POST https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: json encoded data<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Automatically retry if the request fails<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_retry.html\\\">req_retry<\/a><\/span><span class=\\\"op\\\">(<\/span>max_tries <span class=\\\"op\\\">=<\/span> <span class=\\\"fl\\\">5<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Policies:<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; • retry_max_tries: 5<\/span><\/span>\\n<span><\/span>\\n<span><span class=\\\"co\\\"># Change the HTTP method<\/span><\/span>\\n<span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_method.html\\\">req_method<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"st\\\">\\\"PATCH\\\"<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_request&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; PATCH https://r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: empty<\/span><\/span><\/code><\/pre><\/div>\\n<p>And see exactly what httr2 will send to the server with <code><a href=\\\"reference/req_dry_run.html\\\">req_dry_run()<\/a><\/code>:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb4\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"va\\\">req<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_dry_run.html\\\">req_dry_run<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET / HTTP/1.1<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Host: r-project.org<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; User-Agent: httr2/0.2.2.9000 r-curl/5.0.0 libcurl/7.87.0<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Accept: */*<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Accept-Encoding: deflate, gzip<\/span><\/span><\/code><\/pre><\/div>\\n<p>Use <code><a href=\\\"reference/req_perform.html\\\">req_perform()<\/a><\/code> to perform the request, retrieving a <strong>response<\/strong>:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb5\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\">&lt;-<\/span> <span class=\\\"fu\\\"><a href=\\\"reference/req_perform.html\\\">req_perform<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"va\\\">req<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"va\\\">resp<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;httr2_response&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; GET https://www.r-project.org/<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Status: 200 OK<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Content-Type: text/html<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; Body: In memory (6204 bytes)<\/span><\/span><\/code><\/pre><\/div>\\n<p>The <code>resp_<\/code> functions help you extract various useful components of the response:<\/p>\\n<div class=\\\"sourceCode\\\" id=\\\"cb6\\\"><pre class=\\\"downlit sourceCode r\\\">\\n<code class=\\\"sourceCode R\\\"><span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/resp_content_type.html\\\">resp_content_type<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [1] \\\"text/html\\\"<\/span><\/span>\\n<span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/resp_status.html\\\">resp_status_desc<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [1] \\\"OK\\\"<\/span><\/span>\\n<span><span class=\\\"va\\\">resp<\/span> <span class=\\\"op\\\"><a href=\\\"reference/pipe.html\\\">%&gt;%<\/a><\/span> <span class=\\\"fu\\\"><a href=\\\"reference/resp_body_raw.html\\\">resp_body_html<\/a><\/span><span class=\\\"op\\\">(<\/span><span class=\\\"op\\\">)<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; {html_document}<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; &lt;html lang=\\\"en\\\"&gt;<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [1] &lt;head&gt;\\\\n&lt;meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8 ...<\/span><\/span>\\n<span><span class=\\\"co\\\">#&gt; [2] &lt;body&gt;\\\\n    &lt;div class=\\\"container page\\\"&gt;\\\\n      &lt;div class=\\\"row\\\"&gt;\\\\n       ...<\/span><\/span><\/code><\/pre><\/div>\\n<\/div>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"major-differences-to-httr\\\">Major differences to httr<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#major-differences-to-httr\\\"><\/a>\\n<\/h2>\\n<ul>\\n<li><p>You can now create and modify a request without performing it. This means that there’s now a single function to perform the request and fetch the result: <code><a href=\\\"reference/req_perform.html\\\">req_perform()<\/a><\/code>. (If you want to handle the response as it streams in, use <code><a href=\\\"reference/req_stream.html\\\">req_stream()<\/a><\/code> instead). <code><a href=\\\"reference/req_perform.html\\\">req_perform()<\/a><\/code> replaces <code><a href=\\\"https://httr.r-lib.org/reference/GET.html\\\" class=\\\"external-link\\\">httr::GET()<\/a><\/code>, <code><a href=\\\"https://httr.r-lib.org/reference/POST.html\\\" class=\\\"external-link\\\">httr::POST()<\/a><\/code>, <code><a href=\\\"https://httr.r-lib.org/reference/DELETE.html\\\" class=\\\"external-link\\\">httr::DELETE()<\/a><\/code>, and more.<\/p><\/li>\\n<li><p>HTTP errors are automatically converted into R errors. Use <code><a href=\\\"reference/req_error.html\\\">req_error()<\/a><\/code> to override the defaults (which turn all 4xx and 5xx responses into errors) or to add additional details to the error message.<\/p><\/li>\\n<li><p>You can automatically retry if the request fails or encounters a transient HTTP error (e.g. a 429 rate limit request). <code><a href=\\\"reference/req_retry.html\\\">req_retry()<\/a><\/code> defines the maximum number of retries, which errors are transient, and how long to wait between tries.<\/p><\/li>\\n<li><p>OAuth support has been totally overhauled to directly support many more flows and to make it much easier to both customise the built-in flows and to create your own.<\/p><\/li>\\n<li><p>You can manage secrets (often needed for testing) with <code><a href=\\\"reference/secrets.html\\\">secret_encrypt()<\/a><\/code> and friends. You can obfuscate mildly confidential data with <code><a href=\\\"reference/obfuscate.html\\\">obfuscate()<\/a><\/code>, preventing it from being scraped from published code.<\/p><\/li>\\n<li><p>You can automatically cache all cacheable results with <code><a href=\\\"reference/req_cache.html\\\">req_cache()<\/a><\/code>. Relatively few API responses are cacheable, but when they are it typically makes a big difference.<\/p><\/li>\\n<\/ul>\\n<\/div>\\n<div class=\\\"section level2\\\">\\n<h2 id=\\\"acknowledgements\\\">Acknowledgements<a class=\\\"anchor\\\" aria-label=\\\"anchor\\\" href=\\\"#acknowledgements\\\"><\/a>\\n<\/h2>\\n<p>httr2 wouldn’t be possible without <a href=\\\"https://jeroen.cran.dev/curl/\\\" class=\\\"external-link\\\">curl<\/a>, <a href=\\\"https://github.com/jeroen/openssl/\\\" class=\\\"external-link\\\">openssl<\/a>, <a href=\\\"https://jeroen.cran.dev/jsonlite/\\\" class=\\\"external-link\\\">jsonlite<\/a>, and <a href=\\\"https://github.com/r-lib/jose/\\\" class=\\\"external-link\\\">jose<\/a>, which are all maintained by <a href=\\\"https://github.com/jeroen\\\" class=\\\"external-link\\\">Jeroen Ooms<\/a>. A big thanks also go to <a href=\\\"https://jennybryan.org\\\" class=\\\"external-link\\\">Jenny Bryan<\/a> and <a href=\\\"https://research.google/people/CraigCitro/\\\" class=\\\"external-link\\\">Craig Citro<\/a> who have given me much useful feedback on both the design of the internals and the user facing API.<\/p>\\n<\/div>\\n<\/div>\\n  <\/main><aside class=\\\"col-md-3\\\"><div class=\\\"links\\\">\\n<h2 data-toc-skip>Links<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"https://cloud.r-project.org/package=httr2\\\" class=\\\"external-link\\\">View on CRAN<\/a><\/li>\\n<li><a href=\\\"https://github.com/r-lib/httr2/\\\" class=\\\"external-link\\\">Browse source code<\/a><\/li>\\n<li><a href=\\\"https://github.com/r-lib/httr2/issues\\\" class=\\\"external-link\\\">Report a bug<\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n<div class=\\\"license\\\">\\n<h2 data-toc-skip>License<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"LICENSE.html\\\">Full license<\/a><\/li>\\n<li><small><a href=\\\"https://opensource.org/licenses/mit-license.php\\\" class=\\\"external-link\\\">MIT<\/a> + file <a href=\\\"LICENSE-text.html\\\">LICENSE<\/a><\/small><\/li>\\n<\/ul>\\n<\/div>\\n\\n\\n<div class=\\\"citation\\\">\\n<h2 data-toc-skip>Citation<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"authors.html#citation\\\">Citing httr2<\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n<div class=\\\"developers\\\">\\n<h2 data-toc-skip>Developers<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li>\\n<a href=\\\"http://hadley.nz\\\" class=\\\"external-link\\\">Hadley Wickham<\/a> <br><small class=\\\"roles\\\"> Author, maintainer <\/small>  <\/li>\\n<li>\\n<a href=\\\"https://www.rstudio.com\\\" class=\\\"external-link\\\"><img src=\\\"https://www.tidyverse.org/rstudio-logo.svg\\\" alt=\\\"RStudio\\\" width=\\\"72\\\"><\/a> <br><small class=\\\"roles\\\"> Copyright holder, funder <\/small>  <\/li>\\n<li><a href=\\\"authors.html\\\">More about authors...<\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n<div class=\\\"dev-status\\\">\\n<h2 data-toc-skip>Dev status<\/h2>\\n<ul class=\\\"list-unstyled\\\">\\n<li><a href=\\\"https://github.com/r-lib/httr2/actions\\\" class=\\\"external-link\\\"><img src=\\\"https://github.com/r-lib/httr2/workflows/R-CMD-check/badge.svg\\\" alt=\\\"R-CMD-check\\\"><\/a><\/li>\\n<li><a href=\\\"https://app.codecov.io/gh/r-lib/httr2?branch=main\\\" class=\\\"external-link\\\"><img src=\\\"https://codecov.io/gh/r-lib/httr2/branch/main/graph/badge.svg\\\" alt=\\\"Codecov test coverage\\\"><\/a><\/li>\\n<\/ul>\\n<\/div>\\n\\n  <\/aside>\\n<\/div>\\n\\n\\n   <\/div>\\n  <footer><div class=\\\"container\\\">\\n  <div class=\\\"pkgdown-footer-left\\\">\\n  <p><\/p>\\n<p>Developed by <a href=\\\"http://hadley.nz\\\" class=\\\"external-link\\\">Hadley Wickham<\/a>, <a href=\\\"https://www.rstudio.com\\\" class=\\\"external-link\\\"><img src=\\\"https://www.tidyverse.org/rstudio-logo.svg\\\" alt=\\\"RStudio\\\" width=\\\"72\\\"><\/a>.<\/p>\\n<\/div>\\n\\n<div class=\\\"pkgdown-footer-right\\\">\\n  <p><\/p>\\n<p>Site built with <a href=\\\"https://pkgdown.r-lib.org/\\\" class=\\\"external-link\\\">pkgdown<\/a> 2.0.7.<\/p>\\n<\/div>\\n\\n  <\/div><\/footer>\\n<\/body>\\n<\/html>\\n\"  if (requireNamespace(\"xml2\", quietly = TRUE)) {   resp %>% resp_body_html() } #> {html_document} #> <html lang=\"en\"> #> [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset ... #> [2] <body>\\n    <a href=\"#container\" class=\"visually-hidden-focusable\"> ..."},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract response content type and encoding — resp_content_type","title":"Extract response content type and encoding — resp_content_type","text":"resp_content_type() returns just type subtype Content-Type header. Content-Type provided; returns NA. Used resp_body_json(), resp_body_html(), resp_body_xml(). resp_encoding() returns likely character encoding text types, parsed charset parameter Content-Type header. header found, valid, charset parameter found, returns UTF-8. Used resp_body_string().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract response content type and encoding — resp_content_type","text":"","code":"resp_content_type(resp)  resp_encoding(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract response content type and encoding — resp_content_type","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract response content type and encoding — resp_content_type","text":"string. content type specified resp_content_type() return character NA; encoding specified, resp_encoding() return \"UTF-8\".","code":""},{"path":"https://httr2.r-lib.org/reference/resp_content_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract response content type and encoding — resp_content_type","text":"","code":"resp <- response(header = \"Content-type: text/html; charset=utf-8\") resp %>% resp_content_type() #> [1] \"text/html\" resp %>% resp_encoding() #> [1] \"utf-8\"  # No Content-Type header resp <- response() resp %>% resp_content_type() #> [1] NA resp %>% resp_encoding() #> [1] \"UTF-8\""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract request date from response — resp_date","title":"Extract request date from response — resp_date","text":"responses contain request date Date header; provided server automatically added httr2.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract request date from response — resp_date","text":"","code":"resp_date(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract request date from response — resp_date","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract request date from response — resp_date","text":"POSIXct date-time.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract request date from response — resp_date","text":"","code":"resp <- response(headers = \"Date: Wed, 01 Jan 2020 09:23:15 UTC\") resp %>% resp_date() #> [1] \"2020-01-01 09:23:15 UTC\"  # If server doesn't add header (unusual), you get the time the request # was created: resp <- response() resp %>% resp_date() #> [1] \"2023-09-01 08:14:58 UTC\""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract headers from a response — resp_headers","title":"Extract headers from a response — resp_headers","text":"resp_headers() retrieves list headers. resp_header() retrieves single header. resp_header_exists() checks header present.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract headers from a response — resp_headers","text":"","code":"resp_headers(resp, filter = NULL)  resp_header(resp, header, default = NULL)  resp_header_exists(resp, header)"},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract headers from a response — resp_headers","text":"resp HTTP response object, created req_perform(). filter regular expression used filter header names. NULL, default, returns headers. header Header name (case insensitive) default Default value use header exist.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract headers from a response — resp_headers","text":"resp_headers() returns list. resp_header() returns string header exists NULL otherwise. resp_header_exists() returns TRUE FALSE.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_headers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract headers from a response — resp_headers","text":"","code":"resp <- request(\"https://httr2.r-lib.org\") %>% req_perform() resp %>% resp_headers() #> <httr2_headers> #> server: GitHub.com #> content-type: text/html; charset=utf-8 #> last-modified: Thu, 31 Aug 2023 21:09:37 GMT #> access-control-allow-origin: * #> etag: W/\"64f10191-4d6a\" #> expires: Fri, 01 Sep 2023 07:40:23 GMT #> cache-control: max-age=600 #> content-encoding: gzip #> x-proxy-cache: MISS #> x-github-request-id: A1D4:9188:36BD2F:3C715D:64F1930E #> accept-ranges: bytes #> date: Fri, 01 Sep 2023 08:14:59 GMT #> via: 1.1 varnish #> age: 27 #> x-served-by: cache-pao-kpao1770063-PAO #> x-cache: HIT #> x-cache-hits: 4 #> x-timer: S1693556099.150584,VS0,VE0 #> vary: Accept-Encoding #> x-fastly-request-id: 6b1acf743ae22a6488ace8d475e952fcd4841b69 #> content-length: 5341 resp %>% resp_headers(\"x-\") #> <httr2_headers> #> x-proxy-cache: MISS #> x-github-request-id: A1D4:9188:36BD2F:3C715D:64F1930E #> x-served-by: cache-pao-kpao1770063-PAO #> x-cache: HIT #> x-cache-hits: 4 #> x-timer: S1693556099.150584,VS0,VE0 #> x-fastly-request-id: 6b1acf743ae22a6488ace8d475e952fcd4841b69  resp %>% resp_header_exists(\"server\") #> [1] TRUE resp %>% resp_header(\"server\") #> [1] \"GitHub.com\" # Headers are case insensitive resp %>% resp_header(\"SERVER\") #> [1] \"GitHub.com\"  # Returns NULL if header doesn't exist resp %>% resp_header(\"this-header-doesnt-exist\") #> NULL"},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse link URL from a response — resp_link_url","title":"Parse link URL from a response — resp_link_url","text":"Parses URLs Link header defined rfc8288.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse link URL from a response — resp_link_url","text":"","code":"resp_link_url(resp, rel)"},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse link URL from a response — resp_link_url","text":"resp HTTP response object, created req_perform(). rel \"link relation type\" value retrieve URL.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse link URL from a response — resp_link_url","text":"Either string providing URL, specified rel exists, NULL .","code":""},{"path":"https://httr2.r-lib.org/reference/resp_link_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse link URL from a response — resp_link_url","text":"","code":"# Simulate response from GitHub code search resp <- response(headers = paste0(\"Link: \",   '<https://api.github.com/search/code?q=addClass+user%3Amozilla&page=2>; rel=\"next\",',   '<https://api.github.com/search/code?q=addClass+user%3Amozilla&page=34>; rel=\"last\"' ))  resp_link_url(resp, \"next\") #> [1] \"https://api.github.com/search/code?q=addClass+user%3Amozilla&page=2\" resp_link_url(resp, \"last\") #> [1] \"https://api.github.com/search/code?q=addClass+user%3Amozilla&page=34\" resp_link_url(resp, \"prev\") #> NULL"},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the raw response — resp_raw","title":"Show the raw response — resp_raw","text":"function reconstructs HTTP message httr2 received server. unlikely exactly byte--byte identical (servers compress least body, HTTP/2 can also compress headers), conveys information.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the raw response — resp_raw","text":"","code":"resp_raw(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the raw response — resp_raw","text":"resp HTTP response","code":""},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the raw response — resp_raw","text":"resp (invisibly).","code":""},{"path":"https://httr2.r-lib.org/reference/resp_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the raw response — resp_raw","text":"","code":"resp <- request(example_url()) %>%   req_url_path(\"/json\") %>%   req_perform() resp %>% resp_raw() #> HTTP/1.1 200 OK #> Connection: close #> Date: Fri, 01 Sep 2023 08:14:59 GMT #> Content-Type: application/json #> Content-Length: 407 #> ETag: \"de760e6d\" #>  #> { #>   \"firstName\": \"John\", #>   \"lastName\": \"Smith\", #>   \"isAlive\": true, #>   \"age\": 27, #>   \"address\": { #>     \"streetAddress\": \"21 2nd Street\", #>     \"city\": \"New York\", #>     \"state\": \"NY\", #>     \"postalCode\": \"10021-3100\" #>   }, #>   \"phoneNumbers\": [ #>     { #>       \"type\": \"home\", #>       \"number\": \"212 555-1234\" #>     }, #>     { #>       \"type\": \"office\", #>       \"number\": \"646 555-4567\" #>     } #>   ], #>   \"children\": [], #>   \"spouse\": null #> } #>"},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract wait time from a response — resp_retry_after","title":"Extract wait time from a response — resp_retry_after","text":"Computes many seconds wait retrying request inspecting Retry-header. parses forms (absolute relative) returns number seconds wait. heading found, return NA.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract wait time from a response — resp_retry_after","text":"","code":"resp_retry_after(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract wait time from a response — resp_retry_after","text":"resp HTTP response object, created req_perform().","code":""},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract wait time from a response — resp_retry_after","text":"Scalar double giving number seconds wait retrying request.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_retry_after.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract wait time from a response — resp_retry_after","text":"","code":"resp <- response(headers = \"Retry-After: 30\") resp %>% resp_retry_after() #> [1] 30  resp <- response(headers = \"Retry-After: Mon, 20 Sep 2025 21:44:05 UTC\") resp %>% resp_retry_after() #> [1] 64848545"},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract HTTP status from response — resp_status","title":"Extract HTTP status from response — resp_status","text":"resp_status() retrieves numeric HTTP status code resp_status_desc() retrieves brief textual description. resp_is_error() returns TRUE status code represents error (.e. 4xx 5xx status). resp_check_status() turns HTTPs errors R errors. functions mostly internal use cases ever see 200 response: 1xx handled internally curl. 3xx redirects automatically followed. see deliberately suppressed redirects req %>% req_options(followlocation = FALSE). 4xx client 5xx server errors automatically turned R errors. can stop turned R errors req_error(), e.g. req %>% req_error(is_error = ~ FALSE).","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract HTTP status from response — resp_status","text":"","code":"resp_status(resp)  resp_status_desc(resp)  resp_is_error(resp)  resp_check_status(resp, info = NULL, error_call = caller_env())"},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract HTTP status from response — resp_status","text":"resp HTTP response object, created req_perform(). info character vector additional information include error message. Passed rlang::abort(). error_call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract HTTP status from response — resp_status","text":"resp_status() returns scalar integer resp_status_desc() returns string resp_is_error() returns TRUE FALSE resp_check_status() invisibly returns response ok; otherwise throws error class httr2_http_{status}.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract HTTP status from response — resp_status","text":"","code":"# An HTTP status code you're unlikely to see in the wild: resp <- response(418) resp %>% resp_is_error() #> [1] TRUE resp %>% resp_status() #> [1] 418 resp %>% resp_status_desc() #> [1] \"I'm a teapot\""},{"path":"https://httr2.r-lib.org/reference/resp_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URL/components from the response — resp_url","title":"Get URL/components from the response — resp_url","text":"resp_url() returns complete url. resp_url_path() returns path component. resp_url_query() returns single query component. resp_url_queries() returns query component named list.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URL/components from the response — resp_url","text":"","code":"resp_url(resp)  resp_url_path(resp)  resp_url_query(resp, name, default = NULL)  resp_url_queries(resp)"},{"path":"https://httr2.r-lib.org/reference/resp_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URL/components from the response — resp_url","text":"resp HTTP response object, created req_perform(). name Query parameter name. default Default value use query parameter exist.","code":""},{"path":"https://httr2.r-lib.org/reference/resp_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get URL/components from the response — resp_url","text":"","code":"resp <- request(example_url()) %>%   req_url_path(\"/get?hello=world\") %>%   req_perform()  resp %>% resp_url() #> [1] \"http://127.0.0.1:39239/get?hello=world\" resp %>% resp_url_path() #> [1] \"/get\" resp %>% resp_url_queries() #> $hello #> [1] \"world\" #>  resp %>% resp_url_query(\"hello\") #> [1] \"world\""},{"path":"https://httr2.r-lib.org/reference/response.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new HTTP response — response","title":"Create a new HTTP response — response","text":"Generally, need call function directly; get real HTTP response calling req_perform() friends. function provided primarily testing, place describe key components response.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new HTTP response — response","text":"","code":"response(   status_code = 200,   url = \"https://example.com\",   method = \"GET\",   headers = list(),   body = raw() )"},{"path":"https://httr2.r-lib.org/reference/response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new HTTP response — response","text":"status_code HTTP status code. Must single integer. url URL response came ; might URL request redirects. method HTTP method used retrieve response. headers HTTP headers. Can supplied raw character vector parsed using standard rules, named list. body Response, , contained response body.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new HTTP response — response","text":"HTTP response: S3 list class httr2_response.","code":""},{"path":"https://httr2.r-lib.org/reference/response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new HTTP response — response","text":"","code":"response() #> <httr2_response> #> GET https://example.com #> Status: 200 OK #> Body: None response(404, method = \"POST\") #> <httr2_response> #> POST https://example.com #> Status: 404 Not Found #> Body: None response(headers = c(\"Content-Type: text/html\", \"Content-Length: 300\")) #> <httr2_response> #> GET https://example.com #> Status: 200 OK #> Content-Type: text/html #> Body: None"},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":null,"dir":"Reference","previous_headings":"","what":"Secret management — secrets","title":"Secret management — secrets","text":"httr2 provides handful functions designed working confidential data. useful testing packages use httr2 often requires confidential data needs available testing, available package users. secret_encrypt() secret_decrypt() work individual strings secret_write_rds() secret_read_rds() work .rds files secret_make_key() generates random string use key. secret_has_key() returns TRUE key available; can use examples vignettes want evaluate CI, CRAN/package users. look key environment variable. used inside testthat, automatically testthat::skip() test env var found. (Outside testthat, error env var found.)","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Secret management — secrets","text":"","code":"secret_make_key()  secret_encrypt(x, key)  secret_decrypt(encrypted, key)  secret_write_rds(x, path, key)  secret_read_rds(path, key)  secret_has_key(key)"},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Secret management — secrets","text":"x Object encrypt. Must string secret_encrypt(). key Encryption key; password allows \"lock\" \"unlock\" secret. easiest way specify name environment variable. Alternatively, already base64url encoded string, can wrap (), can pass raw vector directly. encrypted String decrypt path Path .rds file","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Secret management — secrets","text":"secret_decrypt() secret_encrypt() return strings. secret_write_rds() returns x invisibly; secret_read_rds() returns saved object. secret_make_key() returns string class AsIs. secret_has_key() returns TRUE FALSE.","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"basic-workflow","dir":"Reference","previous_headings":"","what":"Basic workflow","title":"Secret management — secrets","text":"Use secret_make_key() generate password. Make available env var (e.g. {MYPACKAGE}_KEY) adding line .Renviron. Encrypt strings secret_encrypt() data secret_write_rds(), setting key = \"{MYPACKAGE}_KEY\". tests, decrypt data secret_decrypt() secret_read_rds() match encrypt . push code CI server, already \"work\" functions automatically skip tests {MYPACKAGE}_KEY} env var set. make tests actually run, need set env var using whatever tool CI system provides setting env vars. Make sure carefully inspect test output check skips actually gone away.","code":""},{"path":"https://httr2.r-lib.org/reference/secrets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Secret management — secrets","text":"","code":"key <- secret_make_key()  path <- tempfile() secret_write_rds(mtcars, path, key = key) secret_read_rds(path, key) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # While you can manage the key explicitly in a variable, it's much # easier to store in an environment variable. In real life, you should # NEVER use `Sys.setenv()` to create this env var because you will # also store the secret in your `.Rhistory`. Instead add it to your # .Renviron using `usethis::edit_r_environ()` or similar. Sys.setenv(\"MY_KEY\" = key)  x <- secret_encrypt(\"This is a secret\", \"MY_KEY\") x #> [1] \"Klg-njUqnaVZo8qLwqWvo01JSw44020GeS-CxSQ2URQ\" secret_decrypt(x, \"MY_KEY\") #> [1] \"This is a secret\""},{"path":"https://httr2.r-lib.org/reference/throttle_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Display internal throttle status — throttle_status","title":"Display internal throttle status — throttle_status","text":"Sometimes useful debugging.","code":""},{"path":"https://httr2.r-lib.org/reference/throttle_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display internal throttle status — throttle_status","text":"","code":"throttle_status()"},{"path":"https://httr2.r-lib.org/reference/throttle_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display internal throttle status — throttle_status","text":"data frame two columns: realm time last_request made.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and build URLs — url_parse","title":"Parse and build URLs — url_parse","text":"url_parse() parses URL component pieces; url_build() reverse, converting list pieces string URL. See rfc3986 details parsing algorithm.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and build URLs — url_parse","text":"","code":"url_parse(url)  url_build(url)"},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and build URLs — url_parse","text":"url url_parse() string parse URL; url_build() URL turn back string.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and build URLs — url_parse","text":"url_build() returns string. url_parse() returns URL: S3 list class httr2_url elements scheme, hostname, port, path, fragment, query, username, password.","code":""},{"path":"https://httr2.r-lib.org/reference/url_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse and build URLs — url_parse","text":"","code":"url_parse(\"http://google.com/\") #> <httr2_url> http://google.com/ #> • scheme: http #> • hostname: google.com #> • path: / url_parse(\"http://google.com:80/\") #> <httr2_url> http://google.com:80/ #> • scheme: http #> • hostname: google.com #> • port: 80 #> • path: / url_parse(\"http://google.com:80/?a=1&b=2\") #> <httr2_url> http://google.com:80/?a=1&b=2 #> • scheme: http #> • hostname: google.com #> • port: 80 #> • path: / #> • query: #>   • a: 1 #>   • b: 2 url_parse(\"http://username@google.com:80/path;test?a=1&b=2#40\") #> <httr2_url> http://username@google.com:80/path;test?a=1&b=2#40 #> • scheme: http #> • hostname: google.com #> • username: username #> • port: 80 #> • path: /path;test #> • query: #>   • a: 1 #>   • b: 2 #> • fragment: 40  url <- url_parse(\"http://google.com/\") url$port <- 80 url$hostname <- \"example.com\" url$query <- list(a = 1, b = 2, c = 3) url_build(url) #> [1] \"http://example.com:80/?a=1&b=2&c=3\""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily mock requests — with_mock","title":"Temporarily mock requests — with_mock","text":"Mocking allows selectively temporarily replace response typically receive request code. primarily used testing.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily mock requests — with_mock","text":"","code":"with_mock(mock, code)  local_mock(mock, env = caller_env())"},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily mock requests — with_mock","text":"mock single argument function called request object. return either NULL (want handle request) response (). code Code execute temporary environment. env Environment use scoping changes.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily mock requests — with_mock","text":"with_mock() returns result evaluating code.","code":""},{"path":"https://httr2.r-lib.org/reference/with_mock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily mock requests — with_mock","text":"","code":"# This function should perform a response against google.com: google <- function() {   request(\"http://google.com\") %>%     req_perform() }  # But I can use a mock to instead return my own made up response: my_mock <- function(req) {   response(status_code = 403) } try(with_mock(my_mock, google())) #> Error in req_perform(.) : HTTP 403 Forbidden."},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set verbosity for all requests — with_verbosity","title":"Temporarily set verbosity for all requests — with_verbosity","text":"with_verbosity() useful debugging httr2 code buried deep inside another package allows see exactly sent requested.","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set verbosity for all requests — with_verbosity","text":"","code":"with_verbosity(code, verbosity = 1)"},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set verbosity for all requests — with_verbosity","text":"code Code execture verbosity much information print? wrapper around req_verbose() uses integer control verbosity: 0: output 1: show headers 2: show headers bodies 3: show headers, bodies, curl status messages. Use with_verbosity() control verbosity requests affect directly.","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set verbosity for all requests — with_verbosity","text":"result evaluating code.","code":""},{"path":"https://httr2.r-lib.org/reference/with_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set verbosity for all requests — with_verbosity","text":"","code":"fun <- function() {   request(\"https://httr2.r-lib.org\") %>% req_perform() } with_verbosity(fun()) #> -> GET / HTTP/2 #> -> Host: httr2.r-lib.org #> -> user-agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/7.81.0 #> -> accept: */* #> -> accept-encoding: deflate, gzip, br, zstd #> ->  #> <- HTTP/2 200  #> <- server: GitHub.com #> <- content-type: text/html; charset=utf-8 #> <- last-modified: Thu, 31 Aug 2023 21:09:37 GMT #> <- access-control-allow-origin: * #> <- etag: W/\"64f10191-4d6a\" #> <- expires: Fri, 01 Sep 2023 07:40:23 GMT #> <- cache-control: max-age=600 #> <- content-encoding: gzip #> <- x-proxy-cache: MISS #> <- x-github-request-id: A1D4:9188:36BD2F:3C715D:64F1930E #> <- accept-ranges: bytes #> <- date: Fri, 01 Sep 2023 08:15:03 GMT #> <- via: 1.1 varnish #> <- age: 31 #> <- x-served-by: cache-pao-kpao1770063-PAO #> <- x-cache: HIT #> <- x-cache-hits: 5 #> <- x-timer: S1693556103.309913,VS0,VE1 #> <- vary: Accept-Encoding #> <- x-fastly-request-id: 9cf3c6f40cac28fc22958cdb21f940d459d8e3dc #> <- content-length: 5341 #> <-  #> <httr2_response> #> GET https://httr2.r-lib.org/ #> Status: 200 OK #> Content-Type: text/html #> Body: In memory (19818 bytes)"},{"path":"https://httr2.r-lib.org/news/index.html","id":"httr2-development-version","dir":"Changelog","previous_headings":"","what":"httr2 (development version)","title":"httr2 (development version)","text":"New oauth_cache_path() returns path httr2 uses caching OAuth tokens. Additionally, can now change cache location setting HTTR2_OAUTH_CACHE env var. New vignette(\"oauth\") makes details OAuth usage easier find (#234). New req_cookie_preserve() lets use file share cookies across requests (#223). req_oauth_bearer_jwt() now includes claim cache key (#192). req_cache() gains max_n, max_size, max_age arguments automatically prune cache. default, cache pruned 1 GB (#207). req_performs() progress bar can suppressed setting options(httr2_progress = FALSE) (#251). req_perform() now throws error class httr2_failure request fails. error now captures curl error parent. New resp_url(), resp_url_path(), resp_url_queries() resp_url_query() extract various part response url (#57). Progress bars displayed waiting time pass now informative (#206). url_build() automatically adds leading / path missing (#276). Cached responses now combine headers new response headers cached response. particular, fixes resp_body_json/xml/html() cached responses (@mgirlich, #277). with_mock() local_mock() now correctly trigger errors mocked response represents HTTP failure (#252). New req_progress() adds progress bar long download uploads (#20). @mgirlich now httr2 contributor recognition many small contributions. req_headers() gains .redact argument controls whether redact header (@mgirlich, #247). req_body_file() now supports “rewinding”. occasionally needed upload file URL uses 307 308 redirect state submitted file different URL, makes “necessary data rewind wasn’t possible” error go away (#268). curl_translate() now produces escapes single quotes raw strings case double quotes can’t used (@mgirlich, #264). curl_translate() gains argument simplify_headers removes common unimportant headers e.g. Sec-Fetch-Dest sec-ch-ua-mobile (@mgirlich, #256). curl_translate() now parses query components url (@mgirlich, #259). curl_translate() now works multiline commands clipboard (@mgirlich, #254). New resp_has_body() returns TRUE FALSE depending whether response body (#205). Improve print method responses body saved disk. obfuscated() values now display original call printed. resp_header() gains default argument returned header doesn’t exist (#208). oauth_flow_refresh() now warns refresh_token changes, making little easier use manual workflows (#186). oauth_flow_auth_code() now attempts detect ’re running hosted environment (e.g. Google Collab/Posit Workbench/Posit cloud) allows users enter authorisation code console manually (#248). oauth_flow_auth_code() gains redirect_uri argument rather deriving URL automatically host_name port (#248).","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"httr2-023","dir":"Changelog","previous_headings":"","what":"httr2 0.2.3","title":"httr2 0.2.3","text":"CRAN release: 2023-05-08 New example_url() launch local server, making tests examples robust. New throttle_status() make little easier verify ’s happening throttling. req_oauth_refresh() now respects refresh_token caching (@mgirlich, #178). req_perform() now always sleeps request, rather . also gains error_call argument communicates clearly error occurred (@mgirlich, #187). req_url_path() req_url_path_append() can now handle NULL empty ... elements ... can also length > 1 (@mgirlich, #177). sys_sleep() (used req_retry() req_throttle()) gains progress bar (#202).","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"httr2-022","dir":"Changelog","previous_headings":"","what":"httr2 0.2.2","title":"httr2 0.2.2","text":"CRAN release: 2022-09-25 curl_translate() can now handle curl copied Chrome developer tools (@mgirlich, #161). req_oauth_*() can now refresh OAuth tokens. One, two, even times! (@jennybc, #166) req_oauth_device() can now work non-interactive environments, intendend (@flahn, #170) req_oauth_refresh() oauth_flow_refresh() now use envvar HTTR2_REFRESH_TOKEN, HTTR_REFRESH_TOKEN (@jennybc, #169). req_proxy() now uses appropriate authentication option (@jl5000). req_url_query() can now opt escaping () (@boshek, #152). Can now print responses content type empty string (@mgirlich, #163).","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"httr2-021","dir":"Changelog","previous_headings":"","what":"httr2 0.2.1","title":"httr2 0.2.1","text":"CRAN release: 2022-05-10 “Wrapping APIs” now article, vignette. req_template() now appends path instead replacing (@jchrom, #133)","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"httr2-020","dir":"Changelog","previous_headings":"","what":"httr2 0.2.0","title":"httr2 0.2.0","text":"CRAN release: 2022-04-28","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"httr2 0.2.0","text":"req_body_form(), req_body_multipart(), req_url_query() now support multiple arguments name (#97, #107). req_body_form(), req_body_multipart(), now match interface req_url_query(), taking name-value pairs .... Supplying single list() now deprecated removed future version. req_body_json() now overrides existing JSON body, rather attempting merge previous value (#95, #115). Implement req_proxy() (owenjonesuob, #77).","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"httr2 0.2.0","text":"httr_path class renamed httr2_path correctly match package name (#99). oauth_flow_device() gains PKCE support (@flahn, #92), interactive flow little user friendly. req_error() can now correct force successful HTTP statuses fail (#98). req_headers() now override Content-Type set req_body_*() (#116). req_throttle() correctly sets throttle rate (@jchrom, #101). req_url_query() never uses scientific notation queries (#93). req_perform() now respects httr::with_verbose() (#85). response() now defaults body raw(0) consistency real responses (#100). req_stream() longer throws error non 200 http status codes (@DMerch, #137)","code":""},{"path":"https://httr2.r-lib.org/news/index.html","id":"httr2-011","dir":"Changelog","previous_headings":"","what":"httr2 0.1.1","title":"httr2 0.1.1","text":"CRAN release: 2021-09-28 Fix R CMD check failures CRAN Added NEWS.md file track changes package.","code":""}]
