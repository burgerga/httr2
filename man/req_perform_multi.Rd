% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/req-perform-multi.R
\name{req_perform_multi}
\alias{req_perform_multi}
\title{Perform a multi request}
\usage{
req_perform_multi(
  req,
  max_requests = NULL,
  cancel_on_error = FALSE,
  progress = TRUE,
  error_call = current_env()
)
}
\arguments{
\item{req}{A \link{request}.}

\item{max_requests}{The maximum number of requests to perform.}

\item{cancel_on_error}{Should all pending requests be cancelled when you
hit an error. Set this to \code{TRUE} to stop all requests as soon as you
hit an error. Responses that were never performed will have class
\code{httr2_cancelled} in the result.}

\item{progress}{Display a progress bar? Use \code{TRUE} to turn on a basic progress
bar, use a string to give it a name, or see \link{progress_bars} for more details.}

\item{error_call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\value{
The result of \code{vec_c()}ing together the \code{data} fields that were
extracted by the \code{parse_resp} argument of \code{\link[=req_paginate]{req_paginate()}}.
If \code{parse_resp} is not specified, it will be a list of the raw responses.
}
\description{
Perform a request with a multi policy, e.g. created by \code{\link[=req_paginate]{req_paginate()}} or
\code{\link[=req_chunk]{req_chunk()}}.
}
\examples{
page_size <- 150

req_pokemon <- request("https://pokeapi.co/api/v2/pokemon") \%>\%
  req_url_query(limit = page_size) \%>\%
  req_paginate_next_url(
    parse_resp = function(resp) {
      parsed <- resp_body_json(resp)
      results <- parsed$results
      data <- data.frame(
        name = sapply(results, `[[`, "name"),
        url = sapply(results, `[[`, "url")
      )

      list(data = data, next_url = parsed$`next`)
    },
    n_pages = function(parsed) {
      total <- parsed$count
      ceiling(total / page_size)
    }
  )

responses <- req_perform_multi(req_pokemon)
}
