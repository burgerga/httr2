% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paginate.R
\name{req_paginate}
\alias{req_paginate}
\alias{req_paginate_next_url}
\alias{req_paginate_token}
\alias{req_paginate_offset}
\alias{req_paginate_page_index}
\title{Pagination}
\usage{
req_paginate(req, next_request, parse_resp = NULL, n_pages = NULL)

req_paginate_next_url(req, next_url, parse_resp = NULL, n_pages = NULL)

req_paginate_token(
  req,
  set_token,
  next_token,
  parse_resp = NULL,
  n_pages = NULL
)

req_paginate_offset(req, offset, page_size, parse_resp = NULL, n_pages = NULL)

req_paginate_page_index(req, page_index, parse_resp = NULL, n_pages = NULL)
}
\arguments{
\item{req}{A \link{request}.}

\item{next_request}{A callback function that returns a \link{request} to the next
page or \code{NULL} if there is no next page. It takes a three arguments:
\enumerate{
\item \code{req}: the previous request.
\item \code{resp}: the response of the current request.
\item \code{parsed}: the result of the argument \code{parse_resp}.
}}

\item{parse_resp}{A function with one argument \code{resp} that parses the
response. The result is passed to the argument \code{parsed} of \code{next_request()} and
\code{n_pages()}. This helps to avoid parsing the response multiple times.}

\item{n_pages}{An optional function that extracts the total number of pages, improving the
automatically generated progress bar. It has two arguments:
\enumerate{
\item \code{resp}: the response of the current request.
\item \code{parsed}: the result of the argument \code{parse_resp}.
}}

\item{next_url}{A function that extracts the url to the next page. It takes
two arguments:
\enumerate{
\item \code{resp}: the response of the current request.
\item \code{parsed}: the result of the argument \code{parse_resp}.
}}

\item{set_token}{A function that applies the new token to the request. It
takes two arguments: a \link{request} and the new token.
\enumerate{
\item \code{req}: the previous request.
\item \code{token}: the token for the next page.
}}

\item{next_token}{A function that extracts the next token from the \link{response}.}

\item{offset}{A function that applies the new offset to the request. It takes
two arguments:
\enumerate{
\item \code{req}: the previous request.
\item \code{offset}: the integer offset for the next page.
}}

\item{page_size}{A whole number that specifies the page size i.e. the number
of elements per page.}

\item{page_index}{A function that applies the page index to the request. It
takes two arguments:
\enumerate{
\item \code{req}: the previous request.
\item \code{offset}: the integer page index for the next page.
}}
}
\value{
A modified HTTP \link{request}.
}
\description{
Use \code{req_paginate()} to specify how to request the next page in a paginated
API. Use \code{\link[=paginate_req_perform]{paginate_req_perform()}} to fetch all pages.
If you need more control use a combination of \code{\link[=req_perform]{req_perform()}} and
\code{\link[=paginate_next_request]{paginate_next_request()}} to iterate through the pages yourself.
There are also helpers for common pagination patterns:
\itemize{
\item \code{req_paginate_next_url()} when the response contains a link to the next
page.
\item \code{req_paginate_offset()} when the request describes the offset i.e.
at which element to start and the page size.
\item \code{req_paginate_next_token()} when the response contains a token
that is used to describe the next page.
}
}
\examples{
page_size <- 150

request("https://pokeapi.co/api/v2/pokemon") \%>\%
  req_url_query(limit = page_size) \%>\%
  req_paginate_next_url(
    parse_resp = resp_body_json,
    next_url = function(resp, parsed) parsed[["next"]],
    n_pages = function(resp, parsed) {
      total <- parsed$count
      ceiling(total / page_size)
    }
  )
}
\seealso{
\code{\link[=paginate_req_perform]{paginate_req_perform()}} to fetch all pages. \code{\link[=paginate_next_request]{paginate_next_request()}}
to generate the request to the next page.
}
